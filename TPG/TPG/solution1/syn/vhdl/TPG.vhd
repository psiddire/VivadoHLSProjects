-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.4
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity TPG is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_0_data_input : IN STD_LOGIC_VECTOR (15 downto 0);
    in_0_lincoeff : IN STD_LOGIC_VECTOR (31 downto 0);
    out_0_filOut : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_0_filOut_ap_vld : OUT STD_LOGIC;
    out_0_peakOut : OUT STD_LOGIC;
    out_0_peakOut_ap_vld : OUT STD_LOGIC;
    out_0_peakAmp : OUT STD_LOGIC_VECTOR (15 downto 0);
    out_0_peakAmp_ap_vld : OUT STD_LOGIC );
end;


architecture behav of TPG is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "TPG,hls_ip_2016_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7vx690tffg1927-2,HLS_INPUT_CLOCK=6.250000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.420000,HLS_SYN_LAT=4,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=2,HLS_SYN_FF=307,HLS_SYN_LUT=408}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv28_0 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv18_3FFFF : STD_LOGIC_VECTOR (17 downto 0) := "111111111111111111";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv16_3FF : STD_LOGIC_VECTOR (15 downto 0) := "0000001111111111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv10_3FF : STD_LOGIC_VECTOR (9 downto 0) := "1111111111";
    constant ap_const_lv32_FFFFFFDD : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111011101";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_shift_reg_0_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal reg_shift_reg_0_2 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000000";
    signal reg_shift_reg_0_1 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000000";
    signal reg_shift_reg_0_0 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000000";
    signal reg_peak_reg_0_0 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    signal reg_peak_reg_0_1 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    signal base_fu_195_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal base_reg_654 : STD_LOGIC_VECTOR (11 downto 0);
    signal shiftlin_reg_659 : STD_LOGIC_VECTOR (3 downto 0);
    signal mult_reg_664 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_640_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal prod_reg_669 : STD_LOGIC_VECTOR (20 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal linearizerOutput_fu_246_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal linearizerOutput_reg_674 : STD_LOGIC_VECTOR (20 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_13_i_reg_679 : STD_LOGIC_VECTOR (25 downto 0);
    signal pro_1_i_fu_648_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal pro_1_i_reg_684 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_reg_689 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_15_fu_503_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_15_reg_694 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_16_reg_699 : STD_LOGIC_VECTOR (9 downto 0);
    signal extLd9_fu_259_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal o_filOut_fu_522_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_fu_171_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_fu_181_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_167_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_1_fu_187_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal uncorrectedADC_fu_219_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_6_i_cast_fu_233_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_8_i_fu_236_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_8_i_cast_fu_242_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_7_fu_269_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_neg_i_fu_275_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_281_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal pro_fu_287_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_fu_303_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_shl8_i_fu_307_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_shl9_i_fu_319_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal p_shl8_i_cast_fu_315_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal p_shl9_i_cast_fu_327_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal pro_1_3_i_fu_331_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_15_i_fu_379_p4 : STD_LOGIC_VECTOR (25 downto 0);
    signal tmp_11_fu_392_p4 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_3_fu_406_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal p_shl1_i_cast_fu_414_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal extLd_cast_fu_361_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal pro_1_2_i_fu_418_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_12_fu_424_p4 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_i_cast_43_fu_434_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal mul_1_i_cast_fu_402_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp2_fu_441_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal mul_3_i_cast_fu_438_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal mul_i_cast_fu_388_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp4_fu_451_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal mul_cast_fu_376_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp4_cast_fu_457_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp3_fu_461_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp2_cast_fu_447_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp3_cast_fu_467_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_6_fu_471_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal acc_1_3_i_fu_475_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_14_fu_487_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal acc_1_3_i_cast_fu_481_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal p_acc_i_fu_495_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal icmp1_fu_517_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_i_fu_538_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_i_fu_548_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_fu_561_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp2_fu_571_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_577_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmpPeak_fu_587_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_19_fu_599_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp3_fu_609_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_fu_595_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmpPeak_2_fu_615_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_640_p0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_640_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_640_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal pro_1_i_fu_648_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_640_p00 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_640_p10 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_640_p20 : STD_LOGIC_VECTOR (20 downto 0);

    component TPG_am_submul_12nbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (11 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (20 downto 0) );
    end component;


    component TPG_mul_mul_7s_21cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (6 downto 0);
        din1 : IN STD_LOGIC_VECTOR (20 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    TPG_am_submul_12nbkb_U1 : component TPG_am_submul_12nbkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 12,
        din1_WIDTH => 12,
        din2_WIDTH => 8,
        dout_WIDTH => 21)
    port map (
        din0 => grp_fu_640_p0,
        din1 => grp_fu_640_p1,
        din2 => grp_fu_640_p2,
        dout => grp_fu_640_p3);

    TPG_mul_mul_7s_21cud_U2 : component TPG_mul_mul_7s_21cud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 7,
        din1_WIDTH => 21,
        dout_WIDTH => 32)
    port map (
        din0 => pro_1_i_fu_648_p0,
        din1 => reg_shift_reg_0_2,
        dout => pro_1_i_fu_648_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then
                base_reg_654 <= base_fu_195_p1;
                mult_reg_664 <= tmp_1_fu_187_p3(23 downto 16);
                shiftlin_reg_659 <= tmp_1_fu_187_p3(15 downto 12);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state3))) then
                linearizerOutput_reg_674 <= linearizerOutput_fu_246_p2;
                pro_1_i_reg_684 <= pro_1_i_fu_648_p2;
                reg_shift_reg_0_3 <= extLd9_fu_259_p1;
                tmp_13_i_reg_679 <= pro_fu_287_p2(31 downto 6);
                tmp_5_reg_689 <= pro_1_3_i_fu_331_p2(24 downto 6);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state2))) then
                prod_reg_669 <= grp_fu_640_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state5))) then
                reg_peak_reg_0_0 <= o_filOut_fu_522_p3;
                reg_peak_reg_0_1 <= reg_peak_reg_0_0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then
                reg_shift_reg_0_0 <= linearizerOutput_reg_674;
                reg_shift_reg_0_1 <= reg_shift_reg_0_0;
                reg_shift_reg_0_2 <= reg_shift_reg_0_1;
                tmp_15_reg_694 <= tmp_15_fu_503_p1;
                tmp_16_reg_699 <= p_acc_i_fu_495_p3(27 downto 18);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    acc_1_3_i_cast_fu_481_p2 <= std_logic_vector(unsigned(tmp3_fu_461_p2) + unsigned(tmp_6_fu_471_p1));
    acc_1_3_i_fu_475_p2 <= std_logic_vector(signed(tmp2_cast_fu_447_p1) + signed(tmp3_cast_fu_467_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0 downto 0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1 downto 1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2 downto 2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3 downto 3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4 downto 4);

    ap_done_assign_proc : process(ap_CS_fsm_state5)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state5))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state5))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    base_fu_195_p1 <= tmp_1_fu_187_p3(12 - 1 downto 0);
        extLd9_fu_259_p1 <= std_logic_vector(resize(signed(reg_shift_reg_0_2),32));

        extLd_cast_fu_361_p1 <= std_logic_vector(resize(signed(reg_shift_reg_0_0),27));

    grp_fu_640_p0 <= grp_fu_640_p00(12 - 1 downto 0);
    grp_fu_640_p00 <= std_logic_vector(resize(unsigned(uncorrectedADC_fu_219_p1),13));
    grp_fu_640_p1 <= grp_fu_640_p10(12 - 1 downto 0);
    grp_fu_640_p10 <= std_logic_vector(resize(unsigned(base_reg_654),13));
    grp_fu_640_p2 <= grp_fu_640_p20(8 - 1 downto 0);
    grp_fu_640_p20 <= std_logic_vector(resize(unsigned(mult_reg_664),21));
    icmp1_fu_517_p2 <= "0" when (tmp_16_reg_699 = ap_const_lv10_0) else "1";
    icmp2_fu_571_p2 <= "0" when (tmp_17_fu_561_p4 = ap_const_lv6_0) else "1";
    icmp3_fu_609_p2 <= "0" when (tmp_19_fu_599_p4 = ap_const_lv6_0) else "1";
    icmp_fu_181_p2 <= "1" when (tmp_fu_171_p4 = ap_const_lv8_0) else "0";
    linearizerOutput_fu_246_p2 <= std_logic_vector(shift_right(signed(prod_reg_669),to_integer(unsigned('0' & tmp_8_i_cast_fu_242_p1(21-1 downto 0)))));
        mul_1_i_cast_fu_402_p1 <= std_logic_vector(resize(signed(tmp_11_fu_392_p4),27));

        mul_3_i_cast_fu_438_p1 <= std_logic_vector(resize(signed(tmp_5_reg_689),27));

        mul_cast_fu_376_p1 <= std_logic_vector(resize(signed(tmp_13_i_reg_679),28));

        mul_i_cast_43_fu_434_p1 <= std_logic_vector(resize(signed(tmp_12_fu_424_p4),27));

        mul_i_cast_fu_388_p1 <= std_logic_vector(resize(signed(tmp_15_i_fu_379_p4),27));

    o_filOut_fu_522_p3 <= 
        ap_const_lv18_3FFFF when (icmp1_fu_517_p2(0) = '1') else 
        tmp_15_reg_694;
    out_0_filOut <= std_logic_vector(resize(unsigned(o_filOut_fu_522_p3),32));

    out_0_filOut_ap_vld_assign_proc : process(ap_CS_fsm_state5)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state5))) then 
            out_0_filOut_ap_vld <= ap_const_logic_1;
        else 
            out_0_filOut_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    out_0_peakAmp <= std_logic_vector(resize(unsigned(tmpPeak_2_fu_615_p3),16));

    out_0_peakAmp_ap_vld_assign_proc : process(ap_CS_fsm_state5)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state5))) then 
            out_0_peakAmp_ap_vld <= ap_const_logic_1;
        else 
            out_0_peakAmp_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    out_0_peakOut <= (tmp_19_i_fu_538_p2(0) and tmp_20_i_fu_548_p2(0));

    out_0_peakOut_ap_vld_assign_proc : process(ap_CS_fsm_state5)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state5))) then 
            out_0_peakOut_ap_vld <= ap_const_logic_1;
        else 
            out_0_peakOut_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_acc_i_fu_495_p3 <= 
        ap_const_lv28_0 when (tmp_14_fu_487_p3(0) = '1') else 
        acc_1_3_i_cast_fu_481_p2;
    p_neg_i_fu_275_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(tmp_7_fu_269_p2));
        p_shl1_i_cast_fu_414_p1 <= std_logic_vector(resize(signed(tmp_3_fu_406_p3),27));

        p_shl8_i_cast_fu_315_p1 <= std_logic_vector(resize(signed(p_shl8_i_fu_307_p3),25));

    p_shl8_i_fu_307_p3 <= (tmp_13_fu_303_p1 & ap_const_lv5_0);
        p_shl9_i_cast_fu_327_p1 <= std_logic_vector(resize(signed(p_shl9_i_fu_319_p3),25));

    p_shl9_i_fu_319_p3 <= (tmp_13_fu_303_p1 & ap_const_lv3_0);
    pro_1_2_i_fu_418_p2 <= std_logic_vector(signed(p_shl1_i_cast_fu_414_p1) - signed(extLd_cast_fu_361_p1));
    pro_1_3_i_fu_331_p2 <= std_logic_vector(signed(p_shl8_i_cast_fu_315_p1) - signed(p_shl9_i_cast_fu_327_p1));
    pro_1_i_fu_648_p0 <= ap_const_lv32_FFFFFFDD(7 - 1 downto 0);
    pro_fu_287_p2 <= std_logic_vector(unsigned(p_neg_i_fu_275_p2) - unsigned(tmp_9_fu_281_p2));
        tmp2_cast_fu_447_p1 <= std_logic_vector(resize(signed(tmp2_fu_441_p2),29));

    tmp2_fu_441_p2 <= std_logic_vector(signed(mul_i_cast_43_fu_434_p1) + signed(mul_1_i_cast_fu_402_p1));
        tmp3_cast_fu_467_p1 <= std_logic_vector(resize(signed(tmp3_fu_461_p2),29));

    tmp3_fu_461_p2 <= std_logic_vector(signed(mul_cast_fu_376_p1) + signed(tmp4_cast_fu_457_p1));
        tmp4_cast_fu_457_p1 <= std_logic_vector(resize(signed(tmp4_fu_451_p2),28));

    tmp4_fu_451_p2 <= std_logic_vector(signed(mul_3_i_cast_fu_438_p1) + signed(mul_i_cast_fu_388_p1));
    tmpPeak_2_fu_615_p3 <= 
        ap_const_lv10_3FF when (icmp3_fu_609_p2(0) = '1') else 
        tmp_18_fu_595_p1;
    tmpPeak_fu_587_p3 <= 
        ap_const_lv16_3FF when (icmp2_fu_571_p2(0) = '1') else 
        tmp_8_fu_577_p4;
    tmp_11_fu_392_p4 <= reg_shift_reg_0_1(20 downto 2);
    tmp_12_fu_424_p4 <= pro_1_2_i_fu_418_p2(26 downto 6);
    tmp_13_fu_303_p1 <= linearizerOutput_fu_246_p2(19 - 1 downto 0);
    tmp_14_fu_487_p3 <= acc_1_3_i_fu_475_p2(28 downto 28);
    tmp_15_fu_503_p1 <= p_acc_i_fu_495_p3(18 - 1 downto 0);
    tmp_15_i_fu_379_p4 <= pro_1_i_reg_684(31 downto 6);
    tmp_17_fu_561_p4 <= reg_peak_reg_0_0(17 downto 12);
    tmp_18_fu_595_p1 <= tmpPeak_fu_587_p3(10 - 1 downto 0);
    tmp_19_fu_599_p4 <= tmpPeak_fu_587_p3(15 downto 10);
    tmp_19_i_fu_538_p2 <= "1" when (unsigned(reg_peak_reg_0_0) > unsigned(o_filOut_fu_522_p3)) else "0";
    tmp_1_fu_187_p3 <= 
        ap_const_lv24_0 when (icmp_fu_181_p2(0) = '1') else 
        tmp_2_fu_167_p1;
    tmp_20_i_fu_548_p2 <= "1" when (unsigned(reg_peak_reg_0_0) > unsigned(reg_peak_reg_0_1)) else "0";
    tmp_2_fu_167_p1 <= in_0_lincoeff(24 - 1 downto 0);
    tmp_3_fu_406_p3 <= (reg_shift_reg_0_0 & ap_const_lv5_0);
        tmp_6_fu_471_p1 <= std_logic_vector(resize(signed(tmp2_fu_441_p2),28));

    tmp_6_i_cast_fu_233_p1 <= std_logic_vector(resize(unsigned(shiftlin_reg_659),5));
    tmp_7_fu_269_p2 <= std_logic_vector(shift_left(unsigned(reg_shift_reg_0_3),to_integer(unsigned('0' & ap_const_lv32_5(31-1 downto 0)))));
    tmp_8_fu_577_p4 <= reg_peak_reg_0_0(17 downto 2);
    tmp_8_i_cast_fu_242_p1 <= std_logic_vector(resize(unsigned(tmp_8_i_fu_236_p2),21));
    tmp_8_i_fu_236_p2 <= std_logic_vector(unsigned(ap_const_lv5_2) + unsigned(tmp_6_i_cast_fu_233_p1));
    tmp_9_fu_281_p2 <= std_logic_vector(shift_left(unsigned(reg_shift_reg_0_3),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    tmp_fu_171_p4 <= in_0_lincoeff(23 downto 16);
    uncorrectedADC_fu_219_p1 <= in_0_data_input(12 - 1 downto 0);
end behav;
