// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.3
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="TPG,hls_ip_2016_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcku115-flvb2104-2-e,HLS_INPUT_CLOCK=6.250000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.090000,HLS_SYN_LAT=4,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=2,HLS_SYN_FF=274,HLS_SYN_LUT=308}" *)

module TPG (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_0_data_input_V,
        in_0_lincoeff_V,
        out_0_filOut_V,
        out_0_filOut_V_ap_vld,
        out_0_peakOut,
        out_0_peakOut_ap_vld
);

parameter    ap_ST_fsm_state1 = 5'b1;
parameter    ap_ST_fsm_state2 = 5'b10;
parameter    ap_ST_fsm_state3 = 5'b100;
parameter    ap_ST_fsm_state4 = 5'b1000;
parameter    ap_ST_fsm_state5 = 5'b10000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv18_0 = 18'b000000000000000000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_10 = 32'b10000;
parameter    ap_const_lv32_17 = 32'b10111;
parameter    ap_const_lv8_0 = 8'b00000000;
parameter    ap_const_lv24_0 = 24'b000000000000000000000000;
parameter    ap_const_lv32_C = 32'b1100;
parameter    ap_const_lv32_F = 32'b1111;
parameter    ap_const_lv5_2 = 5'b10;
parameter    ap_const_lv5_0 = 5'b00000;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv32_18 = 32'b11000;
parameter    ap_const_lv21_3 = 21'b11;
parameter    ap_const_lv32_11 = 32'b10001;
parameter    ap_const_lv32_12 = 32'b10010;
parameter    ap_const_lv25_1FFFFDD = 25'b1111111111111111111011101;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [13:0] in_0_data_input_V;
input  [23:0] in_0_lincoeff_V;
output  [17:0] out_0_filOut_V;
output   out_0_filOut_V_ap_vld;
output   out_0_peakOut;
output   out_0_peakOut_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg out_0_filOut_V_ap_vld;
reg out_0_peakOut_ap_vld;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state1;
reg   [17:0] reg_shift_reg_V_0_3;
reg   [17:0] reg_shift_reg_V_0_2;
reg   [17:0] reg_shift_reg_V_0_1;
reg   [17:0] reg_shift_reg_V_0_0;
reg   [17:0] reg_peak_reg_V_0_0;
reg   [17:0] reg_peak_reg_V_0_1;
wire   [11:0] base_V_fu_144_p1;
reg   [11:0] base_V_reg_532;
reg   [3:0] shiftlin_V_reg_537;
reg   [7:0] mult_reg_542;
wire  signed [20:0] grp_fu_518_p3;
reg  signed [20:0] r_V_1_reg_547;
wire   [0:0] ap_CS_fsm_state2;
wire   [17:0] linearizerOutput_V_fu_200_p1;
reg   [17:0] linearizerOutput_V_reg_552;
wire   [0:0] ap_CS_fsm_state3;
reg   [18:0] tmp_13_i_reg_557;
wire  signed [24:0] r_V_4_i_fu_526_p2;
reg  signed [24:0] r_V_4_i_reg_562;
reg   [17:0] tmp_4_reg_568;
reg   [17:0] tmp_7_reg_574;
wire   [17:0] o_filOut_V_fu_473_p3;
reg   [17:0] o_filOut_V_reg_579;
wire   [0:0] ap_CS_fsm_state4;
wire   [0:0] ap_CS_fsm_state5;
wire   [7:0] tmp_10_fu_120_p4;
wire   [0:0] icmp_fu_130_p2;
wire   [23:0] p_lincoeff_V_i_fu_136_p3;
wire   [11:0] uncorrectedADC_V_fu_168_p1;
wire   [4:0] tmp_3_i_cast8_fu_182_p1;
wire   [4:0] tmp_1_i_fu_185_p2;
wire   [20:0] tmp_1_i_cast_fu_191_p1;
wire   [20:0] tmp_2_i_fu_195_p2;
wire   [22:0] p_shl_i_fu_218_p3;
wire   [23:0] p_shl_i_cast_fu_226_p1;
wire   [23:0] p_neg_i_fu_230_p2;
wire   [19:0] p_shl1_i_fu_240_p3;
wire  signed [24:0] p_neg_i_cast_fu_236_p1;
wire   [24:0] p_shl1_i_cast_fu_248_p1;
wire   [24:0] r_V_2_fu_252_p2;
wire   [22:0] p_shl6_i_fu_272_p3;
wire   [20:0] tmp_13_fu_284_p2;
wire   [23:0] p_shl6_i_cast_fu_280_p1;
wire   [23:0] p_shl7_i_cast_fu_290_p1;
wire   [23:0] r_V_4_3_i_fu_294_p2;
wire   [15:0] tmp_19_1_i_fu_354_p4;
wire   [22:0] p_shl8_i_fu_376_p3;
wire   [23:0] p_shl8_i_cast_fu_384_p1;
wire   [23:0] lhs_V_4_2_i_cast6_fu_372_p1;
wire   [23:0] r_V_4_2_i_fu_388_p2;
wire   [17:0] tmp_1_fu_394_p4;
wire   [18:0] tmp_19_1_i_cast_fu_368_p1;
wire  signed [18:0] tmp_2_fu_404_p1;
wire   [18:0] mul_V_i_fu_345_p4;
wire  signed [18:0] tmp_5_fu_408_p1;
wire   [17:0] tmp_6_fu_417_p4;
wire   [18:0] tmp4_fu_426_p2;
wire   [17:0] tmp_8_fu_432_p2;
wire   [17:0] tmp_fu_364_p1;
wire   [18:0] tmp3_fu_437_p2;
wire   [18:0] tmp2_fu_411_p2;
wire   [17:0] tmp_s_fu_447_p2;
wire   [17:0] tmp_9_fu_442_p2;
wire   [18:0] addconv_3_i_fu_453_p2;
wire   [0:0] tmp_14_fu_465_p3;
wire   [17:0] addconv_3_i_cast_fu_459_p2;
wire   [0:0] tmp_17_i_fu_485_p2;
wire   [0:0] tmp_18_i_fu_494_p2;
wire   [11:0] grp_fu_518_p0;
wire   [11:0] grp_fu_518_p1;
wire   [7:0] grp_fu_518_p2;
wire  signed [6:0] r_V_4_i_fu_526_p0;
wire   [17:0] r_V_4_i_fu_526_p1;
reg   [4:0] ap_NS_fsm;
wire   [12:0] grp_fu_518_p00;
wire   [12:0] grp_fu_518_p10;
wire   [20:0] grp_fu_518_p20;
wire   [24:0] r_V_4_i_fu_526_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'b1;
#0 reg_shift_reg_V_0_3 = 18'b000000000000000000;
#0 reg_shift_reg_V_0_2 = 18'b000000000000000000;
#0 reg_shift_reg_V_0_1 = 18'b000000000000000000;
#0 reg_shift_reg_V_0_0 = 18'b000000000000000000;
#0 reg_peak_reg_V_0_0 = 18'b000000000000000000;
#0 reg_peak_reg_V_0_1 = 18'b000000000000000000;
end

TPG_am_submul_12nbkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 12 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 21 ))
TPG_am_submul_12nbkb_U1(
    .din0(grp_fu_518_p0),
    .din1(grp_fu_518_p1),
    .din2(grp_fu_518_p2),
    .dout(grp_fu_518_p3)
);

TPG_mul_mul_7s_18cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 7 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 25 ))
TPG_mul_mul_7s_18cud_U2(
    .din0(r_V_4_i_fu_526_p0),
    .din1(r_V_4_i_fu_526_p1),
    .dout(r_V_4_i_fu_526_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        base_V_reg_532 <= base_V_fu_144_p1;
        mult_reg_542 <= {{p_lincoeff_V_i_fu_136_p3[ap_const_lv32_17 : ap_const_lv32_10]}};
        shiftlin_V_reg_537 <= {{p_lincoeff_V_i_fu_136_p3[ap_const_lv32_F : ap_const_lv32_C]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        linearizerOutput_V_reg_552 <= linearizerOutput_V_fu_200_p1;
        r_V_4_i_reg_562 <= r_V_4_i_fu_526_p2;
        reg_shift_reg_V_0_3 <= reg_shift_reg_V_0_2;
        tmp_13_i_reg_557 <= {{r_V_2_fu_252_p2[ap_const_lv32_18 : ap_const_lv32_6]}};
        tmp_4_reg_568 <= {{r_V_4_3_i_fu_294_p2[ap_const_lv32_17 : ap_const_lv32_6]}};
        tmp_7_reg_574 <= {{r_V_2_fu_252_p2[ap_const_lv32_17 : ap_const_lv32_6]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        o_filOut_V_reg_579 <= o_filOut_V_fu_473_p3;
        reg_shift_reg_V_0_0 <= linearizerOutput_V_reg_552;
        reg_shift_reg_V_0_1 <= reg_shift_reg_V_0_0;
        reg_shift_reg_V_0_2 <= reg_shift_reg_V_0_1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        r_V_1_reg_547 <= grp_fu_518_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        reg_peak_reg_V_0_0 <= o_filOut_V_reg_579;
        reg_peak_reg_V_0_1 <= reg_peak_reg_V_0_0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        out_0_filOut_V_ap_vld = 1'b1;
    end else begin
        out_0_filOut_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        out_0_peakOut_ap_vld = 1'b1;
    end else begin
        out_0_peakOut_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign addconv_3_i_cast_fu_459_p2 = (tmp_s_fu_447_p2 + tmp_9_fu_442_p2);

assign addconv_3_i_fu_453_p2 = (tmp3_fu_437_p2 + tmp2_fu_411_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[ap_const_lv32_0];

assign ap_CS_fsm_state2 = ap_CS_fsm[ap_const_lv32_1];

assign ap_CS_fsm_state3 = ap_CS_fsm[ap_const_lv32_2];

assign ap_CS_fsm_state4 = ap_CS_fsm[ap_const_lv32_3];

assign ap_CS_fsm_state5 = ap_CS_fsm[ap_const_lv32_4];

assign base_V_fu_144_p1 = p_lincoeff_V_i_fu_136_p3[11:0];

assign grp_fu_518_p0 = grp_fu_518_p00;

assign grp_fu_518_p00 = uncorrectedADC_V_fu_168_p1;

assign grp_fu_518_p1 = grp_fu_518_p10;

assign grp_fu_518_p10 = base_V_reg_532;

assign grp_fu_518_p2 = grp_fu_518_p20;

assign grp_fu_518_p20 = mult_reg_542;

assign icmp_fu_130_p2 = ((tmp_10_fu_120_p4 == ap_const_lv8_0) ? 1'b1 : 1'b0);

assign lhs_V_4_2_i_cast6_fu_372_p1 = reg_shift_reg_V_0_0;

assign linearizerOutput_V_fu_200_p1 = tmp_2_i_fu_195_p2[17:0];

assign mul_V_i_fu_345_p4 = {{r_V_4_i_reg_562[ap_const_lv32_18 : ap_const_lv32_6]}};

assign o_filOut_V_fu_473_p3 = ((tmp_14_fu_465_p3[0:0] === 1'b1) ? ap_const_lv18_0 : addconv_3_i_cast_fu_459_p2);

assign out_0_filOut_V = o_filOut_V_reg_579;

assign out_0_peakOut = (tmp_17_i_fu_485_p2 & tmp_18_i_fu_494_p2);

assign p_lincoeff_V_i_fu_136_p3 = ((icmp_fu_130_p2[0:0] === 1'b1) ? ap_const_lv24_0 : in_0_lincoeff_V);

assign p_neg_i_cast_fu_236_p1 = $signed(p_neg_i_fu_230_p2);

assign p_neg_i_fu_230_p2 = (ap_const_lv24_0 - p_shl_i_cast_fu_226_p1);

assign p_shl1_i_cast_fu_248_p1 = p_shl1_i_fu_240_p3;

assign p_shl1_i_fu_240_p3 = {{reg_shift_reg_V_0_3}, {ap_const_lv2_0}};

assign p_shl6_i_cast_fu_280_p1 = p_shl6_i_fu_272_p3;

assign p_shl6_i_fu_272_p3 = {{linearizerOutput_V_fu_200_p1}, {ap_const_lv5_0}};

assign p_shl7_i_cast_fu_290_p1 = tmp_13_fu_284_p2;

assign p_shl8_i_cast_fu_384_p1 = p_shl8_i_fu_376_p3;

assign p_shl8_i_fu_376_p3 = {{reg_shift_reg_V_0_0}, {ap_const_lv5_0}};

assign p_shl_i_cast_fu_226_p1 = p_shl_i_fu_218_p3;

assign p_shl_i_fu_218_p3 = {{reg_shift_reg_V_0_3}, {ap_const_lv5_0}};

assign r_V_2_fu_252_p2 = ($signed(p_neg_i_cast_fu_236_p1) - $signed(p_shl1_i_cast_fu_248_p1));

assign r_V_4_2_i_fu_388_p2 = (p_shl8_i_cast_fu_384_p1 - lhs_V_4_2_i_cast6_fu_372_p1);

assign r_V_4_3_i_fu_294_p2 = (p_shl6_i_cast_fu_280_p1 - p_shl7_i_cast_fu_290_p1);

assign r_V_4_i_fu_526_p0 = ap_const_lv25_1FFFFDD;

assign r_V_4_i_fu_526_p1 = r_V_4_i_fu_526_p10;

assign r_V_4_i_fu_526_p10 = reg_shift_reg_V_0_2;

assign tmp2_fu_411_p2 = ($signed(tmp_19_1_i_cast_fu_368_p1) + $signed(tmp_2_fu_404_p1));

assign tmp3_fu_437_p2 = (tmp4_fu_426_p2 + tmp_13_i_reg_557);

assign tmp4_fu_426_p2 = ($signed(mul_V_i_fu_345_p4) + $signed(tmp_5_fu_408_p1));

assign tmp_10_fu_120_p4 = {{in_0_lincoeff_V[ap_const_lv32_17 : ap_const_lv32_10]}};

assign tmp_13_fu_284_p2 = tmp_2_i_fu_195_p2 << ap_const_lv21_3;

assign tmp_14_fu_465_p3 = addconv_3_i_fu_453_p2[ap_const_lv32_12];

assign tmp_17_i_fu_485_p2 = ((reg_peak_reg_V_0_0 > o_filOut_V_reg_579) ? 1'b1 : 1'b0);

assign tmp_18_i_fu_494_p2 = ((reg_peak_reg_V_0_0 > reg_peak_reg_V_0_1) ? 1'b1 : 1'b0);

assign tmp_19_1_i_cast_fu_368_p1 = tmp_19_1_i_fu_354_p4;

assign tmp_19_1_i_fu_354_p4 = {{reg_shift_reg_V_0_1[ap_const_lv32_11 : ap_const_lv32_2]}};

assign tmp_1_fu_394_p4 = {{r_V_4_2_i_fu_388_p2[ap_const_lv32_17 : ap_const_lv32_6]}};

assign tmp_1_i_cast_fu_191_p1 = tmp_1_i_fu_185_p2;

assign tmp_1_i_fu_185_p2 = (ap_const_lv5_2 + tmp_3_i_cast8_fu_182_p1);

assign tmp_2_fu_404_p1 = $signed(tmp_1_fu_394_p4);

assign tmp_2_i_fu_195_p2 = $signed(r_V_1_reg_547) >>> tmp_1_i_cast_fu_191_p1;

assign tmp_3_i_cast8_fu_182_p1 = shiftlin_V_reg_537;

assign tmp_5_fu_408_p1 = $signed(tmp_4_reg_568);

assign tmp_6_fu_417_p4 = {{r_V_4_i_reg_562[ap_const_lv32_17 : ap_const_lv32_6]}};

assign tmp_8_fu_432_p2 = (tmp_4_reg_568 + tmp_6_fu_417_p4);

assign tmp_9_fu_442_p2 = (tmp_7_reg_574 + tmp_8_fu_432_p2);

assign tmp_fu_364_p1 = tmp_19_1_i_fu_354_p4;

assign tmp_s_fu_447_p2 = (tmp_1_fu_394_p4 + tmp_fu_364_p1);

assign uncorrectedADC_V_fu_168_p1 = in_0_data_input_V[11:0];

endmodule //TPG
