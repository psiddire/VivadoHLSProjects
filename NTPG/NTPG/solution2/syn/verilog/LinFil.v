// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.3
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module LinFil (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        data_int,
        lincoeff,
        r_0_shift_reg_i,
        r_0_shift_reg_o,
        r_0_shift_reg_o_ap_vld,
        r_1_shift_reg_i,
        r_1_shift_reg_o,
        r_1_shift_reg_o_ap_vld,
        r_2_shift_reg_i,
        r_2_shift_reg_o,
        r_2_shift_reg_o_ap_vld,
        r_3_shift_reg_i,
        r_3_shift_reg_o,
        r_3_shift_reg_o_ap_vld,
        r_0_peak_reg_i,
        r_0_peak_reg_o,
        r_0_peak_reg_o_ap_vld,
        r_1_peak_reg_i,
        r_1_peak_reg_o,
        r_1_peak_reg_o_ap_vld,
        ap_return_0,
        ap_return_1
);

parameter    ap_ST_fsm_state1 = 5'b1;
parameter    ap_ST_fsm_state2 = 5'b10;
parameter    ap_ST_fsm_state3 = 5'b100;
parameter    ap_ST_fsm_state4 = 5'b1000;
parameter    ap_ST_fsm_state5 = 5'b10000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_10 = 32'b10000;
parameter    ap_const_lv32_17 = 32'b10111;
parameter    ap_const_lv8_0 = 8'b00000000;
parameter    ap_const_lv24_0 = 24'b000000000000000000000000;
parameter    ap_const_lv32_C = 32'b1100;
parameter    ap_const_lv32_F = 32'b1111;
parameter    ap_const_lv5_2 = 5'b10;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv32_1F = 32'b11111;
parameter    ap_const_lv5_0 = 5'b00000;
parameter    ap_const_lv3_0 = 3'b000;
parameter    ap_const_lv32_18 = 32'b11000;
parameter    ap_const_lv32_14 = 32'b10100;
parameter    ap_const_lv32_1A = 32'b11010;
parameter    ap_const_lv32_1C = 32'b11100;
parameter    ap_const_lv28_0 = 28'b0000000000000000000000000000;
parameter    ap_const_lv32_12 = 32'b10010;
parameter    ap_const_lv32_1B = 32'b11011;
parameter    ap_const_lv10_0 = 10'b0000000000;
parameter    ap_const_lv18_3FFFF = 18'b111111111111111111;
parameter    ap_const_lv32_FFFFFFDD = 32'b11111111111111111111111111011101;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] data_int;
input  [31:0] lincoeff;
input  [20:0] r_0_shift_reg_i;
output  [20:0] r_0_shift_reg_o;
output   r_0_shift_reg_o_ap_vld;
input  [20:0] r_1_shift_reg_i;
output  [20:0] r_1_shift_reg_o;
output   r_1_shift_reg_o_ap_vld;
input  [20:0] r_2_shift_reg_i;
output  [20:0] r_2_shift_reg_o;
output   r_2_shift_reg_o_ap_vld;
input  [31:0] r_3_shift_reg_i;
output  [31:0] r_3_shift_reg_o;
output   r_3_shift_reg_o_ap_vld;
input  [17:0] r_0_peak_reg_i;
output  [17:0] r_0_peak_reg_o;
output   r_0_peak_reg_o_ap_vld;
input  [17:0] r_1_peak_reg_i;
output  [17:0] r_1_peak_reg_o;
output   r_1_peak_reg_o_ap_vld;
output  [31:0] ap_return_0;
output  [0:0] ap_return_1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg r_0_shift_reg_o_ap_vld;
reg r_1_shift_reg_o_ap_vld;
reg r_2_shift_reg_o_ap_vld;
reg r_3_shift_reg_o_ap_vld;
reg r_0_peak_reg_o_ap_vld;
reg r_1_peak_reg_o_ap_vld;
reg[31:0] ap_return_0;
reg[0:0] ap_return_1;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state1;
wire   [11:0] base_fu_235_p1;
reg   [11:0] base_reg_580;
reg   [3:0] shiftlin_reg_585;
reg   [7:0] mult_reg_590;
wire  signed [20:0] grp_fu_566_p3;
reg  signed [20:0] prod_reg_595;
wire   [0:0] ap_CS_fsm_state2;
wire   [20:0] linearizerOutput_fu_286_p2;
reg   [20:0] linearizerOutput_reg_600;
wire   [0:0] ap_CS_fsm_state3;
reg   [25:0] tmp_300_reg_605;
wire  signed [31:0] pro_1_fu_574_p2;
reg  signed [31:0] pro_1_reg_610;
reg   [18:0] tmp_14_reg_615;
wire   [17:0] tmp_18_fu_505_p1;
reg   [17:0] tmp_18_reg_620;
wire   [0:0] ap_CS_fsm_state4;
reg   [9:0] tmp_19_reg_625;
wire  signed [31:0] extLd_fu_291_p1;
wire   [0:0] ap_CS_fsm_state5;
wire   [17:0] o_filOut_fu_524_p3;
wire   [7:0] tmp_4_fu_211_p4;
wire   [0:0] icmp_fu_221_p2;
wire   [23:0] tmp_2_fu_207_p1;
wire   [23:0] tmp_3_fu_227_p3;
wire   [11:0] uncorrectedADC_fu_259_p1;
wire   [4:0] tmp_4_cast_fu_273_p1;
wire   [4:0] tmp_7_fu_276_p2;
wire   [20:0] tmp_7_cast_fu_282_p1;
wire   [31:0] tmp_8_fu_296_p2;
wire   [31:0] p_neg_fu_302_p2;
wire   [31:0] tmp_9_fu_308_p2;
wire   [31:0] pro_fu_314_p2;
wire   [18:0] tmp_16_fu_330_p1;
wire   [23:0] p_shl3_fu_334_p3;
wire   [21:0] p_shl4_fu_346_p3;
wire  signed [24:0] p_shl3_cast_fu_342_p1;
wire  signed [24:0] p_shl4_cast_fu_354_p1;
wire   [24:0] pro_1_3_fu_358_p2;
wire   [25:0] tmp_301_fu_381_p4;
wire   [18:0] tmp_10_fu_394_p4;
wire   [25:0] tmp_5_fu_408_p3;
wire  signed [26:0] p_shl2_cast_fu_416_p1;
wire  signed [26:0] extLd_cast_fu_374_p1;
wire   [26:0] pro_1_2_fu_420_p2;
wire   [20:0] tmp_13_fu_426_p4;
wire  signed [26:0] mul_cast_36_fu_436_p1;
wire  signed [26:0] mul_1_cast_fu_404_p1;
wire   [26:0] tmp4_fu_443_p2;
wire  signed [26:0] mul_3_cast_fu_440_p1;
wire  signed [26:0] mul_cast_fu_390_p1;
wire   [26:0] tmp6_fu_453_p2;
wire  signed [27:0] mul_4_cast_fu_378_p1;
wire  signed [27:0] tmp6_cast_fu_459_p1;
wire   [27:0] tmp5_fu_463_p2;
wire  signed [28:0] tmp4_cast_fu_449_p1;
wire  signed [28:0] tmp5_cast_fu_469_p1;
wire  signed [27:0] tmp_15_fu_473_p1;
wire   [28:0] acc_1_3_fu_477_p2;
wire   [0:0] tmp_17_fu_489_p3;
wire   [27:0] acc_1_3_cast_fu_483_p2;
wire   [27:0] p_acc_fu_497_p3;
wire   [0:0] icmp6_fu_519_p2;
wire   [0:0] tmp_11_fu_536_p2;
wire   [0:0] tmp_12_fu_542_p2;
wire   [31:0] o_filOut_cast_fu_532_p1;
wire   [0:0] agg_result_peakOut_w_fu_548_p2;
wire   [11:0] grp_fu_566_p0;
wire   [11:0] grp_fu_566_p1;
wire   [7:0] grp_fu_566_p2;
wire  signed [6:0] pro_1_fu_574_p0;
wire  signed [20:0] pro_1_fu_574_p1;
reg   [31:0] ap_return_0_preg;
reg   [0:0] ap_return_1_preg;
reg   [4:0] ap_NS_fsm;
wire   [12:0] grp_fu_566_p00;
wire   [12:0] grp_fu_566_p10;
wire   [20:0] grp_fu_566_p20;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'b1;
#0 ap_return_0_preg = 32'b00000000000000000000000000000000;
#0 ap_return_1_preg = 1'b0;
end

TPG_am_submul_12nbkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 12 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 21 ))
TPG_am_submul_12nbkb_U1(
    .din0(grp_fu_566_p0),
    .din1(grp_fu_566_p1),
    .din2(grp_fu_566_p2),
    .dout(grp_fu_566_p3)
);

TPG_mul_mul_7s_21cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 7 ),
    .din1_WIDTH( 21 ),
    .dout_WIDTH( 32 ))
TPG_mul_mul_7s_21cud_U2(
    .din0(pro_1_fu_574_p0),
    .din1(pro_1_fu_574_p1),
    .dout(pro_1_fu_574_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                ap_return_0_preg[0] <= 1'b0;
        ap_return_0_preg[1] <= 1'b0;
        ap_return_0_preg[2] <= 1'b0;
        ap_return_0_preg[3] <= 1'b0;
        ap_return_0_preg[4] <= 1'b0;
        ap_return_0_preg[5] <= 1'b0;
        ap_return_0_preg[6] <= 1'b0;
        ap_return_0_preg[7] <= 1'b0;
        ap_return_0_preg[8] <= 1'b0;
        ap_return_0_preg[9] <= 1'b0;
        ap_return_0_preg[10] <= 1'b0;
        ap_return_0_preg[11] <= 1'b0;
        ap_return_0_preg[12] <= 1'b0;
        ap_return_0_preg[13] <= 1'b0;
        ap_return_0_preg[14] <= 1'b0;
        ap_return_0_preg[15] <= 1'b0;
        ap_return_0_preg[16] <= 1'b0;
        ap_return_0_preg[17] <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state5)) begin
                        ap_return_0_preg[17 : 0] <= o_filOut_cast_fu_532_p1[17 : 0];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_1_preg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_return_1_preg <= agg_result_peakOut_w_fu_548_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        base_reg_580 <= base_fu_235_p1;
        mult_reg_590 <= {{tmp_3_fu_227_p3[ap_const_lv32_17 : ap_const_lv32_10]}};
        shiftlin_reg_585 <= {{tmp_3_fu_227_p3[ap_const_lv32_F : ap_const_lv32_C]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        linearizerOutput_reg_600 <= linearizerOutput_fu_286_p2;
        pro_1_reg_610 <= pro_1_fu_574_p2;
        tmp_14_reg_615 <= {{pro_1_3_fu_358_p2[ap_const_lv32_18 : ap_const_lv32_6]}};
        tmp_300_reg_605 <= {{pro_fu_314_p2[ap_const_lv32_1F : ap_const_lv32_6]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        prod_reg_595 <= grp_fu_566_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        tmp_18_reg_620 <= tmp_18_fu_505_p1;
        tmp_19_reg_625 <= {{p_acc_fu_497_p3[ap_const_lv32_1B : ap_const_lv32_12]}};
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1)) | (1'b1 == ap_CS_fsm_state5))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_return_0 = o_filOut_cast_fu_532_p1;
    end else begin
        ap_return_0 = ap_return_0_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_return_1 = agg_result_peakOut_w_fu_548_p2;
    end else begin
        ap_return_1 = ap_return_1_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        r_0_peak_reg_o_ap_vld = 1'b1;
    end else begin
        r_0_peak_reg_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        r_0_shift_reg_o_ap_vld = 1'b1;
    end else begin
        r_0_shift_reg_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        r_1_peak_reg_o_ap_vld = 1'b1;
    end else begin
        r_1_peak_reg_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        r_1_shift_reg_o_ap_vld = 1'b1;
    end else begin
        r_1_shift_reg_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        r_2_shift_reg_o_ap_vld = 1'b1;
    end else begin
        r_2_shift_reg_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        r_3_shift_reg_o_ap_vld = 1'b1;
    end else begin
        r_3_shift_reg_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign acc_1_3_cast_fu_483_p2 = ($signed(tmp5_fu_463_p2) + $signed(tmp_15_fu_473_p1));

assign acc_1_3_fu_477_p2 = ($signed(tmp4_cast_fu_449_p1) + $signed(tmp5_cast_fu_469_p1));

assign agg_result_peakOut_w_fu_548_p2 = (tmp_11_fu_536_p2 & tmp_12_fu_542_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[ap_const_lv32_0];

assign ap_CS_fsm_state2 = ap_CS_fsm[ap_const_lv32_1];

assign ap_CS_fsm_state3 = ap_CS_fsm[ap_const_lv32_2];

assign ap_CS_fsm_state4 = ap_CS_fsm[ap_const_lv32_3];

assign ap_CS_fsm_state5 = ap_CS_fsm[ap_const_lv32_4];

assign base_fu_235_p1 = tmp_3_fu_227_p3[11:0];

assign extLd_cast_fu_374_p1 = $signed(r_0_shift_reg_i);

assign extLd_fu_291_p1 = $signed(r_2_shift_reg_i);

assign grp_fu_566_p0 = grp_fu_566_p00;

assign grp_fu_566_p00 = uncorrectedADC_fu_259_p1;

assign grp_fu_566_p1 = grp_fu_566_p10;

assign grp_fu_566_p10 = base_reg_580;

assign grp_fu_566_p2 = grp_fu_566_p20;

assign grp_fu_566_p20 = mult_reg_590;

assign icmp6_fu_519_p2 = ((tmp_19_reg_625 != ap_const_lv10_0) ? 1'b1 : 1'b0);

assign icmp_fu_221_p2 = ((tmp_4_fu_211_p4 == ap_const_lv8_0) ? 1'b1 : 1'b0);

assign linearizerOutput_fu_286_p2 = $signed(prod_reg_595) >>> tmp_7_cast_fu_282_p1;

assign mul_1_cast_fu_404_p1 = $signed(tmp_10_fu_394_p4);

assign mul_3_cast_fu_440_p1 = $signed(tmp_14_reg_615);

assign mul_4_cast_fu_378_p1 = $signed(tmp_300_reg_605);

assign mul_cast_36_fu_436_p1 = $signed(tmp_13_fu_426_p4);

assign mul_cast_fu_390_p1 = $signed(tmp_301_fu_381_p4);

assign o_filOut_cast_fu_532_p1 = o_filOut_fu_524_p3;

assign o_filOut_fu_524_p3 = ((icmp6_fu_519_p2[0:0] === 1'b1) ? ap_const_lv18_3FFFF : tmp_18_reg_620);

assign p_acc_fu_497_p3 = ((tmp_17_fu_489_p3[0:0] === 1'b1) ? ap_const_lv28_0 : acc_1_3_cast_fu_483_p2);

assign p_neg_fu_302_p2 = (ap_const_lv32_0 - tmp_8_fu_296_p2);

assign p_shl2_cast_fu_416_p1 = $signed(tmp_5_fu_408_p3);

assign p_shl3_cast_fu_342_p1 = $signed(p_shl3_fu_334_p3);

assign p_shl3_fu_334_p3 = {{tmp_16_fu_330_p1}, {ap_const_lv5_0}};

assign p_shl4_cast_fu_354_p1 = $signed(p_shl4_fu_346_p3);

assign p_shl4_fu_346_p3 = {{tmp_16_fu_330_p1}, {ap_const_lv3_0}};

assign pro_1_2_fu_420_p2 = ($signed(p_shl2_cast_fu_416_p1) - $signed(extLd_cast_fu_374_p1));

assign pro_1_3_fu_358_p2 = ($signed(p_shl3_cast_fu_342_p1) - $signed(p_shl4_cast_fu_354_p1));

assign pro_1_fu_574_p0 = ap_const_lv32_FFFFFFDD;

assign pro_1_fu_574_p1 = extLd_fu_291_p1;

assign pro_fu_314_p2 = (p_neg_fu_302_p2 - tmp_9_fu_308_p2);

assign r_0_peak_reg_o = o_filOut_fu_524_p3;

assign r_0_shift_reg_o = linearizerOutput_reg_600;

assign r_1_peak_reg_o = r_0_peak_reg_i;

assign r_1_shift_reg_o = r_0_shift_reg_i;

assign r_2_shift_reg_o = r_1_shift_reg_i;

assign r_3_shift_reg_o = extLd_fu_291_p1;

assign tmp4_cast_fu_449_p1 = $signed(tmp4_fu_443_p2);

assign tmp4_fu_443_p2 = ($signed(mul_cast_36_fu_436_p1) + $signed(mul_1_cast_fu_404_p1));

assign tmp5_cast_fu_469_p1 = $signed(tmp5_fu_463_p2);

assign tmp5_fu_463_p2 = ($signed(mul_4_cast_fu_378_p1) + $signed(tmp6_cast_fu_459_p1));

assign tmp6_cast_fu_459_p1 = $signed(tmp6_fu_453_p2);

assign tmp6_fu_453_p2 = ($signed(mul_3_cast_fu_440_p1) + $signed(mul_cast_fu_390_p1));

assign tmp_10_fu_394_p4 = {{r_1_shift_reg_i[ap_const_lv32_14 : ap_const_lv32_2]}};

assign tmp_11_fu_536_p2 = ((r_0_peak_reg_i > o_filOut_fu_524_p3) ? 1'b1 : 1'b0);

assign tmp_12_fu_542_p2 = ((r_0_peak_reg_i > r_1_peak_reg_i) ? 1'b1 : 1'b0);

assign tmp_13_fu_426_p4 = {{pro_1_2_fu_420_p2[ap_const_lv32_1A : ap_const_lv32_6]}};

assign tmp_15_fu_473_p1 = $signed(tmp4_fu_443_p2);

assign tmp_16_fu_330_p1 = linearizerOutput_fu_286_p2[18:0];

assign tmp_17_fu_489_p3 = acc_1_3_fu_477_p2[ap_const_lv32_1C];

assign tmp_18_fu_505_p1 = p_acc_fu_497_p3[17:0];

assign tmp_2_fu_207_p1 = lincoeff[23:0];

assign tmp_301_fu_381_p4 = {{pro_1_reg_610[ap_const_lv32_1F : ap_const_lv32_6]}};

assign tmp_3_fu_227_p3 = ((icmp_fu_221_p2[0:0] === 1'b1) ? ap_const_lv24_0 : tmp_2_fu_207_p1);

assign tmp_4_cast_fu_273_p1 = shiftlin_reg_585;

assign tmp_4_fu_211_p4 = {{lincoeff[ap_const_lv32_17 : ap_const_lv32_10]}};

assign tmp_5_fu_408_p3 = {{r_0_shift_reg_i}, {ap_const_lv5_0}};

assign tmp_7_cast_fu_282_p1 = tmp_7_fu_276_p2;

assign tmp_7_fu_276_p2 = (ap_const_lv5_2 + tmp_4_cast_fu_273_p1);

assign tmp_8_fu_296_p2 = r_3_shift_reg_i << ap_const_lv32_5;

assign tmp_9_fu_308_p2 = r_3_shift_reg_i << ap_const_lv32_2;

assign uncorrectedADC_fu_259_p1 = data_int[11:0];

always @ (posedge ap_clk) begin
    ap_return_0_preg[31:18] <= 14'b00000000000000;
end

endmodule //LinFil
