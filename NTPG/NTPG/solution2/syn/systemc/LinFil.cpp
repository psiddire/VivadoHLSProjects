// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.3
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "LinFil.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic LinFil::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic LinFil::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<5> LinFil::ap_ST_fsm_state1 = "1";
const sc_lv<5> LinFil::ap_ST_fsm_state2 = "10";
const sc_lv<5> LinFil::ap_ST_fsm_state3 = "100";
const sc_lv<5> LinFil::ap_ST_fsm_state4 = "1000";
const sc_lv<5> LinFil::ap_ST_fsm_state5 = "10000";
const sc_lv<32> LinFil::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> LinFil::ap_const_lv1_1 = "1";
const sc_lv<32> LinFil::ap_const_lv32_1 = "1";
const sc_lv<32> LinFil::ap_const_lv32_2 = "10";
const sc_lv<32> LinFil::ap_const_lv32_3 = "11";
const sc_lv<32> LinFil::ap_const_lv32_4 = "100";
const sc_lv<32> LinFil::ap_const_lv32_10 = "10000";
const sc_lv<32> LinFil::ap_const_lv32_17 = "10111";
const sc_lv<8> LinFil::ap_const_lv8_0 = "00000000";
const sc_lv<24> LinFil::ap_const_lv24_0 = "000000000000000000000000";
const sc_lv<32> LinFil::ap_const_lv32_C = "1100";
const sc_lv<32> LinFil::ap_const_lv32_F = "1111";
const sc_lv<5> LinFil::ap_const_lv5_2 = "10";
const sc_lv<32> LinFil::ap_const_lv32_5 = "101";
const sc_lv<32> LinFil::ap_const_lv32_6 = "110";
const sc_lv<32> LinFil::ap_const_lv32_1F = "11111";
const sc_lv<5> LinFil::ap_const_lv5_0 = "00000";
const sc_lv<3> LinFil::ap_const_lv3_0 = "000";
const sc_lv<32> LinFil::ap_const_lv32_18 = "11000";
const sc_lv<32> LinFil::ap_const_lv32_14 = "10100";
const sc_lv<32> LinFil::ap_const_lv32_1A = "11010";
const sc_lv<32> LinFil::ap_const_lv32_1C = "11100";
const sc_lv<28> LinFil::ap_const_lv28_0 = "0000000000000000000000000000";
const sc_lv<32> LinFil::ap_const_lv32_12 = "10010";
const sc_lv<32> LinFil::ap_const_lv32_1B = "11011";
const sc_lv<10> LinFil::ap_const_lv10_0 = "0000000000";
const sc_lv<18> LinFil::ap_const_lv18_3FFFF = "111111111111111111";
const sc_lv<32> LinFil::ap_const_lv32_FFFFFFDD = "11111111111111111111111111011101";
const sc_lv<1> LinFil::ap_const_lv1_0 = "0";

LinFil::LinFil(sc_module_name name) : sc_module(name), mVcdFile(0) {
    TPG_am_submul_12nbkb_U1 = new TPG_am_submul_12nbkb<1,1,12,12,8,21>("TPG_am_submul_12nbkb_U1");
    TPG_am_submul_12nbkb_U1->din0(grp_fu_566_p0);
    TPG_am_submul_12nbkb_U1->din1(grp_fu_566_p1);
    TPG_am_submul_12nbkb_U1->din2(grp_fu_566_p2);
    TPG_am_submul_12nbkb_U1->dout(grp_fu_566_p3);
    TPG_mul_mul_7s_21cud_U2 = new TPG_mul_mul_7s_21cud<1,1,7,21,32>("TPG_mul_mul_7s_21cud_U2");
    TPG_mul_mul_7s_21cud_U2->din0(pro_1_fu_574_p0);
    TPG_mul_mul_7s_21cud_U2->din1(pro_1_fu_574_p1);
    TPG_mul_mul_7s_21cud_U2->dout(pro_1_fu_574_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_acc_1_3_cast_fu_483_p2);
    sensitive << ( tmp5_fu_463_p2 );
    sensitive << ( tmp_15_fu_473_p1 );

    SC_METHOD(thread_acc_1_3_fu_477_p2);
    sensitive << ( tmp4_cast_fu_449_p1 );
    sensitive << ( tmp5_cast_fu_469_p1 );

    SC_METHOD(thread_agg_result_peakOut_w_fu_548_p2);
    sensitive << ( tmp_11_fu_536_p2 );
    sensitive << ( tmp_12_fu_542_p2 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_ap_return_0);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( o_filOut_cast_fu_532_p1 );
    sensitive << ( ap_return_0_preg );

    SC_METHOD(thread_ap_return_1);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( agg_result_peakOut_w_fu_548_p2 );
    sensitive << ( ap_return_1_preg );

    SC_METHOD(thread_base_fu_235_p1);
    sensitive << ( tmp_3_fu_227_p3 );

    SC_METHOD(thread_extLd_cast_fu_374_p1);
    sensitive << ( r_0_shift_reg_i );

    SC_METHOD(thread_extLd_fu_291_p1);
    sensitive << ( r_2_shift_reg_i );

    SC_METHOD(thread_grp_fu_566_p0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( grp_fu_566_p00 );

    SC_METHOD(thread_grp_fu_566_p00);
    sensitive << ( uncorrectedADC_fu_259_p1 );

    SC_METHOD(thread_grp_fu_566_p1);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( grp_fu_566_p10 );

    SC_METHOD(thread_grp_fu_566_p10);
    sensitive << ( base_reg_580 );

    SC_METHOD(thread_grp_fu_566_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( grp_fu_566_p20 );

    SC_METHOD(thread_grp_fu_566_p20);
    sensitive << ( mult_reg_590 );

    SC_METHOD(thread_icmp6_fu_519_p2);
    sensitive << ( tmp_19_reg_625 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_icmp_fu_221_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( tmp_4_fu_211_p4 );

    SC_METHOD(thread_linearizerOutput_fu_286_p2);
    sensitive << ( prod_reg_595 );
    sensitive << ( tmp_7_cast_fu_282_p1 );

    SC_METHOD(thread_mul_1_cast_fu_404_p1);
    sensitive << ( tmp_10_fu_394_p4 );

    SC_METHOD(thread_mul_3_cast_fu_440_p1);
    sensitive << ( tmp_14_reg_615 );

    SC_METHOD(thread_mul_4_cast_fu_378_p1);
    sensitive << ( tmp_300_reg_605 );

    SC_METHOD(thread_mul_cast_36_fu_436_p1);
    sensitive << ( tmp_13_fu_426_p4 );

    SC_METHOD(thread_mul_cast_fu_390_p1);
    sensitive << ( tmp_301_fu_381_p4 );

    SC_METHOD(thread_o_filOut_cast_fu_532_p1);
    sensitive << ( o_filOut_fu_524_p3 );

    SC_METHOD(thread_o_filOut_fu_524_p3);
    sensitive << ( tmp_18_reg_620 );
    sensitive << ( icmp6_fu_519_p2 );

    SC_METHOD(thread_p_acc_fu_497_p3);
    sensitive << ( tmp_17_fu_489_p3 );
    sensitive << ( acc_1_3_cast_fu_483_p2 );

    SC_METHOD(thread_p_neg_fu_302_p2);
    sensitive << ( tmp_8_fu_296_p2 );

    SC_METHOD(thread_p_shl2_cast_fu_416_p1);
    sensitive << ( tmp_5_fu_408_p3 );

    SC_METHOD(thread_p_shl3_cast_fu_342_p1);
    sensitive << ( p_shl3_fu_334_p3 );

    SC_METHOD(thread_p_shl3_fu_334_p3);
    sensitive << ( tmp_16_fu_330_p1 );

    SC_METHOD(thread_p_shl4_cast_fu_354_p1);
    sensitive << ( p_shl4_fu_346_p3 );

    SC_METHOD(thread_p_shl4_fu_346_p3);
    sensitive << ( tmp_16_fu_330_p1 );

    SC_METHOD(thread_pro_1_2_fu_420_p2);
    sensitive << ( p_shl2_cast_fu_416_p1 );
    sensitive << ( extLd_cast_fu_374_p1 );

    SC_METHOD(thread_pro_1_3_fu_358_p2);
    sensitive << ( p_shl3_cast_fu_342_p1 );
    sensitive << ( p_shl4_cast_fu_354_p1 );

    SC_METHOD(thread_pro_1_fu_574_p0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_pro_1_fu_574_p1);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( extLd_fu_291_p1 );

    SC_METHOD(thread_pro_fu_314_p2);
    sensitive << ( p_neg_fu_302_p2 );
    sensitive << ( tmp_9_fu_308_p2 );

    SC_METHOD(thread_r_0_peak_reg_o);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( o_filOut_fu_524_p3 );

    SC_METHOD(thread_r_0_peak_reg_o_ap_vld);
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_r_0_shift_reg_o);
    sensitive << ( linearizerOutput_reg_600 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_r_0_shift_reg_o_ap_vld);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_r_1_peak_reg_o);
    sensitive << ( r_0_peak_reg_i );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_r_1_peak_reg_o_ap_vld);
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_r_1_shift_reg_o);
    sensitive << ( r_0_shift_reg_i );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_r_1_shift_reg_o_ap_vld);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_r_2_shift_reg_o);
    sensitive << ( r_1_shift_reg_i );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_r_2_shift_reg_o_ap_vld);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_r_3_shift_reg_o);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( extLd_fu_291_p1 );

    SC_METHOD(thread_r_3_shift_reg_o_ap_vld);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_tmp4_cast_fu_449_p1);
    sensitive << ( tmp4_fu_443_p2 );

    SC_METHOD(thread_tmp4_fu_443_p2);
    sensitive << ( mul_cast_36_fu_436_p1 );
    sensitive << ( mul_1_cast_fu_404_p1 );

    SC_METHOD(thread_tmp5_cast_fu_469_p1);
    sensitive << ( tmp5_fu_463_p2 );

    SC_METHOD(thread_tmp5_fu_463_p2);
    sensitive << ( mul_4_cast_fu_378_p1 );
    sensitive << ( tmp6_cast_fu_459_p1 );

    SC_METHOD(thread_tmp6_cast_fu_459_p1);
    sensitive << ( tmp6_fu_453_p2 );

    SC_METHOD(thread_tmp6_fu_453_p2);
    sensitive << ( mul_3_cast_fu_440_p1 );
    sensitive << ( mul_cast_fu_390_p1 );

    SC_METHOD(thread_tmp_10_fu_394_p4);
    sensitive << ( r_1_shift_reg_i );

    SC_METHOD(thread_tmp_11_fu_536_p2);
    sensitive << ( r_0_peak_reg_i );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( o_filOut_fu_524_p3 );

    SC_METHOD(thread_tmp_12_fu_542_p2);
    sensitive << ( r_0_peak_reg_i );
    sensitive << ( r_1_peak_reg_i );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_tmp_13_fu_426_p4);
    sensitive << ( pro_1_2_fu_420_p2 );

    SC_METHOD(thread_tmp_15_fu_473_p1);
    sensitive << ( tmp4_fu_443_p2 );

    SC_METHOD(thread_tmp_16_fu_330_p1);
    sensitive << ( linearizerOutput_fu_286_p2 );

    SC_METHOD(thread_tmp_17_fu_489_p3);
    sensitive << ( acc_1_3_fu_477_p2 );

    SC_METHOD(thread_tmp_18_fu_505_p1);
    sensitive << ( p_acc_fu_497_p3 );

    SC_METHOD(thread_tmp_2_fu_207_p1);
    sensitive << ( lincoeff );

    SC_METHOD(thread_tmp_301_fu_381_p4);
    sensitive << ( pro_1_reg_610 );

    SC_METHOD(thread_tmp_3_fu_227_p3);
    sensitive << ( icmp_fu_221_p2 );
    sensitive << ( tmp_2_fu_207_p1 );

    SC_METHOD(thread_tmp_4_cast_fu_273_p1);
    sensitive << ( shiftlin_reg_585 );

    SC_METHOD(thread_tmp_4_fu_211_p4);
    sensitive << ( lincoeff );

    SC_METHOD(thread_tmp_5_fu_408_p3);
    sensitive << ( r_0_shift_reg_i );

    SC_METHOD(thread_tmp_7_cast_fu_282_p1);
    sensitive << ( tmp_7_fu_276_p2 );

    SC_METHOD(thread_tmp_7_fu_276_p2);
    sensitive << ( tmp_4_cast_fu_273_p1 );

    SC_METHOD(thread_tmp_8_fu_296_p2);
    sensitive << ( r_3_shift_reg_i );

    SC_METHOD(thread_tmp_9_fu_308_p2);
    sensitive << ( r_3_shift_reg_i );

    SC_METHOD(thread_uncorrectedADC_fu_259_p1);
    sensitive << ( data_int );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );

    ap_CS_fsm = "00001";
    ap_return_0_preg = "00000000000000000000000000000000";
    ap_return_1_preg = "0";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "LinFil_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, data_int, "(port)data_int");
    sc_trace(mVcdFile, lincoeff, "(port)lincoeff");
    sc_trace(mVcdFile, r_0_shift_reg_i, "(port)r_0_shift_reg_i");
    sc_trace(mVcdFile, r_0_shift_reg_o, "(port)r_0_shift_reg_o");
    sc_trace(mVcdFile, r_0_shift_reg_o_ap_vld, "(port)r_0_shift_reg_o_ap_vld");
    sc_trace(mVcdFile, r_1_shift_reg_i, "(port)r_1_shift_reg_i");
    sc_trace(mVcdFile, r_1_shift_reg_o, "(port)r_1_shift_reg_o");
    sc_trace(mVcdFile, r_1_shift_reg_o_ap_vld, "(port)r_1_shift_reg_o_ap_vld");
    sc_trace(mVcdFile, r_2_shift_reg_i, "(port)r_2_shift_reg_i");
    sc_trace(mVcdFile, r_2_shift_reg_o, "(port)r_2_shift_reg_o");
    sc_trace(mVcdFile, r_2_shift_reg_o_ap_vld, "(port)r_2_shift_reg_o_ap_vld");
    sc_trace(mVcdFile, r_3_shift_reg_i, "(port)r_3_shift_reg_i");
    sc_trace(mVcdFile, r_3_shift_reg_o, "(port)r_3_shift_reg_o");
    sc_trace(mVcdFile, r_3_shift_reg_o_ap_vld, "(port)r_3_shift_reg_o_ap_vld");
    sc_trace(mVcdFile, r_0_peak_reg_i, "(port)r_0_peak_reg_i");
    sc_trace(mVcdFile, r_0_peak_reg_o, "(port)r_0_peak_reg_o");
    sc_trace(mVcdFile, r_0_peak_reg_o_ap_vld, "(port)r_0_peak_reg_o_ap_vld");
    sc_trace(mVcdFile, r_1_peak_reg_i, "(port)r_1_peak_reg_i");
    sc_trace(mVcdFile, r_1_peak_reg_o, "(port)r_1_peak_reg_o");
    sc_trace(mVcdFile, r_1_peak_reg_o_ap_vld, "(port)r_1_peak_reg_o_ap_vld");
    sc_trace(mVcdFile, ap_return_0, "(port)ap_return_0");
    sc_trace(mVcdFile, ap_return_1, "(port)ap_return_1");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, base_fu_235_p1, "base_fu_235_p1");
    sc_trace(mVcdFile, base_reg_580, "base_reg_580");
    sc_trace(mVcdFile, shiftlin_reg_585, "shiftlin_reg_585");
    sc_trace(mVcdFile, mult_reg_590, "mult_reg_590");
    sc_trace(mVcdFile, grp_fu_566_p3, "grp_fu_566_p3");
    sc_trace(mVcdFile, prod_reg_595, "prod_reg_595");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, linearizerOutput_fu_286_p2, "linearizerOutput_fu_286_p2");
    sc_trace(mVcdFile, linearizerOutput_reg_600, "linearizerOutput_reg_600");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, tmp_300_reg_605, "tmp_300_reg_605");
    sc_trace(mVcdFile, pro_1_fu_574_p2, "pro_1_fu_574_p2");
    sc_trace(mVcdFile, pro_1_reg_610, "pro_1_reg_610");
    sc_trace(mVcdFile, tmp_14_reg_615, "tmp_14_reg_615");
    sc_trace(mVcdFile, tmp_18_fu_505_p1, "tmp_18_fu_505_p1");
    sc_trace(mVcdFile, tmp_18_reg_620, "tmp_18_reg_620");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, tmp_19_reg_625, "tmp_19_reg_625");
    sc_trace(mVcdFile, extLd_fu_291_p1, "extLd_fu_291_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, o_filOut_fu_524_p3, "o_filOut_fu_524_p3");
    sc_trace(mVcdFile, tmp_4_fu_211_p4, "tmp_4_fu_211_p4");
    sc_trace(mVcdFile, icmp_fu_221_p2, "icmp_fu_221_p2");
    sc_trace(mVcdFile, tmp_2_fu_207_p1, "tmp_2_fu_207_p1");
    sc_trace(mVcdFile, tmp_3_fu_227_p3, "tmp_3_fu_227_p3");
    sc_trace(mVcdFile, uncorrectedADC_fu_259_p1, "uncorrectedADC_fu_259_p1");
    sc_trace(mVcdFile, tmp_4_cast_fu_273_p1, "tmp_4_cast_fu_273_p1");
    sc_trace(mVcdFile, tmp_7_fu_276_p2, "tmp_7_fu_276_p2");
    sc_trace(mVcdFile, tmp_7_cast_fu_282_p1, "tmp_7_cast_fu_282_p1");
    sc_trace(mVcdFile, tmp_8_fu_296_p2, "tmp_8_fu_296_p2");
    sc_trace(mVcdFile, p_neg_fu_302_p2, "p_neg_fu_302_p2");
    sc_trace(mVcdFile, tmp_9_fu_308_p2, "tmp_9_fu_308_p2");
    sc_trace(mVcdFile, pro_fu_314_p2, "pro_fu_314_p2");
    sc_trace(mVcdFile, tmp_16_fu_330_p1, "tmp_16_fu_330_p1");
    sc_trace(mVcdFile, p_shl3_fu_334_p3, "p_shl3_fu_334_p3");
    sc_trace(mVcdFile, p_shl4_fu_346_p3, "p_shl4_fu_346_p3");
    sc_trace(mVcdFile, p_shl3_cast_fu_342_p1, "p_shl3_cast_fu_342_p1");
    sc_trace(mVcdFile, p_shl4_cast_fu_354_p1, "p_shl4_cast_fu_354_p1");
    sc_trace(mVcdFile, pro_1_3_fu_358_p2, "pro_1_3_fu_358_p2");
    sc_trace(mVcdFile, tmp_301_fu_381_p4, "tmp_301_fu_381_p4");
    sc_trace(mVcdFile, tmp_10_fu_394_p4, "tmp_10_fu_394_p4");
    sc_trace(mVcdFile, tmp_5_fu_408_p3, "tmp_5_fu_408_p3");
    sc_trace(mVcdFile, p_shl2_cast_fu_416_p1, "p_shl2_cast_fu_416_p1");
    sc_trace(mVcdFile, extLd_cast_fu_374_p1, "extLd_cast_fu_374_p1");
    sc_trace(mVcdFile, pro_1_2_fu_420_p2, "pro_1_2_fu_420_p2");
    sc_trace(mVcdFile, tmp_13_fu_426_p4, "tmp_13_fu_426_p4");
    sc_trace(mVcdFile, mul_cast_36_fu_436_p1, "mul_cast_36_fu_436_p1");
    sc_trace(mVcdFile, mul_1_cast_fu_404_p1, "mul_1_cast_fu_404_p1");
    sc_trace(mVcdFile, tmp4_fu_443_p2, "tmp4_fu_443_p2");
    sc_trace(mVcdFile, mul_3_cast_fu_440_p1, "mul_3_cast_fu_440_p1");
    sc_trace(mVcdFile, mul_cast_fu_390_p1, "mul_cast_fu_390_p1");
    sc_trace(mVcdFile, tmp6_fu_453_p2, "tmp6_fu_453_p2");
    sc_trace(mVcdFile, mul_4_cast_fu_378_p1, "mul_4_cast_fu_378_p1");
    sc_trace(mVcdFile, tmp6_cast_fu_459_p1, "tmp6_cast_fu_459_p1");
    sc_trace(mVcdFile, tmp5_fu_463_p2, "tmp5_fu_463_p2");
    sc_trace(mVcdFile, tmp4_cast_fu_449_p1, "tmp4_cast_fu_449_p1");
    sc_trace(mVcdFile, tmp5_cast_fu_469_p1, "tmp5_cast_fu_469_p1");
    sc_trace(mVcdFile, tmp_15_fu_473_p1, "tmp_15_fu_473_p1");
    sc_trace(mVcdFile, acc_1_3_fu_477_p2, "acc_1_3_fu_477_p2");
    sc_trace(mVcdFile, tmp_17_fu_489_p3, "tmp_17_fu_489_p3");
    sc_trace(mVcdFile, acc_1_3_cast_fu_483_p2, "acc_1_3_cast_fu_483_p2");
    sc_trace(mVcdFile, p_acc_fu_497_p3, "p_acc_fu_497_p3");
    sc_trace(mVcdFile, icmp6_fu_519_p2, "icmp6_fu_519_p2");
    sc_trace(mVcdFile, tmp_11_fu_536_p2, "tmp_11_fu_536_p2");
    sc_trace(mVcdFile, tmp_12_fu_542_p2, "tmp_12_fu_542_p2");
    sc_trace(mVcdFile, o_filOut_cast_fu_532_p1, "o_filOut_cast_fu_532_p1");
    sc_trace(mVcdFile, agg_result_peakOut_w_fu_548_p2, "agg_result_peakOut_w_fu_548_p2");
    sc_trace(mVcdFile, grp_fu_566_p0, "grp_fu_566_p0");
    sc_trace(mVcdFile, grp_fu_566_p1, "grp_fu_566_p1");
    sc_trace(mVcdFile, grp_fu_566_p2, "grp_fu_566_p2");
    sc_trace(mVcdFile, pro_1_fu_574_p0, "pro_1_fu_574_p0");
    sc_trace(mVcdFile, pro_1_fu_574_p1, "pro_1_fu_574_p1");
    sc_trace(mVcdFile, ap_return_0_preg, "ap_return_0_preg");
    sc_trace(mVcdFile, ap_return_1_preg, "ap_return_1_preg");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, grp_fu_566_p00, "grp_fu_566_p00");
    sc_trace(mVcdFile, grp_fu_566_p10, "grp_fu_566_p10");
    sc_trace(mVcdFile, grp_fu_566_p20, "grp_fu_566_p20");
#endif

    }
}

LinFil::~LinFil() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete TPG_am_submul_12nbkb_U1;
    delete TPG_mul_mul_7s_21cud_U2;
}

void LinFil::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_0_preg = ap_const_lv32_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state5.read()))) {
            ap_return_0_preg = o_filOut_cast_fu_532_p1.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_1_preg = ap_const_lv1_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state5.read()))) {
            ap_return_1_preg = agg_result_peakOut_w_fu_548_p2.read();
        }
    }
    if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        base_reg_580 = base_fu_235_p1.read();
        mult_reg_590 = tmp_3_fu_227_p3.read().range(23, 16);
        shiftlin_reg_585 = tmp_3_fu_227_p3.read().range(15, 12);
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read()))) {
        linearizerOutput_reg_600 = linearizerOutput_fu_286_p2.read();
        pro_1_reg_610 = pro_1_fu_574_p2.read();
        tmp_14_reg_615 = pro_1_3_fu_358_p2.read().range(24, 6);
        tmp_300_reg_605 = pro_fu_314_p2.read().range(31, 6);
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read()))) {
        prod_reg_595 = grp_fu_566_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state4.read()))) {
        tmp_18_reg_620 = tmp_18_fu_505_p1.read();
        tmp_19_reg_625 = p_acc_fu_497_p3.read().range(27, 18);
    }
}

void LinFil::thread_acc_1_3_cast_fu_483_p2() {
    acc_1_3_cast_fu_483_p2 = (!tmp5_fu_463_p2.read().is_01() || !tmp_15_fu_473_p1.read().is_01())? sc_lv<28>(): (sc_biguint<28>(tmp5_fu_463_p2.read()) + sc_bigint<28>(tmp_15_fu_473_p1.read()));
}

void LinFil::thread_acc_1_3_fu_477_p2() {
    acc_1_3_fu_477_p2 = (!tmp4_cast_fu_449_p1.read().is_01() || !tmp5_cast_fu_469_p1.read().is_01())? sc_lv<29>(): (sc_bigint<29>(tmp4_cast_fu_449_p1.read()) + sc_bigint<29>(tmp5_cast_fu_469_p1.read()));
}

void LinFil::thread_agg_result_peakOut_w_fu_548_p2() {
    agg_result_peakOut_w_fu_548_p2 = (tmp_11_fu_536_p2.read() & tmp_12_fu_542_p2.read());
}

void LinFil::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read().range(0, 0);
}

void LinFil::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read().range(1, 1);
}

void LinFil::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read().range(2, 2);
}

void LinFil::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read().range(3, 3);
}

void LinFil::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read().range(4, 4);
}

void LinFil::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1)) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state5.read())))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void LinFil::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void LinFil::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state5.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void LinFil::thread_ap_return_0() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state5.read()))) {
        ap_return_0 = o_filOut_cast_fu_532_p1.read();
    } else {
        ap_return_0 = ap_return_0_preg.read();
    }
}

void LinFil::thread_ap_return_1() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state5.read()))) {
        ap_return_1 = agg_result_peakOut_w_fu_548_p2.read();
    } else {
        ap_return_1 = ap_return_1_preg.read();
    }
}

void LinFil::thread_base_fu_235_p1() {
    base_fu_235_p1 = tmp_3_fu_227_p3.read().range(12-1, 0);
}

void LinFil::thread_extLd_cast_fu_374_p1() {
    extLd_cast_fu_374_p1 = esl_sext<27,21>(r_0_shift_reg_i.read());
}

void LinFil::thread_extLd_fu_291_p1() {
    extLd_fu_291_p1 = esl_sext<32,21>(r_2_shift_reg_i.read());
}

void LinFil::thread_grp_fu_566_p0() {
    grp_fu_566_p0 =  (sc_lv<12>) (grp_fu_566_p00.read());
}

void LinFil::thread_grp_fu_566_p00() {
    grp_fu_566_p00 = esl_zext<13,12>(uncorrectedADC_fu_259_p1.read());
}

void LinFil::thread_grp_fu_566_p1() {
    grp_fu_566_p1 =  (sc_lv<12>) (grp_fu_566_p10.read());
}

void LinFil::thread_grp_fu_566_p10() {
    grp_fu_566_p10 = esl_zext<13,12>(base_reg_580.read());
}

void LinFil::thread_grp_fu_566_p2() {
    grp_fu_566_p2 =  (sc_lv<8>) (grp_fu_566_p20.read());
}

void LinFil::thread_grp_fu_566_p20() {
    grp_fu_566_p20 = esl_zext<21,8>(mult_reg_590.read());
}

void LinFil::thread_icmp6_fu_519_p2() {
    icmp6_fu_519_p2 = (!tmp_19_reg_625.read().is_01() || !ap_const_lv10_0.is_01())? sc_lv<1>(): sc_lv<1>(tmp_19_reg_625.read() != ap_const_lv10_0);
}

void LinFil::thread_icmp_fu_221_p2() {
    icmp_fu_221_p2 = (!tmp_4_fu_211_p4.read().is_01() || !ap_const_lv8_0.is_01())? sc_lv<1>(): sc_lv<1>(tmp_4_fu_211_p4.read() == ap_const_lv8_0);
}

void LinFil::thread_linearizerOutput_fu_286_p2() {
    linearizerOutput_fu_286_p2 = (!prod_reg_595.read().is_01() || !tmp_7_cast_fu_282_p1.read().is_01())? sc_lv<21>(): sc_bigint<21>(prod_reg_595.read()) >> (unsigned short)tmp_7_cast_fu_282_p1.read().to_uint();
}

void LinFil::thread_mul_1_cast_fu_404_p1() {
    mul_1_cast_fu_404_p1 = esl_sext<27,19>(tmp_10_fu_394_p4.read());
}

void LinFil::thread_mul_3_cast_fu_440_p1() {
    mul_3_cast_fu_440_p1 = esl_sext<27,19>(tmp_14_reg_615.read());
}

void LinFil::thread_mul_4_cast_fu_378_p1() {
    mul_4_cast_fu_378_p1 = esl_sext<28,26>(tmp_300_reg_605.read());
}

void LinFil::thread_mul_cast_36_fu_436_p1() {
    mul_cast_36_fu_436_p1 = esl_sext<27,21>(tmp_13_fu_426_p4.read());
}

void LinFil::thread_mul_cast_fu_390_p1() {
    mul_cast_fu_390_p1 = esl_sext<27,26>(tmp_301_fu_381_p4.read());
}

void LinFil::thread_o_filOut_cast_fu_532_p1() {
    o_filOut_cast_fu_532_p1 = esl_zext<32,18>(o_filOut_fu_524_p3.read());
}

void LinFil::thread_o_filOut_fu_524_p3() {
    o_filOut_fu_524_p3 = (!icmp6_fu_519_p2.read()[0].is_01())? sc_lv<18>(): ((icmp6_fu_519_p2.read()[0].to_bool())? ap_const_lv18_3FFFF: tmp_18_reg_620.read());
}

void LinFil::thread_p_acc_fu_497_p3() {
    p_acc_fu_497_p3 = (!tmp_17_fu_489_p3.read()[0].is_01())? sc_lv<28>(): ((tmp_17_fu_489_p3.read()[0].to_bool())? ap_const_lv28_0: acc_1_3_cast_fu_483_p2.read());
}

void LinFil::thread_p_neg_fu_302_p2() {
    p_neg_fu_302_p2 = (!ap_const_lv32_0.is_01() || !tmp_8_fu_296_p2.read().is_01())? sc_lv<32>(): (sc_biguint<32>(ap_const_lv32_0) - sc_biguint<32>(tmp_8_fu_296_p2.read()));
}

void LinFil::thread_p_shl2_cast_fu_416_p1() {
    p_shl2_cast_fu_416_p1 = esl_sext<27,26>(tmp_5_fu_408_p3.read());
}

void LinFil::thread_p_shl3_cast_fu_342_p1() {
    p_shl3_cast_fu_342_p1 = esl_sext<25,24>(p_shl3_fu_334_p3.read());
}

void LinFil::thread_p_shl3_fu_334_p3() {
    p_shl3_fu_334_p3 = esl_concat<19,5>(tmp_16_fu_330_p1.read(), ap_const_lv5_0);
}

void LinFil::thread_p_shl4_cast_fu_354_p1() {
    p_shl4_cast_fu_354_p1 = esl_sext<25,22>(p_shl4_fu_346_p3.read());
}

void LinFil::thread_p_shl4_fu_346_p3() {
    p_shl4_fu_346_p3 = esl_concat<19,3>(tmp_16_fu_330_p1.read(), ap_const_lv3_0);
}

void LinFil::thread_pro_1_2_fu_420_p2() {
    pro_1_2_fu_420_p2 = (!p_shl2_cast_fu_416_p1.read().is_01() || !extLd_cast_fu_374_p1.read().is_01())? sc_lv<27>(): (sc_bigint<27>(p_shl2_cast_fu_416_p1.read()) - sc_bigint<27>(extLd_cast_fu_374_p1.read()));
}

void LinFil::thread_pro_1_3_fu_358_p2() {
    pro_1_3_fu_358_p2 = (!p_shl3_cast_fu_342_p1.read().is_01() || !p_shl4_cast_fu_354_p1.read().is_01())? sc_lv<25>(): (sc_bigint<25>(p_shl3_cast_fu_342_p1.read()) - sc_bigint<25>(p_shl4_cast_fu_354_p1.read()));
}

void LinFil::thread_pro_1_fu_574_p0() {
    pro_1_fu_574_p0 =  (sc_lv<7>) (ap_const_lv32_FFFFFFDD);
}

void LinFil::thread_pro_1_fu_574_p1() {
    pro_1_fu_574_p1 =  (sc_lv<21>) (extLd_fu_291_p1.read());
}

void LinFil::thread_pro_fu_314_p2() {
    pro_fu_314_p2 = (!p_neg_fu_302_p2.read().is_01() || !tmp_9_fu_308_p2.read().is_01())? sc_lv<32>(): (sc_biguint<32>(p_neg_fu_302_p2.read()) - sc_biguint<32>(tmp_9_fu_308_p2.read()));
}

void LinFil::thread_r_0_peak_reg_o() {
    r_0_peak_reg_o = o_filOut_fu_524_p3.read();
}

void LinFil::thread_r_0_peak_reg_o_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state5.read()))) {
        r_0_peak_reg_o_ap_vld = ap_const_logic_1;
    } else {
        r_0_peak_reg_o_ap_vld = ap_const_logic_0;
    }
}

void LinFil::thread_r_0_shift_reg_o() {
    r_0_shift_reg_o = linearizerOutput_reg_600.read();
}

void LinFil::thread_r_0_shift_reg_o_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state4.read()))) {
        r_0_shift_reg_o_ap_vld = ap_const_logic_1;
    } else {
        r_0_shift_reg_o_ap_vld = ap_const_logic_0;
    }
}

void LinFil::thread_r_1_peak_reg_o() {
    r_1_peak_reg_o = r_0_peak_reg_i.read();
}

void LinFil::thread_r_1_peak_reg_o_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state5.read()))) {
        r_1_peak_reg_o_ap_vld = ap_const_logic_1;
    } else {
        r_1_peak_reg_o_ap_vld = ap_const_logic_0;
    }
}

void LinFil::thread_r_1_shift_reg_o() {
    r_1_shift_reg_o = r_0_shift_reg_i.read();
}

void LinFil::thread_r_1_shift_reg_o_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state4.read()))) {
        r_1_shift_reg_o_ap_vld = ap_const_logic_1;
    } else {
        r_1_shift_reg_o_ap_vld = ap_const_logic_0;
    }
}

void LinFil::thread_r_2_shift_reg_o() {
    r_2_shift_reg_o = r_1_shift_reg_i.read();
}

void LinFil::thread_r_2_shift_reg_o_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state4.read()))) {
        r_2_shift_reg_o_ap_vld = ap_const_logic_1;
    } else {
        r_2_shift_reg_o_ap_vld = ap_const_logic_0;
    }
}

void LinFil::thread_r_3_shift_reg_o() {
    r_3_shift_reg_o = extLd_fu_291_p1.read();
}

void LinFil::thread_r_3_shift_reg_o_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read()))) {
        r_3_shift_reg_o_ap_vld = ap_const_logic_1;
    } else {
        r_3_shift_reg_o_ap_vld = ap_const_logic_0;
    }
}

void LinFil::thread_tmp4_cast_fu_449_p1() {
    tmp4_cast_fu_449_p1 = esl_sext<29,27>(tmp4_fu_443_p2.read());
}

void LinFil::thread_tmp4_fu_443_p2() {
    tmp4_fu_443_p2 = (!mul_cast_36_fu_436_p1.read().is_01() || !mul_1_cast_fu_404_p1.read().is_01())? sc_lv<27>(): (sc_bigint<27>(mul_cast_36_fu_436_p1.read()) + sc_bigint<27>(mul_1_cast_fu_404_p1.read()));
}

void LinFil::thread_tmp5_cast_fu_469_p1() {
    tmp5_cast_fu_469_p1 = esl_sext<29,28>(tmp5_fu_463_p2.read());
}

void LinFil::thread_tmp5_fu_463_p2() {
    tmp5_fu_463_p2 = (!mul_4_cast_fu_378_p1.read().is_01() || !tmp6_cast_fu_459_p1.read().is_01())? sc_lv<28>(): (sc_bigint<28>(mul_4_cast_fu_378_p1.read()) + sc_bigint<28>(tmp6_cast_fu_459_p1.read()));
}

void LinFil::thread_tmp6_cast_fu_459_p1() {
    tmp6_cast_fu_459_p1 = esl_sext<28,27>(tmp6_fu_453_p2.read());
}

void LinFil::thread_tmp6_fu_453_p2() {
    tmp6_fu_453_p2 = (!mul_3_cast_fu_440_p1.read().is_01() || !mul_cast_fu_390_p1.read().is_01())? sc_lv<27>(): (sc_bigint<27>(mul_3_cast_fu_440_p1.read()) + sc_bigint<27>(mul_cast_fu_390_p1.read()));
}

void LinFil::thread_tmp_10_fu_394_p4() {
    tmp_10_fu_394_p4 = r_1_shift_reg_i.read().range(20, 2);
}

void LinFil::thread_tmp_11_fu_536_p2() {
    tmp_11_fu_536_p2 = (!r_0_peak_reg_i.read().is_01() || !o_filOut_fu_524_p3.read().is_01())? sc_lv<1>(): (sc_biguint<18>(r_0_peak_reg_i.read()) > sc_biguint<18>(o_filOut_fu_524_p3.read()));
}

void LinFil::thread_tmp_12_fu_542_p2() {
    tmp_12_fu_542_p2 = (!r_0_peak_reg_i.read().is_01() || !r_1_peak_reg_i.read().is_01())? sc_lv<1>(): (sc_biguint<18>(r_0_peak_reg_i.read()) > sc_biguint<18>(r_1_peak_reg_i.read()));
}

void LinFil::thread_tmp_13_fu_426_p4() {
    tmp_13_fu_426_p4 = pro_1_2_fu_420_p2.read().range(26, 6);
}

void LinFil::thread_tmp_15_fu_473_p1() {
    tmp_15_fu_473_p1 = esl_sext<28,27>(tmp4_fu_443_p2.read());
}

void LinFil::thread_tmp_16_fu_330_p1() {
    tmp_16_fu_330_p1 = linearizerOutput_fu_286_p2.read().range(19-1, 0);
}

void LinFil::thread_tmp_17_fu_489_p3() {
    tmp_17_fu_489_p3 = acc_1_3_fu_477_p2.read().range(28, 28);
}

void LinFil::thread_tmp_18_fu_505_p1() {
    tmp_18_fu_505_p1 = p_acc_fu_497_p3.read().range(18-1, 0);
}

void LinFil::thread_tmp_2_fu_207_p1() {
    tmp_2_fu_207_p1 = lincoeff.read().range(24-1, 0);
}

void LinFil::thread_tmp_301_fu_381_p4() {
    tmp_301_fu_381_p4 = pro_1_reg_610.read().range(31, 6);
}

void LinFil::thread_tmp_3_fu_227_p3() {
    tmp_3_fu_227_p3 = (!icmp_fu_221_p2.read()[0].is_01())? sc_lv<24>(): ((icmp_fu_221_p2.read()[0].to_bool())? ap_const_lv24_0: tmp_2_fu_207_p1.read());
}

void LinFil::thread_tmp_4_cast_fu_273_p1() {
    tmp_4_cast_fu_273_p1 = esl_zext<5,4>(shiftlin_reg_585.read());
}

void LinFil::thread_tmp_4_fu_211_p4() {
    tmp_4_fu_211_p4 = lincoeff.read().range(23, 16);
}

void LinFil::thread_tmp_5_fu_408_p3() {
    tmp_5_fu_408_p3 = esl_concat<21,5>(r_0_shift_reg_i.read(), ap_const_lv5_0);
}

void LinFil::thread_tmp_7_cast_fu_282_p1() {
    tmp_7_cast_fu_282_p1 = esl_zext<21,5>(tmp_7_fu_276_p2.read());
}

void LinFil::thread_tmp_7_fu_276_p2() {
    tmp_7_fu_276_p2 = (!ap_const_lv5_2.is_01() || !tmp_4_cast_fu_273_p1.read().is_01())? sc_lv<5>(): (sc_biguint<5>(ap_const_lv5_2) + sc_biguint<5>(tmp_4_cast_fu_273_p1.read()));
}

void LinFil::thread_tmp_8_fu_296_p2() {
    tmp_8_fu_296_p2 = (!ap_const_lv32_5.is_01())? sc_lv<32>(): r_3_shift_reg_i.read() << (unsigned short)ap_const_lv32_5.to_uint();
}

void LinFil::thread_tmp_9_fu_308_p2() {
    tmp_9_fu_308_p2 = (!ap_const_lv32_2.is_01())? sc_lv<32>(): r_3_shift_reg_i.read() << (unsigned short)ap_const_lv32_2.to_uint();
}

void LinFil::thread_uncorrectedADC_fu_259_p1() {
    uncorrectedADC_fu_259_p1 = data_int.read().range(12-1, 0);
}

void LinFil::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if (!esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm = "XXXXX";
            break;
    }
}

}

