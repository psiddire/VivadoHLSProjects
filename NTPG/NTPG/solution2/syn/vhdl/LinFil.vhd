-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.3
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity LinFil is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    data_int : IN STD_LOGIC_VECTOR (15 downto 0);
    lincoeff : IN STD_LOGIC_VECTOR (31 downto 0);
    r_0_shift_reg_i : IN STD_LOGIC_VECTOR (20 downto 0);
    r_0_shift_reg_o : OUT STD_LOGIC_VECTOR (20 downto 0);
    r_0_shift_reg_o_ap_vld : OUT STD_LOGIC;
    r_1_shift_reg_i : IN STD_LOGIC_VECTOR (20 downto 0);
    r_1_shift_reg_o : OUT STD_LOGIC_VECTOR (20 downto 0);
    r_1_shift_reg_o_ap_vld : OUT STD_LOGIC;
    r_2_shift_reg_i : IN STD_LOGIC_VECTOR (20 downto 0);
    r_2_shift_reg_o : OUT STD_LOGIC_VECTOR (20 downto 0);
    r_2_shift_reg_o_ap_vld : OUT STD_LOGIC;
    r_3_shift_reg_i : IN STD_LOGIC_VECTOR (31 downto 0);
    r_3_shift_reg_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    r_3_shift_reg_o_ap_vld : OUT STD_LOGIC;
    r_0_peak_reg_i : IN STD_LOGIC_VECTOR (17 downto 0);
    r_0_peak_reg_o : OUT STD_LOGIC_VECTOR (17 downto 0);
    r_0_peak_reg_o_ap_vld : OUT STD_LOGIC;
    r_1_peak_reg_i : IN STD_LOGIC_VECTOR (17 downto 0);
    r_1_peak_reg_o : OUT STD_LOGIC_VECTOR (17 downto 0);
    r_1_peak_reg_o_ap_vld : OUT STD_LOGIC;
    ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of LinFil is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv28_0 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv18_3FFFF : STD_LOGIC_VECTOR (17 downto 0) := "111111111111111111";
    constant ap_const_lv32_FFFFFFDD : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111011101";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal base_fu_235_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal base_reg_580 : STD_LOGIC_VECTOR (11 downto 0);
    signal shiftlin_reg_585 : STD_LOGIC_VECTOR (3 downto 0);
    signal mult_reg_590 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_566_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal prod_reg_595 : STD_LOGIC_VECTOR (20 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal linearizerOutput_fu_286_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal linearizerOutput_reg_600 : STD_LOGIC_VECTOR (20 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_300_reg_605 : STD_LOGIC_VECTOR (25 downto 0);
    signal pro_1_fu_574_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal pro_1_reg_610 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_reg_615 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_18_fu_505_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_18_reg_620 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_19_reg_625 : STD_LOGIC_VECTOR (9 downto 0);
    signal extLd_fu_291_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal o_filOut_fu_524_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_4_fu_211_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_fu_221_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_207_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_3_fu_227_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal uncorrectedADC_fu_259_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_4_cast_fu_273_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_7_fu_276_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_7_cast_fu_282_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_8_fu_296_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_neg_fu_302_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_308_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal pro_fu_314_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_fu_330_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_shl3_fu_334_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_shl4_fu_346_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal p_shl3_cast_fu_342_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal p_shl4_cast_fu_354_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal pro_1_3_fu_358_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_301_fu_381_p4 : STD_LOGIC_VECTOR (25 downto 0);
    signal tmp_10_fu_394_p4 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_5_fu_408_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal p_shl2_cast_fu_416_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal extLd_cast_fu_374_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal pro_1_2_fu_420_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_13_fu_426_p4 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_cast_36_fu_436_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal mul_1_cast_fu_404_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp4_fu_443_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal mul_3_cast_fu_440_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal mul_cast_fu_390_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp6_fu_453_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal mul_4_cast_fu_378_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp6_cast_fu_459_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp5_fu_463_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp4_cast_fu_449_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp5_cast_fu_469_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_15_fu_473_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal acc_1_3_fu_477_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_17_fu_489_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal acc_1_3_cast_fu_483_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal p_acc_fu_497_p3 : STD_LOGIC_VECTOR (27 downto 0);
    signal icmp6_fu_519_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_fu_536_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_fu_542_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal o_filOut_cast_fu_532_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal agg_result_peakOut_w_fu_548_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_566_p0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_566_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_566_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal pro_1_fu_574_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal pro_1_fu_574_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal ap_return_0_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_1_preg : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_566_p00 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_566_p10 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_566_p20 : STD_LOGIC_VECTOR (20 downto 0);

    component TPG_am_submul_12nbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (11 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (20 downto 0) );
    end component;


    component TPG_mul_mul_7s_21cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (6 downto 0);
        din1 : IN STD_LOGIC_VECTOR (20 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    TPG_am_submul_12nbkb_U1 : component TPG_am_submul_12nbkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 12,
        din1_WIDTH => 12,
        din2_WIDTH => 8,
        dout_WIDTH => 21)
    port map (
        din0 => grp_fu_566_p0,
        din1 => grp_fu_566_p1,
        din2 => grp_fu_566_p2,
        dout => grp_fu_566_p3);

    TPG_mul_mul_7s_21cud_U2 : component TPG_mul_mul_7s_21cud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 7,
        din1_WIDTH => 21,
        dout_WIDTH => 32)
    port map (
        din0 => pro_1_fu_574_p0,
        din1 => pro_1_fu_574_p1,
        dout => pro_1_fu_574_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_0_preg(0) <= '0';
                ap_return_0_preg(1) <= '0';
                ap_return_0_preg(2) <= '0';
                ap_return_0_preg(3) <= '0';
                ap_return_0_preg(4) <= '0';
                ap_return_0_preg(5) <= '0';
                ap_return_0_preg(6) <= '0';
                ap_return_0_preg(7) <= '0';
                ap_return_0_preg(8) <= '0';
                ap_return_0_preg(9) <= '0';
                ap_return_0_preg(10) <= '0';
                ap_return_0_preg(11) <= '0';
                ap_return_0_preg(12) <= '0';
                ap_return_0_preg(13) <= '0';
                ap_return_0_preg(14) <= '0';
                ap_return_0_preg(15) <= '0';
                ap_return_0_preg(16) <= '0';
                ap_return_0_preg(17) <= '0';
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_state5))) then 
                                        ap_return_0_preg(17 downto 0) <= o_filOut_cast_fu_532_p1(17 downto 0);
                end if; 
            end if;
        end if;
    end process;


    ap_return_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_1_preg <= ap_const_lv1_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_state5))) then 
                    ap_return_1_preg <= agg_result_peakOut_w_fu_548_p2;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then
                base_reg_580 <= base_fu_235_p1;
                mult_reg_590 <= tmp_3_fu_227_p3(23 downto 16);
                shiftlin_reg_585 <= tmp_3_fu_227_p3(15 downto 12);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state3))) then
                linearizerOutput_reg_600 <= linearizerOutput_fu_286_p2;
                pro_1_reg_610 <= pro_1_fu_574_p2;
                tmp_14_reg_615 <= pro_1_3_fu_358_p2(24 downto 6);
                tmp_300_reg_605 <= pro_fu_314_p2(31 downto 6);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state2))) then
                prod_reg_595 <= grp_fu_566_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then
                tmp_18_reg_620 <= tmp_18_fu_505_p1;
                tmp_19_reg_625 <= p_acc_fu_497_p3(27 downto 18);
            end if;
        end if;
    end process;
    ap_return_0_preg(31 downto 18) <= "00000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    acc_1_3_cast_fu_483_p2 <= std_logic_vector(unsigned(tmp5_fu_463_p2) + unsigned(tmp_15_fu_473_p1));
    acc_1_3_fu_477_p2 <= std_logic_vector(signed(tmp4_cast_fu_449_p1) + signed(tmp5_cast_fu_469_p1));
    agg_result_peakOut_w_fu_548_p2 <= (tmp_11_fu_536_p2 and tmp_12_fu_542_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0 downto 0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1 downto 1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2 downto 2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3 downto 3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4 downto 4);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state5)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1)) or ((ap_const_lv1_1 = ap_CS_fsm_state5)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state5))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_0_assign_proc : process(ap_CS_fsm_state5, o_filOut_cast_fu_532_p1, ap_return_0_preg)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state5))) then 
            ap_return_0 <= o_filOut_cast_fu_532_p1;
        else 
            ap_return_0 <= ap_return_0_preg;
        end if; 
    end process;


    ap_return_1_assign_proc : process(ap_CS_fsm_state5, agg_result_peakOut_w_fu_548_p2, ap_return_1_preg)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state5))) then 
            ap_return_1 <= agg_result_peakOut_w_fu_548_p2;
        else 
            ap_return_1 <= ap_return_1_preg;
        end if; 
    end process;

    base_fu_235_p1 <= tmp_3_fu_227_p3(12 - 1 downto 0);
        extLd_cast_fu_374_p1 <= std_logic_vector(resize(signed(r_0_shift_reg_i),27));

        extLd_fu_291_p1 <= std_logic_vector(resize(signed(r_2_shift_reg_i),32));

    grp_fu_566_p0 <= grp_fu_566_p00(12 - 1 downto 0);
    grp_fu_566_p00 <= std_logic_vector(resize(unsigned(uncorrectedADC_fu_259_p1),13));
    grp_fu_566_p1 <= grp_fu_566_p10(12 - 1 downto 0);
    grp_fu_566_p10 <= std_logic_vector(resize(unsigned(base_reg_580),13));
    grp_fu_566_p2 <= grp_fu_566_p20(8 - 1 downto 0);
    grp_fu_566_p20 <= std_logic_vector(resize(unsigned(mult_reg_590),21));
    icmp6_fu_519_p2 <= "0" when (tmp_19_reg_625 = ap_const_lv10_0) else "1";
    icmp_fu_221_p2 <= "1" when (tmp_4_fu_211_p4 = ap_const_lv8_0) else "0";
    linearizerOutput_fu_286_p2 <= std_logic_vector(shift_right(signed(prod_reg_595),to_integer(unsigned('0' & tmp_7_cast_fu_282_p1(21-1 downto 0)))));
        mul_1_cast_fu_404_p1 <= std_logic_vector(resize(signed(tmp_10_fu_394_p4),27));

        mul_3_cast_fu_440_p1 <= std_logic_vector(resize(signed(tmp_14_reg_615),27));

        mul_4_cast_fu_378_p1 <= std_logic_vector(resize(signed(tmp_300_reg_605),28));

        mul_cast_36_fu_436_p1 <= std_logic_vector(resize(signed(tmp_13_fu_426_p4),27));

        mul_cast_fu_390_p1 <= std_logic_vector(resize(signed(tmp_301_fu_381_p4),27));

    o_filOut_cast_fu_532_p1 <= std_logic_vector(resize(unsigned(o_filOut_fu_524_p3),32));
    o_filOut_fu_524_p3 <= 
        ap_const_lv18_3FFFF when (icmp6_fu_519_p2(0) = '1') else 
        tmp_18_reg_620;
    p_acc_fu_497_p3 <= 
        ap_const_lv28_0 when (tmp_17_fu_489_p3(0) = '1') else 
        acc_1_3_cast_fu_483_p2;
    p_neg_fu_302_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(tmp_8_fu_296_p2));
        p_shl2_cast_fu_416_p1 <= std_logic_vector(resize(signed(tmp_5_fu_408_p3),27));

        p_shl3_cast_fu_342_p1 <= std_logic_vector(resize(signed(p_shl3_fu_334_p3),25));

    p_shl3_fu_334_p3 <= (tmp_16_fu_330_p1 & ap_const_lv5_0);
        p_shl4_cast_fu_354_p1 <= std_logic_vector(resize(signed(p_shl4_fu_346_p3),25));

    p_shl4_fu_346_p3 <= (tmp_16_fu_330_p1 & ap_const_lv3_0);
    pro_1_2_fu_420_p2 <= std_logic_vector(signed(p_shl2_cast_fu_416_p1) - signed(extLd_cast_fu_374_p1));
    pro_1_3_fu_358_p2 <= std_logic_vector(signed(p_shl3_cast_fu_342_p1) - signed(p_shl4_cast_fu_354_p1));
    pro_1_fu_574_p0 <= ap_const_lv32_FFFFFFDD(7 - 1 downto 0);
    pro_1_fu_574_p1 <= extLd_fu_291_p1(21 - 1 downto 0);
    pro_fu_314_p2 <= std_logic_vector(unsigned(p_neg_fu_302_p2) - unsigned(tmp_9_fu_308_p2));
    r_0_peak_reg_o <= o_filOut_fu_524_p3;

    r_0_peak_reg_o_ap_vld_assign_proc : process(ap_CS_fsm_state5)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state5))) then 
            r_0_peak_reg_o_ap_vld <= ap_const_logic_1;
        else 
            r_0_peak_reg_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    r_0_shift_reg_o <= linearizerOutput_reg_600;

    r_0_shift_reg_o_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            r_0_shift_reg_o_ap_vld <= ap_const_logic_1;
        else 
            r_0_shift_reg_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    r_1_peak_reg_o <= r_0_peak_reg_i;

    r_1_peak_reg_o_ap_vld_assign_proc : process(ap_CS_fsm_state5)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state5))) then 
            r_1_peak_reg_o_ap_vld <= ap_const_logic_1;
        else 
            r_1_peak_reg_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    r_1_shift_reg_o <= r_0_shift_reg_i;

    r_1_shift_reg_o_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            r_1_shift_reg_o_ap_vld <= ap_const_logic_1;
        else 
            r_1_shift_reg_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    r_2_shift_reg_o <= r_1_shift_reg_i;

    r_2_shift_reg_o_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            r_2_shift_reg_o_ap_vld <= ap_const_logic_1;
        else 
            r_2_shift_reg_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    r_3_shift_reg_o <= extLd_fu_291_p1;

    r_3_shift_reg_o_ap_vld_assign_proc : process(ap_CS_fsm_state3)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state3))) then 
            r_3_shift_reg_o_ap_vld <= ap_const_logic_1;
        else 
            r_3_shift_reg_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

        tmp4_cast_fu_449_p1 <= std_logic_vector(resize(signed(tmp4_fu_443_p2),29));

    tmp4_fu_443_p2 <= std_logic_vector(signed(mul_cast_36_fu_436_p1) + signed(mul_1_cast_fu_404_p1));
        tmp5_cast_fu_469_p1 <= std_logic_vector(resize(signed(tmp5_fu_463_p2),29));

    tmp5_fu_463_p2 <= std_logic_vector(signed(mul_4_cast_fu_378_p1) + signed(tmp6_cast_fu_459_p1));
        tmp6_cast_fu_459_p1 <= std_logic_vector(resize(signed(tmp6_fu_453_p2),28));

    tmp6_fu_453_p2 <= std_logic_vector(signed(mul_3_cast_fu_440_p1) + signed(mul_cast_fu_390_p1));
    tmp_10_fu_394_p4 <= r_1_shift_reg_i(20 downto 2);
    tmp_11_fu_536_p2 <= "1" when (unsigned(r_0_peak_reg_i) > unsigned(o_filOut_fu_524_p3)) else "0";
    tmp_12_fu_542_p2 <= "1" when (unsigned(r_0_peak_reg_i) > unsigned(r_1_peak_reg_i)) else "0";
    tmp_13_fu_426_p4 <= pro_1_2_fu_420_p2(26 downto 6);
        tmp_15_fu_473_p1 <= std_logic_vector(resize(signed(tmp4_fu_443_p2),28));

    tmp_16_fu_330_p1 <= linearizerOutput_fu_286_p2(19 - 1 downto 0);
    tmp_17_fu_489_p3 <= acc_1_3_fu_477_p2(28 downto 28);
    tmp_18_fu_505_p1 <= p_acc_fu_497_p3(18 - 1 downto 0);
    tmp_2_fu_207_p1 <= lincoeff(24 - 1 downto 0);
    tmp_301_fu_381_p4 <= pro_1_reg_610(31 downto 6);
    tmp_3_fu_227_p3 <= 
        ap_const_lv24_0 when (icmp_fu_221_p2(0) = '1') else 
        tmp_2_fu_207_p1;
    tmp_4_cast_fu_273_p1 <= std_logic_vector(resize(unsigned(shiftlin_reg_585),5));
    tmp_4_fu_211_p4 <= lincoeff(23 downto 16);
    tmp_5_fu_408_p3 <= (r_0_shift_reg_i & ap_const_lv5_0);
    tmp_7_cast_fu_282_p1 <= std_logic_vector(resize(unsigned(tmp_7_fu_276_p2),21));
    tmp_7_fu_276_p2 <= std_logic_vector(unsigned(ap_const_lv5_2) + unsigned(tmp_4_cast_fu_273_p1));
    tmp_8_fu_296_p2 <= std_logic_vector(shift_left(unsigned(r_3_shift_reg_i),to_integer(unsigned('0' & ap_const_lv32_5(31-1 downto 0)))));
    tmp_9_fu_308_p2 <= std_logic_vector(shift_left(unsigned(r_3_shift_reg_i),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    uncorrectedADC_fu_259_p1 <= data_int(12 - 1 downto 0);
end behav;
