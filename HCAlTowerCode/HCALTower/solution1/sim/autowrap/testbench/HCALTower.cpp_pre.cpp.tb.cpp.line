#pragma line 1 "/afs/cern.ch/user/p/psiddire/CMSSW_10_2_2/src/VivadoHLSProjects/HCAlTowerCode/HCALTower.cpp"
#pragma line 1 "<built-in>"
#pragma line 1 "<command-line>"
#pragma line 1 "/afs/cern.ch/user/p/psiddire/CMSSW_10_2_2/src/VivadoHLSProjects/HCAlTowerCode/HCALTower.cpp"
#pragma line 1 "/afs/cern.ch/user/p/psiddire/CMSSW_10_2_2/src/VivadoHLSProjects/HCAlTowerCode/HCALTower.h" 1
#pragma line 1 "/usr/include/stdio.h" 1 3 4
#pragma line 28 "/usr/include/stdio.h" 3 4
#pragma line 1 "/home/sw_dir/Xilinx/Vivado_HLS/2016.4/lnx64/tools/gcc/bin/../lib/gcc/x86_64-unknown-linux-gnu/4.6.3/include-fixed/features.h" 1 3 4
#pragma line 339 "/home/sw_dir/Xilinx/Vivado_HLS/2016.4/lnx64/tools/gcc/bin/../lib/gcc/x86_64-unknown-linux-gnu/4.6.3/include-fixed/features.h" 3 4
#pragma line 1 "/usr/include/sys/cdefs.h" 1 3 4
#pragma line 373 "/usr/include/sys/cdefs.h" 3 4
#pragma line 1 "/usr/include/bits/wordsize.h" 1 3 4
#pragma line 374 "/usr/include/sys/cdefs.h" 2 3 4
#pragma line 340 "/home/sw_dir/Xilinx/Vivado_HLS/2016.4/lnx64/tools/gcc/bin/../lib/gcc/x86_64-unknown-linux-gnu/4.6.3/include-fixed/features.h" 2 3 4
#pragma line 362 "/home/sw_dir/Xilinx/Vivado_HLS/2016.4/lnx64/tools/gcc/bin/../lib/gcc/x86_64-unknown-linux-gnu/4.6.3/include-fixed/features.h" 3 4
#pragma line 1 "/usr/include/gnu/stubs.h" 1 3 4
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma line 1 "/usr/include/bits/wordsize.h" 1 3 4
#pragma line 5 "/usr/include/gnu/stubs.h" 2 3 4
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma line 1 "/usr/include/gnu/stubs-64.h" 1 3 4
#pragma line 10 "/usr/include/gnu/stubs.h" 2 3 4
#pragma line 363 "/home/sw_dir/Xilinx/Vivado_HLS/2016.4/lnx64/tools/gcc/bin/../lib/gcc/x86_64-unknown-linux-gnu/4.6.3/include-fixed/features.h" 2 3 4
#pragma line 29 "/usr/include/stdio.h" 2 3 4
#pragma empty_line
extern "C" {
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma line 1 "/home/sw_dir/Xilinx/Vivado_HLS/2016.4/lnx64/tools/gcc/bin/../lib/gcc/x86_64-unknown-linux-gnu/4.6.3/include/stddef.h" 1 3 4
#pragma line 212 "/home/sw_dir/Xilinx/Vivado_HLS/2016.4/lnx64/tools/gcc/bin/../lib/gcc/x86_64-unknown-linux-gnu/4.6.3/include/stddef.h" 3 4
typedef long unsigned int size_t;
#pragma line 35 "/usr/include/stdio.h" 2 3 4
#pragma empty_line
#pragma line 1 "/usr/include/bits/types.h" 1 3 4
#pragma line 28 "/usr/include/bits/types.h" 3 4
#pragma line 1 "/usr/include/bits/wordsize.h" 1 3 4
#pragma line 29 "/usr/include/bits/types.h" 2 3 4
#pragma empty_line
#pragma empty_line
typedef unsigned char __u_char;
typedef unsigned short int __u_short;
typedef unsigned int __u_int;
typedef unsigned long int __u_long;
#pragma empty_line
#pragma empty_line
typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef signed short int __int16_t;
typedef unsigned short int __uint16_t;
typedef signed int __int32_t;
typedef unsigned int __uint32_t;
#pragma empty_line
typedef signed long int __int64_t;
typedef unsigned long int __uint64_t;
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
typedef long int __quad_t;
typedef unsigned long int __u_quad_t;
#pragma line 131 "/usr/include/bits/types.h" 3 4
#pragma line 1 "/usr/include/bits/typesizes.h" 1 3 4
#pragma line 132 "/usr/include/bits/types.h" 2 3 4
#pragma empty_line
#pragma empty_line
typedef unsigned long int __dev_t;
typedef unsigned int __uid_t;
typedef unsigned int __gid_t;
typedef unsigned long int __ino_t;
typedef unsigned long int __ino64_t;
typedef unsigned int __mode_t;
typedef unsigned long int __nlink_t;
typedef long int __off_t;
typedef long int __off64_t;
typedef int __pid_t;
typedef struct { int __val[2]; } __fsid_t;
typedef long int __clock_t;
typedef unsigned long int __rlim_t;
typedef unsigned long int __rlim64_t;
typedef unsigned int __id_t;
typedef long int __time_t;
typedef unsigned int __useconds_t;
typedef long int __suseconds_t;
#pragma empty_line
typedef int __daddr_t;
typedef long int __swblk_t;
typedef int __key_t;
#pragma empty_line
#pragma empty_line
typedef int __clockid_t;
#pragma empty_line
#pragma empty_line
typedef void * __timer_t;
#pragma empty_line
#pragma empty_line
typedef long int __blksize_t;
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
typedef long int __blkcnt_t;
typedef long int __blkcnt64_t;
#pragma empty_line
#pragma empty_line
typedef unsigned long int __fsblkcnt_t;
typedef unsigned long int __fsblkcnt64_t;
#pragma empty_line
#pragma empty_line
typedef unsigned long int __fsfilcnt_t;
typedef unsigned long int __fsfilcnt64_t;
#pragma empty_line
typedef long int __ssize_t;
#pragma empty_line
#pragma empty_line
#pragma empty_line
typedef __off64_t __loff_t;
typedef __quad_t *__qaddr_t;
typedef char *__caddr_t;
#pragma empty_line
#pragma empty_line
typedef long int __intptr_t;
#pragma empty_line
#pragma empty_line
typedef unsigned int __socklen_t;
#pragma line 37 "/usr/include/stdio.h" 2 3 4
#pragma line 45 "/usr/include/stdio.h" 3 4
struct _IO_FILE;
#pragma empty_line
#pragma empty_line
#pragma empty_line
typedef struct _IO_FILE FILE;
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma line 65 "/usr/include/stdio.h" 3 4
typedef struct _IO_FILE __FILE;
#pragma line 75 "/usr/include/stdio.h" 3 4
#pragma line 1 "/usr/include/libio.h" 1 3 4
#pragma line 32 "/usr/include/libio.h" 3 4
#pragma line 1 "/usr/include/_G_config.h" 1 3 4
#pragma line 15 "/usr/include/_G_config.h" 3 4
#pragma line 1 "/home/sw_dir/Xilinx/Vivado_HLS/2016.4/lnx64/tools/gcc/bin/../lib/gcc/x86_64-unknown-linux-gnu/4.6.3/include/stddef.h" 1 3 4
#pragma line 16 "/usr/include/_G_config.h" 2 3 4
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma line 1 "/home/sw_dir/Xilinx/Vivado_HLS/2016.4/lnx64/tools/gcc/bin/../lib/gcc/x86_64-unknown-linux-gnu/4.6.3/include-fixed/wchar.h" 1 3 4
#pragma line 57 "/home/sw_dir/Xilinx/Vivado_HLS/2016.4/lnx64/tools/gcc/bin/../lib/gcc/x86_64-unknown-linux-gnu/4.6.3/include-fixed/wchar.h" 3 4
#pragma line 1 "/home/sw_dir/Xilinx/Vivado_HLS/2016.4/lnx64/tools/gcc/bin/../lib/gcc/x86_64-unknown-linux-gnu/4.6.3/include/stddef.h" 1 3 4
#pragma line 353 "/home/sw_dir/Xilinx/Vivado_HLS/2016.4/lnx64/tools/gcc/bin/../lib/gcc/x86_64-unknown-linux-gnu/4.6.3/include/stddef.h" 3 4
typedef unsigned int wint_t;
#pragma line 58 "/home/sw_dir/Xilinx/Vivado_HLS/2016.4/lnx64/tools/gcc/bin/../lib/gcc/x86_64-unknown-linux-gnu/4.6.3/include-fixed/wchar.h" 2 3 4
#pragma empty_line
#pragma line 1 "/usr/include/bits/wchar.h" 1 3 4
#pragma line 60 "/home/sw_dir/Xilinx/Vivado_HLS/2016.4/lnx64/tools/gcc/bin/../lib/gcc/x86_64-unknown-linux-gnu/4.6.3/include-fixed/wchar.h" 2 3 4
#pragma line 85 "/home/sw_dir/Xilinx/Vivado_HLS/2016.4/lnx64/tools/gcc/bin/../lib/gcc/x86_64-unknown-linux-gnu/4.6.3/include-fixed/wchar.h" 3 4
typedef struct
{
  int __count;
  union
  {
    wint_t __wch;
    char __wchb[4];
  } __value;
} __mbstate_t;
#pragma line 21 "/usr/include/_G_config.h" 2 3 4
#pragma empty_line
typedef struct
{
  __off_t __pos;
  __mbstate_t __state;
} _G_fpos_t;
typedef struct
{
  __off64_t __pos;
  __mbstate_t __state;
} _G_fpos64_t;
#pragma line 53 "/usr/include/_G_config.h" 3 4
typedef int _G_int16_t __attribute__ ((__mode__ (__HI__)));
typedef int _G_int32_t __attribute__ ((__mode__ (__SI__)));
typedef unsigned int _G_uint16_t __attribute__ ((__mode__ (__HI__)));
typedef unsigned int _G_uint32_t __attribute__ ((__mode__ (__SI__)));
#pragma line 33 "/usr/include/libio.h" 2 3 4
#pragma line 53 "/usr/include/libio.h" 3 4
#pragma line 1 "/home/sw_dir/Xilinx/Vivado_HLS/2016.4/lnx64/tools/gcc/bin/../lib/gcc/x86_64-unknown-linux-gnu/4.6.3/include/stdarg.h" 1 3 4
#pragma line 40 "/home/sw_dir/Xilinx/Vivado_HLS/2016.4/lnx64/tools/gcc/bin/../lib/gcc/x86_64-unknown-linux-gnu/4.6.3/include/stdarg.h" 3 4
typedef __builtin_va_list __gnuc_va_list;
#pragma line 54 "/usr/include/libio.h" 2 3 4
#pragma line 170 "/usr/include/libio.h" 3 4
struct _IO_jump_t; struct _IO_FILE;
#pragma line 180 "/usr/include/libio.h" 3 4
typedef void _IO_lock_t;
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
struct _IO_marker {
  struct _IO_marker *_next;
  struct _IO_FILE *_sbuf;
#pragma empty_line
#pragma empty_line
#pragma empty_line
  int _pos;
#pragma line 203 "/usr/include/libio.h" 3 4
};
#pragma empty_line
#pragma empty_line
enum __codecvt_result
{
  __codecvt_ok,
  __codecvt_partial,
  __codecvt_error,
  __codecvt_noconv
};
#pragma line 271 "/usr/include/libio.h" 3 4
struct _IO_FILE {
  int _flags;
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
  char* _IO_read_ptr;
  char* _IO_read_end;
  char* _IO_read_base;
  char* _IO_write_base;
  char* _IO_write_ptr;
  char* _IO_write_end;
  char* _IO_buf_base;
  char* _IO_buf_end;
#pragma empty_line
  char *_IO_save_base;
  char *_IO_backup_base;
  char *_IO_save_end;
#pragma empty_line
  struct _IO_marker *_markers;
#pragma empty_line
  struct _IO_FILE *_chain;
#pragma empty_line
  int _fileno;
#pragma empty_line
#pragma empty_line
#pragma empty_line
  int _flags2;
#pragma empty_line
  __off_t _old_offset;
#pragma empty_line
#pragma empty_line
#pragma empty_line
  unsigned short _cur_column;
  signed char _vtable_offset;
  char _shortbuf[1];
#pragma empty_line
#pragma empty_line
#pragma empty_line
  _IO_lock_t *_lock;
#pragma line 319 "/usr/include/libio.h" 3 4
  __off64_t _offset;
#pragma line 328 "/usr/include/libio.h" 3 4
  void *__pad1;
  void *__pad2;
  void *__pad3;
  void *__pad4;
  size_t __pad5;
#pragma empty_line
  int _mode;
#pragma empty_line
  char _unused2[15 * sizeof (int) - 4 * sizeof (void *) - sizeof (size_t)];
#pragma empty_line
};
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
struct _IO_FILE_plus;
#pragma empty_line
extern struct _IO_FILE_plus _IO_2_1_stdin_;
extern struct _IO_FILE_plus _IO_2_1_stdout_;
extern struct _IO_FILE_plus _IO_2_1_stderr_;
#pragma line 364 "/usr/include/libio.h" 3 4
typedef __ssize_t __io_read_fn (void *__cookie, char *__buf, size_t __nbytes);
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
typedef __ssize_t __io_write_fn (void *__cookie, __const char *__buf,
     size_t __n);
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
typedef int __io_seek_fn (void *__cookie, __off64_t *__pos, int __w);
#pragma empty_line
#pragma empty_line
typedef int __io_close_fn (void *__cookie);
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
typedef __io_read_fn cookie_read_function_t;
typedef __io_write_fn cookie_write_function_t;
typedef __io_seek_fn cookie_seek_function_t;
typedef __io_close_fn cookie_close_function_t;
#pragma empty_line
#pragma empty_line
typedef struct
{
  __io_read_fn *read;
  __io_write_fn *write;
  __io_seek_fn *seek;
  __io_close_fn *close;
} _IO_cookie_io_functions_t;
typedef _IO_cookie_io_functions_t cookie_io_functions_t;
#pragma empty_line
struct _IO_cookie_file;
#pragma empty_line
#pragma empty_line
extern void _IO_cookie_init (struct _IO_cookie_file *__cfile, int __read_write,
        void *__cookie, _IO_cookie_io_functions_t __fns);
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern "C" {
#pragma empty_line
#pragma empty_line
extern int __underflow (_IO_FILE *);
extern int __uflow (_IO_FILE *);
extern int __overflow (_IO_FILE *, int);
#pragma line 460 "/usr/include/libio.h" 3 4
extern int _IO_getc (_IO_FILE *__fp);
extern int _IO_putc (int __c, _IO_FILE *__fp);
extern int _IO_feof (_IO_FILE *__fp) throw ();
extern int _IO_ferror (_IO_FILE *__fp) throw ();
#pragma empty_line
extern int _IO_peekc_locked (_IO_FILE *__fp);
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern void _IO_flockfile (_IO_FILE *) throw ();
extern void _IO_funlockfile (_IO_FILE *) throw ();
extern int _IO_ftrylockfile (_IO_FILE *) throw ();
#pragma line 490 "/usr/include/libio.h" 3 4
extern int _IO_vfscanf (_IO_FILE * __restrict, const char * __restrict,
   __gnuc_va_list, int *__restrict);
extern int _IO_vfprintf (_IO_FILE *__restrict, const char *__restrict,
    __gnuc_va_list);
extern __ssize_t _IO_padn (_IO_FILE *, int, __ssize_t);
extern size_t _IO_sgetn (_IO_FILE *, void *, size_t);
#pragma empty_line
extern __off64_t _IO_seekoff (_IO_FILE *, __off64_t, int, int);
extern __off64_t _IO_seekpos (_IO_FILE *, __off64_t, int);
#pragma empty_line
extern void _IO_free_backup_area (_IO_FILE *) throw ();
#pragma line 552 "/usr/include/libio.h" 3 4
}
#pragma line 76 "/usr/include/stdio.h" 2 3 4
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
typedef __gnuc_va_list va_list;
#pragma line 91 "/usr/include/stdio.h" 3 4
typedef __off_t off_t;
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
typedef __off64_t off64_t;
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
typedef __ssize_t ssize_t;
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
typedef _G_fpos_t fpos_t;
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
typedef _G_fpos64_t fpos64_t;
#pragma line 161 "/usr/include/stdio.h" 3 4
#pragma line 1 "/usr/include/bits/stdio_lim.h" 1 3 4
#pragma line 162 "/usr/include/stdio.h" 2 3 4
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern struct _IO_FILE *stdin;
extern struct _IO_FILE *stdout;
extern struct _IO_FILE *stderr;
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern int remove (__const char *__filename) throw ();
#pragma empty_line
extern int rename (__const char *__old, __const char *__new) throw ();
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern int renameat (int __oldfd, __const char *__old, int __newfd,
       __const char *__new) throw ();
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern FILE *tmpfile (void) ;
#pragma line 204 "/usr/include/stdio.h" 3 4
extern FILE *tmpfile64 (void) ;
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern char *tmpnam (char *__s) throw () ;
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern char *tmpnam_r (char *__s) throw () ;
#pragma line 226 "/usr/include/stdio.h" 3 4
extern char *tempnam (__const char *__dir, __const char *__pfx)
     throw () __attribute__ ((__malloc__)) ;
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern int fclose (FILE *__stream);
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern int fflush (FILE *__stream);
#pragma empty_line
#pragma line 251 "/usr/include/stdio.h" 3 4
extern int fflush_unlocked (FILE *__stream);
#pragma line 261 "/usr/include/stdio.h" 3 4
extern int fcloseall (void);
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern FILE *fopen (__const char *__restrict __filename,
      __const char *__restrict __modes) ;
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern FILE *freopen (__const char *__restrict __filename,
        __const char *__restrict __modes,
        FILE *__restrict __stream) ;
#pragma line 294 "/usr/include/stdio.h" 3 4
#pragma empty_line
#pragma empty_line
extern FILE *fopen64 (__const char *__restrict __filename,
        __const char *__restrict __modes) ;
extern FILE *freopen64 (__const char *__restrict __filename,
   __const char *__restrict __modes,
   FILE *__restrict __stream) ;
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern FILE *fdopen (int __fd, __const char *__modes) throw () ;
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern FILE *fopencookie (void *__restrict __magic_cookie,
     __const char *__restrict __modes,
     _IO_cookie_io_functions_t __io_funcs) throw () ;
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern FILE *fmemopen (void *__s, size_t __len, __const char *__modes)
  throw () ;
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern FILE *open_memstream (char **__bufloc, size_t *__sizeloc) throw () ;
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern void setbuf (FILE *__restrict __stream, char *__restrict __buf) throw ();
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern int setvbuf (FILE *__restrict __stream, char *__restrict __buf,
      int __modes, size_t __n) throw ();
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern void setbuffer (FILE *__restrict __stream, char *__restrict __buf,
         size_t __size) throw ();
#pragma empty_line
#pragma empty_line
extern void setlinebuf (FILE *__stream) throw ();
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern int fprintf (FILE *__restrict __stream,
      __const char *__restrict __format, ...);
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern int printf (__const char *__restrict __format, ...);
#pragma empty_line
extern int sprintf (char *__restrict __s,
      __const char *__restrict __format, ...) throw ();
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern int vfprintf (FILE *__restrict __s, __const char *__restrict __format,
       __gnuc_va_list __arg);
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern int vprintf (__const char *__restrict __format, __gnuc_va_list __arg);
#pragma empty_line
extern int vsprintf (char *__restrict __s, __const char *__restrict __format,
       __gnuc_va_list __arg) throw ();
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern int snprintf (char *__restrict __s, size_t __maxlen,
       __const char *__restrict __format, ...)
     throw () __attribute__ ((__format__ (__printf__, 3, 4)));
#pragma empty_line
extern int vsnprintf (char *__restrict __s, size_t __maxlen,
        __const char *__restrict __format, __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__printf__, 3, 0)));
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern int vasprintf (char **__restrict __ptr, __const char *__restrict __f,
        __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__printf__, 2, 0))) ;
extern int __asprintf (char **__restrict __ptr,
         __const char *__restrict __fmt, ...)
     throw () __attribute__ ((__format__ (__printf__, 2, 3))) ;
extern int asprintf (char **__restrict __ptr,
       __const char *__restrict __fmt, ...)
     throw () __attribute__ ((__format__ (__printf__, 2, 3))) ;
#pragma line 416 "/usr/include/stdio.h" 3 4
extern int vdprintf (int __fd, __const char *__restrict __fmt,
       __gnuc_va_list __arg)
     __attribute__ ((__format__ (__printf__, 2, 0)));
extern int dprintf (int __fd, __const char *__restrict __fmt, ...)
     __attribute__ ((__format__ (__printf__, 2, 3)));
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern int fscanf (FILE *__restrict __stream,
     __const char *__restrict __format, ...) ;
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern int scanf (__const char *__restrict __format, ...) ;
#pragma empty_line
extern int sscanf (__const char *__restrict __s,
     __const char *__restrict __format, ...) throw ();
#pragma line 467 "/usr/include/stdio.h" 3 4
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern int vfscanf (FILE *__restrict __s, __const char *__restrict __format,
      __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 2, 0))) ;
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern int vscanf (__const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 1, 0))) ;
#pragma empty_line
#pragma empty_line
extern int vsscanf (__const char *__restrict __s,
      __const char *__restrict __format, __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__scanf__, 2, 0)));
#pragma line 526 "/usr/include/stdio.h" 3 4
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern int fgetc (FILE *__stream);
extern int getc (FILE *__stream);
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern int getchar (void);
#pragma empty_line
#pragma line 554 "/usr/include/stdio.h" 3 4
extern int getc_unlocked (FILE *__stream);
extern int getchar_unlocked (void);
#pragma line 565 "/usr/include/stdio.h" 3 4
extern int fgetc_unlocked (FILE *__stream);
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern int fputc (int __c, FILE *__stream);
extern int putc (int __c, FILE *__stream);
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern int putchar (int __c);
#pragma empty_line
#pragma line 598 "/usr/include/stdio.h" 3 4
extern int fputc_unlocked (int __c, FILE *__stream);
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern int putc_unlocked (int __c, FILE *__stream);
extern int putchar_unlocked (int __c);
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern int getw (FILE *__stream);
#pragma empty_line
#pragma empty_line
extern int putw (int __w, FILE *__stream);
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern char *fgets (char *__restrict __s, int __n, FILE *__restrict __stream)
     ;
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern char *gets (char *__s) ;
#pragma empty_line
#pragma line 644 "/usr/include/stdio.h" 3 4
extern char *fgets_unlocked (char *__restrict __s, int __n,
        FILE *__restrict __stream) ;
#pragma line 660 "/usr/include/stdio.h" 3 4
extern __ssize_t __getdelim (char **__restrict __lineptr,
          size_t *__restrict __n, int __delimiter,
          FILE *__restrict __stream) ;
extern __ssize_t getdelim (char **__restrict __lineptr,
        size_t *__restrict __n, int __delimiter,
        FILE *__restrict __stream) ;
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern __ssize_t getline (char **__restrict __lineptr,
       size_t *__restrict __n,
       FILE *__restrict __stream) ;
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern int fputs (__const char *__restrict __s, FILE *__restrict __stream);
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern int puts (__const char *__s);
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern int ungetc (int __c, FILE *__stream);
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern size_t fread (void *__restrict __ptr, size_t __size,
       size_t __n, FILE *__restrict __stream) ;
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern size_t fwrite (__const void *__restrict __ptr, size_t __size,
        size_t __n, FILE *__restrict __s) ;
#pragma empty_line
#pragma line 721 "/usr/include/stdio.h" 3 4
extern int fputs_unlocked (__const char *__restrict __s,
      FILE *__restrict __stream);
#pragma line 732 "/usr/include/stdio.h" 3 4
extern size_t fread_unlocked (void *__restrict __ptr, size_t __size,
         size_t __n, FILE *__restrict __stream) ;
extern size_t fwrite_unlocked (__const void *__restrict __ptr, size_t __size,
          size_t __n, FILE *__restrict __stream) ;
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern int fseek (FILE *__stream, long int __off, int __whence);
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern long int ftell (FILE *__stream) ;
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern void rewind (FILE *__stream);
#pragma empty_line
#pragma line 768 "/usr/include/stdio.h" 3 4
extern int fseeko (FILE *__stream, __off_t __off, int __whence);
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern __off_t ftello (FILE *__stream) ;
#pragma line 787 "/usr/include/stdio.h" 3 4
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern int fgetpos (FILE *__restrict __stream, fpos_t *__restrict __pos);
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern int fsetpos (FILE *__stream, __const fpos_t *__pos);
#pragma line 810 "/usr/include/stdio.h" 3 4
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern int fseeko64 (FILE *__stream, __off64_t __off, int __whence);
extern __off64_t ftello64 (FILE *__stream) ;
extern int fgetpos64 (FILE *__restrict __stream, fpos64_t *__restrict __pos);
extern int fsetpos64 (FILE *__stream, __const fpos64_t *__pos);
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern void clearerr (FILE *__stream) throw ();
#pragma empty_line
extern int feof (FILE *__stream) throw () ;
#pragma empty_line
extern int ferror (FILE *__stream) throw () ;
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern void clearerr_unlocked (FILE *__stream) throw ();
extern int feof_unlocked (FILE *__stream) throw () ;
extern int ferror_unlocked (FILE *__stream) throw () ;
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern void perror (__const char *__s);
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma line 1 "/usr/include/bits/sys_errlist.h" 1 3 4
#pragma line 27 "/usr/include/bits/sys_errlist.h" 3 4
extern int sys_nerr;
extern __const char *__const sys_errlist[];
#pragma empty_line
#pragma empty_line
extern int _sys_nerr;
extern __const char *__const _sys_errlist[];
#pragma line 849 "/usr/include/stdio.h" 2 3 4
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern int fileno (FILE *__stream) throw () ;
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern int fileno_unlocked (FILE *__stream) throw () ;
#pragma line 868 "/usr/include/stdio.h" 3 4
extern FILE *popen (__const char *__command, __const char *__modes) ;
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern int pclose (FILE *__stream);
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern char *ctermid (char *__s) throw ();
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern char *cuserid (char *__s);
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
struct obstack;
#pragma empty_line
#pragma empty_line
extern int obstack_printf (struct obstack *__restrict __obstack,
      __const char *__restrict __format, ...)
     throw () __attribute__ ((__format__ (__printf__, 2, 3)));
extern int obstack_vprintf (struct obstack *__restrict __obstack,
       __const char *__restrict __format,
       __gnuc_va_list __args)
     throw () __attribute__ ((__format__ (__printf__, 2, 0)));
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern void flockfile (FILE *__stream) throw ();
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern int ftrylockfile (FILE *__stream) throw () ;
#pragma empty_line
#pragma empty_line
extern void funlockfile (FILE *__stream) throw ();
#pragma line 938 "/usr/include/stdio.h" 3 4
}
#pragma line 2 "/afs/cern.ch/user/p/psiddire/CMSSW_10_2_2/src/VivadoHLSProjects/HCAlTowerCode/HCALTower.h" 2
#pragma line 1 "/usr/include/math.h" 1 3 4
#pragma line 30 "/usr/include/math.h" 3 4
extern "C" {
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma line 1 "/usr/include/bits/huge_val.h" 1 3 4
#pragma line 35 "/usr/include/math.h" 2 3 4
#pragma empty_line
#pragma line 1 "/usr/include/bits/huge_valf.h" 1 3 4
#pragma line 37 "/usr/include/math.h" 2 3 4
#pragma line 1 "/usr/include/bits/huge_vall.h" 1 3 4
#pragma line 38 "/usr/include/math.h" 2 3 4
#pragma empty_line
#pragma empty_line
#pragma line 1 "/usr/include/bits/inf.h" 1 3 4
#pragma line 41 "/usr/include/math.h" 2 3 4
#pragma empty_line
#pragma empty_line
#pragma line 1 "/usr/include/bits/nan.h" 1 3 4
#pragma line 44 "/usr/include/math.h" 2 3 4
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma line 1 "/usr/include/bits/mathdef.h" 1 3 4
#pragma line 26 "/usr/include/bits/mathdef.h" 3 4
#pragma line 1 "/usr/include/bits/wordsize.h" 1 3 4
#pragma line 27 "/usr/include/bits/mathdef.h" 2 3 4
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
typedef float float_t;
typedef double double_t;
#pragma line 48 "/usr/include/math.h" 2 3 4
#pragma line 71 "/usr/include/math.h" 3 4
#pragma line 1 "/usr/include/bits/mathcalls.h" 1 3 4
#pragma line 53 "/usr/include/bits/mathcalls.h" 3 4
#pragma empty_line
#pragma empty_line
extern double acos (double __x) throw (); extern double __acos (double __x) throw ();
#pragma empty_line
extern double asin (double __x) throw (); extern double __asin (double __x) throw ();
#pragma empty_line
extern double atan (double __x) throw (); extern double __atan (double __x) throw ();
#pragma empty_line
extern double atan2 (double __y, double __x) throw (); extern double __atan2 (double __y, double __x) throw ();
#pragma empty_line
#pragma empty_line
extern double cos (double __x) throw (); extern double __cos (double __x) throw ();
#pragma empty_line
extern double sin (double __x) throw (); extern double __sin (double __x) throw ();
#pragma empty_line
extern double tan (double __x) throw (); extern double __tan (double __x) throw ();
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern double cosh (double __x) throw (); extern double __cosh (double __x) throw ();
#pragma empty_line
extern double sinh (double __x) throw (); extern double __sinh (double __x) throw ();
#pragma empty_line
extern double tanh (double __x) throw (); extern double __tanh (double __x) throw ();
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern void sincos (double __x, double *__sinx, double *__cosx) throw (); extern void __sincos (double __x, double *__sinx, double *__cosx) throw ()
                                                           ;
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern double acosh (double __x) throw (); extern double __acosh (double __x) throw ();
#pragma empty_line
extern double asinh (double __x) throw (); extern double __asinh (double __x) throw ();
#pragma empty_line
extern double atanh (double __x) throw (); extern double __atanh (double __x) throw ();
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern double exp (double __x) throw (); extern double __exp (double __x) throw ();
#pragma empty_line
#pragma empty_line
extern double frexp (double __x, int *__exponent) throw (); extern double __frexp (double __x, int *__exponent) throw ();
#pragma empty_line
#pragma empty_line
extern double ldexp (double __x, int __exponent) throw (); extern double __ldexp (double __x, int __exponent) throw ();
#pragma empty_line
#pragma empty_line
extern double log (double __x) throw (); extern double __log (double __x) throw ();
#pragma empty_line
#pragma empty_line
extern double log10 (double __x) throw (); extern double __log10 (double __x) throw ();
#pragma empty_line
#pragma empty_line
extern double modf (double __x, double *__iptr) throw (); extern double __modf (double __x, double *__iptr) throw ();
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern double exp10 (double __x) throw (); extern double __exp10 (double __x) throw ();
#pragma empty_line
extern double pow10 (double __x) throw (); extern double __pow10 (double __x) throw ();
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern double expm1 (double __x) throw (); extern double __expm1 (double __x) throw ();
#pragma empty_line
#pragma empty_line
extern double log1p (double __x) throw (); extern double __log1p (double __x) throw ();
#pragma empty_line
#pragma empty_line
extern double logb (double __x) throw (); extern double __logb (double __x) throw ();
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern double exp2 (double __x) throw (); extern double __exp2 (double __x) throw ();
#pragma empty_line
#pragma empty_line
extern double log2 (double __x) throw (); extern double __log2 (double __x) throw ();
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern double pow (double __x, double __y) throw (); extern double __pow (double __x, double __y) throw ();
#pragma empty_line
#pragma empty_line
extern double sqrt (double __x) throw (); extern double __sqrt (double __x) throw ();
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern double hypot (double __x, double __y) throw (); extern double __hypot (double __x, double __y) throw ();
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern double cbrt (double __x) throw (); extern double __cbrt (double __x) throw ();
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern double ceil (double __x) throw () __attribute__ ((__const__)); extern double __ceil (double __x) throw () __attribute__ ((__const__));
#pragma empty_line
#pragma empty_line
extern double fabs (double __x) throw () __attribute__ ((__const__)); extern double __fabs (double __x) throw () __attribute__ ((__const__));
#pragma empty_line
#pragma empty_line
extern double floor (double __x) throw () __attribute__ ((__const__)); extern double __floor (double __x) throw () __attribute__ ((__const__));
#pragma empty_line
#pragma empty_line
extern double fmod (double __x, double __y) throw (); extern double __fmod (double __x, double __y) throw ();
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern int __isinf (double __value) throw () __attribute__ ((__const__));
#pragma empty_line
#pragma empty_line
extern int __finite (double __value) throw () __attribute__ ((__const__));
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern int isinf (double __value) throw () __attribute__ ((__const__));
#pragma empty_line
#pragma empty_line
extern int finite (double __value) throw () __attribute__ ((__const__));
#pragma empty_line
#pragma empty_line
extern double drem (double __x, double __y) throw (); extern double __drem (double __x, double __y) throw ();
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern double significand (double __x) throw (); extern double __significand (double __x) throw ();
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern double copysign (double __x, double __y) throw () __attribute__ ((__const__)); extern double __copysign (double __x, double __y) throw () __attribute__ ((__const__));
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern double nan (__const char *__tagb) throw () __attribute__ ((__const__)); extern double __nan (__const char *__tagb) throw () __attribute__ ((__const__));
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern int __isnan (double __value) throw () __attribute__ ((__const__));
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern int isnan (double __value) throw () __attribute__ ((__const__));
#pragma empty_line
#pragma empty_line
extern double j0 (double) throw (); extern double __j0 (double) throw ();
extern double j1 (double) throw (); extern double __j1 (double) throw ();
extern double jn (int, double) throw (); extern double __jn (int, double) throw ();
extern double y0 (double) throw (); extern double __y0 (double) throw ();
extern double y1 (double) throw (); extern double __y1 (double) throw ();
extern double yn (int, double) throw (); extern double __yn (int, double) throw ();
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern double erf (double) throw (); extern double __erf (double) throw ();
extern double erfc (double) throw (); extern double __erfc (double) throw ();
extern double lgamma (double) throw (); extern double __lgamma (double) throw ();
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern double tgamma (double) throw (); extern double __tgamma (double) throw ();
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern double gamma (double) throw (); extern double __gamma (double) throw ();
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern double lgamma_r (double, int *__signgamp) throw (); extern double __lgamma_r (double, int *__signgamp) throw ();
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern double rint (double __x) throw (); extern double __rint (double __x) throw ();
#pragma empty_line
#pragma empty_line
extern double nextafter (double __x, double __y) throw () __attribute__ ((__const__)); extern double __nextafter (double __x, double __y) throw () __attribute__ ((__const__));
#pragma empty_line
extern double nexttoward (double __x, long double __y) throw () __attribute__ ((__const__)); extern double __nexttoward (double __x, long double __y) throw () __attribute__ ((__const__));
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern double remainder (double __x, double __y) throw (); extern double __remainder (double __x, double __y) throw ();
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern double scalbn (double __x, int __n) throw (); extern double __scalbn (double __x, int __n) throw ();
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern int ilogb (double __x) throw (); extern int __ilogb (double __x) throw ();
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern double scalbln (double __x, long int __n) throw (); extern double __scalbln (double __x, long int __n) throw ();
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern double nearbyint (double __x) throw (); extern double __nearbyint (double __x) throw ();
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern double round (double __x) throw () __attribute__ ((__const__)); extern double __round (double __x) throw () __attribute__ ((__const__));
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern double trunc (double __x) throw () __attribute__ ((__const__)); extern double __trunc (double __x) throw () __attribute__ ((__const__));
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern double remquo (double __x, double __y, int *__quo) throw (); extern double __remquo (double __x, double __y, int *__quo) throw ();
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern long int lrint (double __x) throw (); extern long int __lrint (double __x) throw ();
extern long long int llrint (double __x) throw (); extern long long int __llrint (double __x) throw ();
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern long int lround (double __x) throw (); extern long int __lround (double __x) throw ();
extern long long int llround (double __x) throw (); extern long long int __llround (double __x) throw ();
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern double fdim (double __x, double __y) throw (); extern double __fdim (double __x, double __y) throw ();
#pragma empty_line
#pragma empty_line
extern double fmax (double __x, double __y) throw (); extern double __fmax (double __x, double __y) throw ();
#pragma empty_line
#pragma empty_line
extern double fmin (double __x, double __y) throw (); extern double __fmin (double __x, double __y) throw ();
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern int __fpclassify (double __value) throw ()
     __attribute__ ((__const__));
#pragma empty_line
#pragma empty_line
extern int __signbit (double __value) throw ()
     __attribute__ ((__const__));
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern double fma (double __x, double __y, double __z) throw (); extern double __fma (double __x, double __y, double __z) throw ();
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern double scalb (double __x, double __n) throw (); extern double __scalb (double __x, double __n) throw ();
#pragma line 72 "/usr/include/math.h" 2 3 4
#pragma line 94 "/usr/include/math.h" 3 4
#pragma line 1 "/usr/include/bits/mathcalls.h" 1 3 4
#pragma line 53 "/usr/include/bits/mathcalls.h" 3 4
#pragma empty_line
#pragma empty_line
extern float acosf (float __x) throw (); extern float __acosf (float __x) throw ();
#pragma empty_line
extern float asinf (float __x) throw (); extern float __asinf (float __x) throw ();
#pragma empty_line
extern float atanf (float __x) throw (); extern float __atanf (float __x) throw ();
#pragma empty_line
extern float atan2f (float __y, float __x) throw (); extern float __atan2f (float __y, float __x) throw ();
#pragma empty_line
#pragma empty_line
extern float cosf (float __x) throw (); extern float __cosf (float __x) throw ();
#pragma empty_line
extern float sinf (float __x) throw (); extern float __sinf (float __x) throw ();
#pragma empty_line
extern float tanf (float __x) throw (); extern float __tanf (float __x) throw ();
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern float coshf (float __x) throw (); extern float __coshf (float __x) throw ();
#pragma empty_line
extern float sinhf (float __x) throw (); extern float __sinhf (float __x) throw ();
#pragma empty_line
extern float tanhf (float __x) throw (); extern float __tanhf (float __x) throw ();
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern void
 sincosf
#pragma line 82 "/usr/include/bits/mathcalls.h" 3 4
 (float __x, float *__sinx, float *__cosx) throw (); extern void
 __sincosf
#pragma line 82 "/usr/include/bits/mathcalls.h" 3 4
 (float __x, float *__sinx, float *__cosx) throw ()
                                                           ;
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern float acoshf (float __x) throw (); extern float __acoshf (float __x) throw ();
#pragma empty_line
extern float asinhf (float __x) throw (); extern float __asinhf (float __x) throw ();
#pragma empty_line
extern float atanhf (float __x) throw (); extern float __atanhf (float __x) throw ();
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern float expf (float __x) throw (); extern float __expf (float __x) throw ();
#pragma empty_line
#pragma empty_line
extern float frexpf (float __x, int *__exponent) throw (); extern float __frexpf (float __x, int *__exponent) throw ();
#pragma empty_line
#pragma empty_line
extern float ldexpf (float __x, int __exponent) throw (); extern float __ldexpf (float __x, int __exponent) throw ();
#pragma empty_line
#pragma empty_line
extern float logf (float __x) throw (); extern float __logf (float __x) throw ();
#pragma empty_line
#pragma empty_line
extern float log10f (float __x) throw (); extern float __log10f (float __x) throw ();
#pragma empty_line
#pragma empty_line
extern float modff (float __x, float *__iptr) throw (); extern float __modff (float __x, float *__iptr) throw ();
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern float exp10f (float __x) throw (); extern float __exp10f (float __x) throw ();
#pragma empty_line
extern float pow10f (float __x) throw (); extern float __pow10f (float __x) throw ();
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern float expm1f (float __x) throw (); extern float __expm1f (float __x) throw ();
#pragma empty_line
#pragma empty_line
extern float log1pf (float __x) throw (); extern float __log1pf (float __x) throw ();
#pragma empty_line
#pragma empty_line
extern float logbf (float __x) throw (); extern float __logbf (float __x) throw ();
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern float exp2f (float __x) throw (); extern float __exp2f (float __x) throw ();
#pragma empty_line
#pragma empty_line
extern float log2f (float __x) throw (); extern float __log2f (float __x) throw ();
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern float powf (float __x, float __y) throw (); extern float __powf (float __x, float __y) throw ();
#pragma empty_line
#pragma empty_line
extern float sqrtf (float __x) throw (); extern float __sqrtf (float __x) throw ();
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern float hypotf (float __x, float __y) throw (); extern float __hypotf (float __x, float __y) throw ();
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern float cbrtf (float __x) throw (); extern float __cbrtf (float __x) throw ();
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern float ceilf (float __x) throw () __attribute__ ((__const__)); extern float __ceilf (float __x) throw () __attribute__ ((__const__));
#pragma empty_line
#pragma empty_line
extern float fabsf (float __x) throw () __attribute__ ((__const__)); extern float __fabsf (float __x) throw () __attribute__ ((__const__));
#pragma empty_line
#pragma empty_line
extern float floorf (float __x) throw () __attribute__ ((__const__)); extern float __floorf (float __x) throw () __attribute__ ((__const__));
#pragma empty_line
#pragma empty_line
extern float fmodf (float __x, float __y) throw (); extern float __fmodf (float __x, float __y) throw ();
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern int __isinff (float __value) throw () __attribute__ ((__const__));
#pragma empty_line
#pragma empty_line
extern int __finitef (float __value) throw () __attribute__ ((__const__));
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern int isinff (float __value) throw () __attribute__ ((__const__));
#pragma empty_line
#pragma empty_line
extern int finitef (float __value) throw () __attribute__ ((__const__));
#pragma empty_line
#pragma empty_line
extern float dremf (float __x, float __y) throw (); extern float __dremf (float __x, float __y) throw ();
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern float significandf (float __x) throw (); extern float __significandf (float __x) throw ();
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern float copysignf (float __x, float __y) throw () __attribute__ ((__const__)); extern float __copysignf (float __x, float __y) throw () __attribute__ ((__const__));
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern float nanf (__const char *__tagb) throw () __attribute__ ((__const__)); extern float __nanf (__const char *__tagb) throw () __attribute__ ((__const__));
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern int __isnanf (float __value) throw () __attribute__ ((__const__));
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern int isnanf (float __value) throw () __attribute__ ((__const__));
#pragma empty_line
#pragma empty_line
extern float j0f (float) throw (); extern float __j0f (float) throw ();
extern float j1f (float) throw (); extern float __j1f (float) throw ();
extern float jnf (int, float) throw (); extern float __jnf (int, float) throw ();
extern float y0f (float) throw (); extern float __y0f (float) throw ();
extern float y1f (float) throw (); extern float __y1f (float) throw ();
extern float ynf (int, float) throw (); extern float __ynf (int, float) throw ();
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern float erff (float) throw (); extern float __erff (float) throw ();
extern float erfcf (float) throw (); extern float __erfcf (float) throw ();
extern float lgammaf (float) throw (); extern float __lgammaf (float) throw ();
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern float tgammaf (float) throw (); extern float __tgammaf (float) throw ();
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern float gammaf (float) throw (); extern float __gammaf (float) throw ();
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern float lgammaf_r (float, int *__signgamp) throw (); extern float __lgammaf_r (float, int *__signgamp) throw ();
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern float rintf (float __x) throw (); extern float __rintf (float __x) throw ();
#pragma empty_line
#pragma empty_line
extern float nextafterf (float __x, float __y) throw () __attribute__ ((__const__)); extern float __nextafterf (float __x, float __y) throw () __attribute__ ((__const__));
#pragma empty_line
extern float nexttowardf (float __x, long double __y) throw () __attribute__ ((__const__)); extern float __nexttowardf (float __x, long double __y) throw () __attribute__ ((__const__));
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern float remainderf (float __x, float __y) throw (); extern float __remainderf (float __x, float __y) throw ();
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern float scalbnf (float __x, int __n) throw (); extern float __scalbnf (float __x, int __n) throw ();
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern int ilogbf (float __x) throw (); extern int __ilogbf (float __x) throw ();
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern float scalblnf (float __x, long int __n) throw (); extern float __scalblnf (float __x, long int __n) throw ();
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern float nearbyintf (float __x) throw (); extern float __nearbyintf (float __x) throw ();
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern float roundf (float __x) throw () __attribute__ ((__const__)); extern float __roundf (float __x) throw () __attribute__ ((__const__));
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern float truncf (float __x) throw () __attribute__ ((__const__)); extern float __truncf (float __x) throw () __attribute__ ((__const__));
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern float remquof (float __x, float __y, int *__quo) throw (); extern float __remquof (float __x, float __y, int *__quo) throw ();
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern long int lrintf (float __x) throw (); extern long int __lrintf (float __x) throw ();
extern long long int llrintf (float __x) throw (); extern long long int __llrintf (float __x) throw ();
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern long int lroundf (float __x) throw (); extern long int __lroundf (float __x) throw ();
extern long long int llroundf (float __x) throw (); extern long long int __llroundf (float __x) throw ();
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern float fdimf (float __x, float __y) throw (); extern float __fdimf (float __x, float __y) throw ();
#pragma empty_line
#pragma empty_line
extern float fmaxf (float __x, float __y) throw (); extern float __fmaxf (float __x, float __y) throw ();
#pragma empty_line
#pragma empty_line
extern float fminf (float __x, float __y) throw (); extern float __fminf (float __x, float __y) throw ();
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern int __fpclassifyf (float __value) throw ()
     __attribute__ ((__const__));
#pragma empty_line
#pragma empty_line
extern int __signbitf (float __value) throw ()
     __attribute__ ((__const__));
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern float fmaf (float __x, float __y, float __z) throw (); extern float __fmaf (float __x, float __y, float __z) throw ();
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern float scalbf (float __x, float __n) throw (); extern float __scalbf (float __x, float __n) throw ();
#pragma line 95 "/usr/include/math.h" 2 3 4
#pragma line 141 "/usr/include/math.h" 3 4
#pragma line 1 "/usr/include/bits/mathcalls.h" 1 3 4
#pragma line 53 "/usr/include/bits/mathcalls.h" 3 4
#pragma empty_line
#pragma empty_line
extern long double acosl (long double __x) throw (); extern long double __acosl (long double __x) throw ();
#pragma empty_line
extern long double asinl (long double __x) throw (); extern long double __asinl (long double __x) throw ();
#pragma empty_line
extern long double atanl (long double __x) throw (); extern long double __atanl (long double __x) throw ();
#pragma empty_line
extern long double atan2l (long double __y, long double __x) throw (); extern long double __atan2l (long double __y, long double __x) throw ();
#pragma empty_line
#pragma empty_line
extern long double cosl (long double __x) throw (); extern long double __cosl (long double __x) throw ();
#pragma empty_line
extern long double sinl (long double __x) throw (); extern long double __sinl (long double __x) throw ();
#pragma empty_line
extern long double tanl (long double __x) throw (); extern long double __tanl (long double __x) throw ();
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern long double coshl (long double __x) throw (); extern long double __coshl (long double __x) throw ();
#pragma empty_line
extern long double sinhl (long double __x) throw (); extern long double __sinhl (long double __x) throw ();
#pragma empty_line
extern long double tanhl (long double __x) throw (); extern long double __tanhl (long double __x) throw ();
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern void
 sincosl
#pragma line 82 "/usr/include/bits/mathcalls.h" 3 4
 (long double __x, long double *__sinx, long double *__cosx) throw (); extern void
 __sincosl
#pragma line 82 "/usr/include/bits/mathcalls.h" 3 4
 (long double __x, long double *__sinx, long double *__cosx) throw ()
                                                           ;
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern long double acoshl (long double __x) throw (); extern long double __acoshl (long double __x) throw ();
#pragma empty_line
extern long double asinhl (long double __x) throw (); extern long double __asinhl (long double __x) throw ();
#pragma empty_line
extern long double atanhl (long double __x) throw (); extern long double __atanhl (long double __x) throw ();
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern long double expl (long double __x) throw (); extern long double __expl (long double __x) throw ();
#pragma empty_line
#pragma empty_line
extern long double frexpl (long double __x, int *__exponent) throw (); extern long double __frexpl (long double __x, int *__exponent) throw ();
#pragma empty_line
#pragma empty_line
extern long double ldexpl (long double __x, int __exponent) throw (); extern long double __ldexpl (long double __x, int __exponent) throw ();
#pragma empty_line
#pragma empty_line
extern long double logl (long double __x) throw (); extern long double __logl (long double __x) throw ();
#pragma empty_line
#pragma empty_line
extern long double log10l (long double __x) throw (); extern long double __log10l (long double __x) throw ();
#pragma empty_line
#pragma empty_line
extern long double modfl (long double __x, long double *__iptr) throw (); extern long double __modfl (long double __x, long double *__iptr) throw ();
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern long double exp10l (long double __x) throw (); extern long double __exp10l (long double __x) throw ();
#pragma empty_line
extern long double pow10l (long double __x) throw (); extern long double __pow10l (long double __x) throw ();
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern long double expm1l (long double __x) throw (); extern long double __expm1l (long double __x) throw ();
#pragma empty_line
#pragma empty_line
extern long double log1pl (long double __x) throw (); extern long double __log1pl (long double __x) throw ();
#pragma empty_line
#pragma empty_line
extern long double logbl (long double __x) throw (); extern long double __logbl (long double __x) throw ();
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern long double exp2l (long double __x) throw (); extern long double __exp2l (long double __x) throw ();
#pragma empty_line
#pragma empty_line
extern long double log2l (long double __x) throw (); extern long double __log2l (long double __x) throw ();
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern long double powl (long double __x, long double __y) throw (); extern long double __powl (long double __x, long double __y) throw ();
#pragma empty_line
#pragma empty_line
extern long double sqrtl (long double __x) throw (); extern long double __sqrtl (long double __x) throw ();
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern long double hypotl (long double __x, long double __y) throw (); extern long double __hypotl (long double __x, long double __y) throw ();
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern long double cbrtl (long double __x) throw (); extern long double __cbrtl (long double __x) throw ();
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern long double ceill (long double __x) throw () __attribute__ ((__const__)); extern long double __ceill (long double __x) throw () __attribute__ ((__const__));
#pragma empty_line
#pragma empty_line
extern long double fabsl (long double __x) throw () __attribute__ ((__const__)); extern long double __fabsl (long double __x) throw () __attribute__ ((__const__));
#pragma empty_line
#pragma empty_line
extern long double floorl (long double __x) throw () __attribute__ ((__const__)); extern long double __floorl (long double __x) throw () __attribute__ ((__const__));
#pragma empty_line
#pragma empty_line
extern long double fmodl (long double __x, long double __y) throw (); extern long double __fmodl (long double __x, long double __y) throw ();
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern int __isinfl (long double __value) throw () __attribute__ ((__const__));
#pragma empty_line
#pragma empty_line
extern int __finitel (long double __value) throw () __attribute__ ((__const__));
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern int isinfl (long double __value) throw () __attribute__ ((__const__));
#pragma empty_line
#pragma empty_line
extern int finitel (long double __value) throw () __attribute__ ((__const__));
#pragma empty_line
#pragma empty_line
extern long double dreml (long double __x, long double __y) throw (); extern long double __dreml (long double __x, long double __y) throw ();
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern long double significandl (long double __x) throw (); extern long double __significandl (long double __x) throw ();
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern long double copysignl (long double __x, long double __y) throw () __attribute__ ((__const__)); extern long double __copysignl (long double __x, long double __y) throw () __attribute__ ((__const__));
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern long double nanl (__const char *__tagb) throw () __attribute__ ((__const__)); extern long double __nanl (__const char *__tagb) throw () __attribute__ ((__const__));
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern int __isnanl (long double __value) throw () __attribute__ ((__const__));
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern int isnanl (long double __value) throw () __attribute__ ((__const__));
#pragma empty_line
#pragma empty_line
extern long double j0l (long double) throw (); extern long double __j0l (long double) throw ();
extern long double j1l (long double) throw (); extern long double __j1l (long double) throw ();
extern long double jnl (int, long double) throw (); extern long double __jnl (int, long double) throw ();
extern long double y0l (long double) throw (); extern long double __y0l (long double) throw ();
extern long double y1l (long double) throw (); extern long double __y1l (long double) throw ();
extern long double ynl (int, long double) throw (); extern long double __ynl (int, long double) throw ();
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern long double erfl (long double) throw (); extern long double __erfl (long double) throw ();
extern long double erfcl (long double) throw (); extern long double __erfcl (long double) throw ();
extern long double lgammal (long double) throw (); extern long double __lgammal (long double) throw ();
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern long double tgammal (long double) throw (); extern long double __tgammal (long double) throw ();
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern long double gammal (long double) throw (); extern long double __gammal (long double) throw ();
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern long double lgammal_r (long double, int *__signgamp) throw (); extern long double __lgammal_r (long double, int *__signgamp) throw ();
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern long double rintl (long double __x) throw (); extern long double __rintl (long double __x) throw ();
#pragma empty_line
#pragma empty_line
extern long double nextafterl (long double __x, long double __y) throw () __attribute__ ((__const__)); extern long double __nextafterl (long double __x, long double __y) throw () __attribute__ ((__const__));
#pragma empty_line
extern long double nexttowardl (long double __x, long double __y) throw () __attribute__ ((__const__)); extern long double __nexttowardl (long double __x, long double __y) throw () __attribute__ ((__const__));
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern long double remainderl (long double __x, long double __y) throw (); extern long double __remainderl (long double __x, long double __y) throw ();
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern long double scalbnl (long double __x, int __n) throw (); extern long double __scalbnl (long double __x, int __n) throw ();
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern int ilogbl (long double __x) throw (); extern int __ilogbl (long double __x) throw ();
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern long double scalblnl (long double __x, long int __n) throw (); extern long double __scalblnl (long double __x, long int __n) throw ();
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern long double nearbyintl (long double __x) throw (); extern long double __nearbyintl (long double __x) throw ();
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern long double roundl (long double __x) throw () __attribute__ ((__const__)); extern long double __roundl (long double __x) throw () __attribute__ ((__const__));
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern long double truncl (long double __x) throw () __attribute__ ((__const__)); extern long double __truncl (long double __x) throw () __attribute__ ((__const__));
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern long double remquol (long double __x, long double __y, int *__quo) throw (); extern long double __remquol (long double __x, long double __y, int *__quo) throw ();
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern long int lrintl (long double __x) throw (); extern long int __lrintl (long double __x) throw ();
extern long long int llrintl (long double __x) throw (); extern long long int __llrintl (long double __x) throw ();
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern long int lroundl (long double __x) throw (); extern long int __lroundl (long double __x) throw ();
extern long long int llroundl (long double __x) throw (); extern long long int __llroundl (long double __x) throw ();
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern long double fdiml (long double __x, long double __y) throw (); extern long double __fdiml (long double __x, long double __y) throw ();
#pragma empty_line
#pragma empty_line
extern long double fmaxl (long double __x, long double __y) throw (); extern long double __fmaxl (long double __x, long double __y) throw ();
#pragma empty_line
#pragma empty_line
extern long double fminl (long double __x, long double __y) throw (); extern long double __fminl (long double __x, long double __y) throw ();
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern int __fpclassifyl (long double __value) throw ()
     __attribute__ ((__const__));
#pragma empty_line
#pragma empty_line
extern int __signbitl (long double __value) throw ()
     __attribute__ ((__const__));
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern long double fmal (long double __x, long double __y, long double __z) throw (); extern long double __fmal (long double __x, long double __y, long double __z) throw ();
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern long double scalbl (long double __x, long double __n) throw (); extern long double __scalbl (long double __x, long double __n) throw ();
#pragma line 142 "/usr/include/math.h" 2 3 4
#pragma line 157 "/usr/include/math.h" 3 4
extern int signgam;
#pragma line 198 "/usr/include/math.h" 3 4
enum
  {
    FP_NAN,
#pragma empty_line
    FP_INFINITE,
#pragma empty_line
    FP_ZERO,
#pragma empty_line
    FP_SUBNORMAL,
#pragma empty_line
    FP_NORMAL
#pragma empty_line
  };
#pragma line 291 "/usr/include/math.h" 3 4
typedef enum
{
  _IEEE_ = -1,
  _SVID_,
  _XOPEN_,
  _POSIX_,
  _ISOC_
} _LIB_VERSION_TYPE;
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern _LIB_VERSION_TYPE _LIB_VERSION;
#pragma line 314 "/usr/include/math.h" 3 4
struct __exception
#pragma empty_line
#pragma empty_line
#pragma empty_line
  {
    int type;
    char *name;
    double arg1;
    double arg2;
    double retval;
  };
#pragma empty_line
#pragma empty_line
extern int matherr (struct __exception *__exc) throw ();
#pragma line 472 "/usr/include/math.h" 3 4
}
#pragma line 3 "/afs/cern.ch/user/p/psiddire/CMSSW_10_2_2/src/VivadoHLSProjects/HCAlTowerCode/HCALTower.h" 2
#pragma line 1 "/home/sw_dir/Xilinx/Vivado_HLS/2016.4/lnx64/tools/gcc/bin/../lib/gcc/x86_64-unknown-linux-gnu/4.6.3/include/stdint.h" 1 3 4
#pragma empty_line
#pragma empty_line
#pragma line 1 "/usr/include/stdint.h" 1 3 4
#pragma line 28 "/usr/include/stdint.h" 3 4
#pragma line 1 "/usr/include/bits/wordsize.h" 1 3 4
#pragma line 29 "/usr/include/stdint.h" 2 3 4
#pragma line 37 "/usr/include/stdint.h" 3 4
typedef signed char int8_t;
typedef short int int16_t;
typedef int int32_t;
#pragma empty_line
typedef long int int64_t;
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
typedef unsigned char uint8_t;
typedef unsigned short int uint16_t;
#pragma empty_line
typedef unsigned int uint32_t;
#pragma empty_line
#pragma empty_line
#pragma empty_line
typedef unsigned long int uint64_t;
#pragma line 66 "/usr/include/stdint.h" 3 4
typedef signed char int_least8_t;
typedef short int int_least16_t;
typedef int int_least32_t;
#pragma empty_line
typedef long int int_least64_t;
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
typedef unsigned char uint_least8_t;
typedef unsigned short int uint_least16_t;
typedef unsigned int uint_least32_t;
#pragma empty_line
typedef unsigned long int uint_least64_t;
#pragma line 91 "/usr/include/stdint.h" 3 4
typedef signed char int_fast8_t;
#pragma empty_line
typedef long int int_fast16_t;
typedef long int int_fast32_t;
typedef long int int_fast64_t;
#pragma line 104 "/usr/include/stdint.h" 3 4
typedef unsigned char uint_fast8_t;
#pragma empty_line
typedef unsigned long int uint_fast16_t;
typedef unsigned long int uint_fast32_t;
typedef unsigned long int uint_fast64_t;
#pragma line 120 "/usr/include/stdint.h" 3 4
typedef long int intptr_t;
#pragma empty_line
#pragma empty_line
typedef unsigned long int uintptr_t;
#pragma line 135 "/usr/include/stdint.h" 3 4
typedef long int intmax_t;
typedef unsigned long int uintmax_t;
#pragma line 4 "/home/sw_dir/Xilinx/Vivado_HLS/2016.4/lnx64/tools/gcc/bin/../lib/gcc/x86_64-unknown-linux-gnu/4.6.3/include/stdint.h" 2 3 4
#pragma line 4 "/afs/cern.ch/user/p/psiddire/CMSSW_10_2_2/src/VivadoHLSProjects/HCAlTowerCode/HCALTower.h" 2
const uint8_t NCaloLayer1Eta=17;
const uint8_t NCaloLayer1Phi=4;
#pragma empty_line
#pragma empty_line
#pragma empty_line
void TowerPeaks(uint16_t towerET[17][4], uint16_t TowerPhi[30], uint16_t TowerEta[30]);
#pragma line 2 "/afs/cern.ch/user/p/psiddire/CMSSW_10_2_2/src/VivadoHLSProjects/HCAlTowerCode/HCALTower.cpp" 2
void bitonic_1_16(uint16_t Cluster_1_Deposits[16], uint16_t Cluster_1_Eta[16], uint16_t Cluster_1_Phi[16])
{
  int temp;
#pragma empty_line
  for(int i=0;i<8;i++)
  {
#pragma HLS unroll
  if(Cluster_1_Deposits[i]<Cluster_1_Deposits[i+8])
    {
      temp=Cluster_1_Deposits[i+8];
      Cluster_1_Deposits[i+8]=Cluster_1_Deposits[i];
      Cluster_1_Deposits[i]=temp;
      temp=Cluster_1_Eta[i];
        Cluster_1_Eta[i]=Cluster_1_Eta[i+8];
        Cluster_1_Eta[i+8]=temp;
        temp=Cluster_1_Phi[i];
        Cluster_1_Phi[i]=Cluster_1_Phi[i+8];
        Cluster_1_Phi[i+8]=temp;
    }
#pragma empty_line
    }
#pragma empty_line
#pragma empty_line
   for(int i=0;i<4;i++)
  {
#pragma HLS unroll
  if(Cluster_1_Deposits[i]<Cluster_1_Deposits[i+4])
    {
      temp=Cluster_1_Deposits[i+4];
      Cluster_1_Deposits[i+4]=Cluster_1_Deposits[i];
      Cluster_1_Deposits[i]=temp;
      temp=Cluster_1_Eta[i];
        Cluster_1_Eta[i]=Cluster_1_Eta[i+4];
        Cluster_1_Eta[i+4]=temp;
        temp=Cluster_1_Phi[i];
        Cluster_1_Phi[i]=Cluster_1_Phi[i+4];
        Cluster_1_Phi[i+4]=temp;
    }
    }
   for(int i=8;i<12;i++)
  {
#pragma HLS unroll
  if(Cluster_1_Deposits[i]<Cluster_1_Deposits[i+4])
    {
      temp=Cluster_1_Deposits[i+4];
      Cluster_1_Deposits[i+4]=Cluster_1_Deposits[i];
      Cluster_1_Deposits[i]=temp;
      temp=Cluster_1_Eta[i];
        Cluster_1_Eta[i]=Cluster_1_Eta[i+4];
        Cluster_1_Eta[i+4]=temp;
        temp=Cluster_1_Phi[i];
        Cluster_1_Phi[i]=Cluster_1_Phi[i+4];
        Cluster_1_Phi[i+4]=temp;
    }
    }
#pragma empty_line
#pragma empty_line
  for(int i=0;i<13;i=i+4)
  {
#pragma HLS unroll
  if(Cluster_1_Deposits[i]<Cluster_1_Deposits[i+2])
    {
      temp=Cluster_1_Deposits[i+2];
      Cluster_1_Deposits[i+2]=Cluster_1_Deposits[i];
      Cluster_1_Deposits[i]=temp;
      temp=Cluster_1_Eta[i];
          Cluster_1_Eta[i]=Cluster_1_Eta[i+2];
          Cluster_1_Eta[i+2]=temp;
          temp=Cluster_1_Phi[i];
          Cluster_1_Phi[i]=Cluster_1_Phi[i+2];
          Cluster_1_Phi[i+2]=temp;
    }
#pragma empty_line
    if(Cluster_1_Deposits[i+1]<Cluster_1_Deposits[i+3])
    {
      temp=Cluster_1_Deposits[i+3];
      Cluster_1_Deposits[i+3]=Cluster_1_Deposits[i+1];
      Cluster_1_Deposits[i+1]=temp;
       temp=Cluster_1_Eta[i+1];
              Cluster_1_Eta[i+1]=Cluster_1_Eta[i+3];
              Cluster_1_Eta[i+3]=temp;
              temp=Cluster_1_Phi[i+1];
              Cluster_1_Phi[i+1]=Cluster_1_Phi[i+3];
              Cluster_1_Phi[i+3]=temp;
    }
    }
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
  for(int i=0;i<15;i=i+2)
  {
#pragma HLS unroll
  if(Cluster_1_Deposits[i]<Cluster_1_Deposits[i+1])
    {
      temp=Cluster_1_Deposits[i+1];
      Cluster_1_Deposits[i+1]=Cluster_1_Deposits[i];
      Cluster_1_Deposits[i]=temp;
       temp=Cluster_1_Eta[i];
              Cluster_1_Eta[i]=Cluster_1_Eta[i+1];
              Cluster_1_Eta[i+1]=temp;
              temp=Cluster_1_Phi[i];
              Cluster_1_Phi[i]=Cluster_1_Phi[i+1];
              Cluster_1_Phi[i+1]=temp;
    }
#pragma empty_line
    }
#pragma empty_line
#pragma empty_line
#pragma empty_line
  }
#pragma empty_line
void bitonic_1_8(uint16_t Cluster_1_Deposits[16], uint16_t Cluster_1_Eta[16], uint16_t Cluster_1_Phi[16])
{
  int temp;
#pragma empty_line
  for(int i=0;i<4;i++)
  {
#pragma HLS unroll
    if(Cluster_1_Deposits[i]<Cluster_1_Deposits[i+4])
      {
        temp=Cluster_1_Deposits[i+4];
        Cluster_1_Deposits[i+4]=Cluster_1_Deposits[i];
        Cluster_1_Deposits[i]=temp;
        temp=Cluster_1_Eta[i];
        Cluster_1_Eta[i]=Cluster_1_Eta[i+4];
        Cluster_1_Eta[i+4]=temp;
        temp=Cluster_1_Phi[i];
        Cluster_1_Phi[i]=Cluster_1_Phi[i+4];
        Cluster_1_Phi[i+4]=temp;
      }
  }
  for(int i=8;i<12;i++)
  {
#pragma HLS unroll
    if(Cluster_1_Deposits[i]>Cluster_1_Deposits[i+4])
      {
        temp=Cluster_1_Deposits[i+4];
        Cluster_1_Deposits[i+4]=Cluster_1_Deposits[i];
        Cluster_1_Deposits[i]=temp;
        temp=Cluster_1_Eta[i];
        Cluster_1_Eta[i]=Cluster_1_Eta[i+4];
        Cluster_1_Eta[i+4]=temp;
        temp=Cluster_1_Phi[i];
        Cluster_1_Phi[i]=Cluster_1_Phi[i+4];
        Cluster_1_Phi[i+4]=temp;
      }
  }
#pragma empty_line
#pragma empty_line
  for(int i=0;i<5;i=i+4)
  {
#pragma HLS unroll
    if(Cluster_1_Deposits[i]<Cluster_1_Deposits[i+2])
      {
        temp=Cluster_1_Deposits[i+2];
        Cluster_1_Deposits[i+2]=Cluster_1_Deposits[i];
        Cluster_1_Deposits[i]=temp;
        temp=Cluster_1_Eta[i+2];
        Cluster_1_Eta[i+2]=Cluster_1_Eta[i];
        Cluster_1_Eta[i]=temp;
        temp=Cluster_1_Phi[i+2];
        Cluster_1_Phi[i+2]=Cluster_1_Phi[i];
        Cluster_1_Phi[i]=temp;
      }
    if(Cluster_1_Deposits[i+1]<Cluster_1_Deposits[i+3])
      {
        temp=Cluster_1_Deposits[i+3];
        Cluster_1_Deposits[i+3]=Cluster_1_Deposits[i+1];
        Cluster_1_Deposits[i+1]=temp;
          temp=Cluster_1_Eta[i+1];
        Cluster_1_Eta[i+1]=Cluster_1_Eta[i+3];
        Cluster_1_Eta[i+3]=temp;
        temp=Cluster_1_Phi[i+1];
        Cluster_1_Phi[i+1]=Cluster_1_Phi[i+3];
        Cluster_1_Phi[i+3]=temp;
      }
  }
  for(int i=8;i<13;i=i+4)
  {
#pragma HLS unroll
    if(Cluster_1_Deposits[i]>Cluster_1_Deposits[i+2])
      {
        temp=Cluster_1_Deposits[i+2];
        Cluster_1_Deposits[i+2]=Cluster_1_Deposits[i];
        Cluster_1_Deposits[i]=temp;
        temp=Cluster_1_Eta[i+2];
        Cluster_1_Eta[i+2]=Cluster_1_Eta[i];
        Cluster_1_Eta[i]=temp;
        temp=Cluster_1_Phi[i+2];
        Cluster_1_Phi[i+2]=Cluster_1_Phi[i];
        Cluster_1_Phi[i]=temp;
      }
    if(Cluster_1_Deposits[i+1]>Cluster_1_Deposits[i+3])
      {
        temp=Cluster_1_Deposits[i+3];
        Cluster_1_Deposits[i+3]=Cluster_1_Deposits[i+1];
        Cluster_1_Deposits[i+1]=temp;
         temp=Cluster_1_Eta[i+1];
        Cluster_1_Eta[i+1]=Cluster_1_Eta[i+3];
        Cluster_1_Eta[i+3]=temp;
        temp=Cluster_1_Phi[i+1];
        Cluster_1_Phi[i+1]=Cluster_1_Phi[i+3];
        Cluster_1_Phi[i+3]=temp;
      }
  }
#pragma empty_line
  for(int i=0;i<7;i=i+2)
  {
#pragma HLS unroll
    if(Cluster_1_Deposits[i]<Cluster_1_Deposits[i+1])
      {
        temp=Cluster_1_Deposits[i+1];
        Cluster_1_Deposits[i+1]=Cluster_1_Deposits[i];
        Cluster_1_Deposits[i]=temp;
          temp=Cluster_1_Eta[i];
          Cluster_1_Eta[i]=Cluster_1_Eta[i+1];
          Cluster_1_Eta[i+1]=temp;
          temp=Cluster_1_Phi[i];
          Cluster_1_Phi[i]=Cluster_1_Phi[i+1];
          Cluster_1_Phi[i+1]=temp;
      }
  }
  for(int i=8;i<15;i=i+2)
  {
#pragma HLS unroll
    if(Cluster_1_Deposits[i]>Cluster_1_Deposits[i+1])
      {
        temp=Cluster_1_Deposits[i+1];
        Cluster_1_Deposits[i+1]=Cluster_1_Deposits[i];
        Cluster_1_Deposits[i]=temp;
          temp=Cluster_1_Eta[i];
          Cluster_1_Eta[i]=Cluster_1_Eta[i+1];
          Cluster_1_Eta[i+1]=temp;
          temp=Cluster_1_Phi[i];
          Cluster_1_Phi[i]=Cluster_1_Phi[i+1];
          Cluster_1_Phi[i+1]=temp;
      }
  }
 bitonic_1_16(Cluster_1_Deposits,Cluster_1_Eta,Cluster_1_Phi);
}
void bitonic_1_4(uint16_t Cluster_1_Deposits[16], uint16_t Cluster_1_Eta[16], uint16_t Cluster_1_Phi[16])
{
  int temp;
#pragma empty_line
#pragma empty_line
  for(int i=0;i<2;i++)
  {
#pragma HLS unroll
      if(Cluster_1_Deposits[i]<Cluster_1_Deposits[i+2])
              {temp=Cluster_1_Deposits[i];
              Cluster_1_Deposits[i]=Cluster_1_Deposits[i+2];
              Cluster_1_Deposits[i+2]=temp;
               temp=Cluster_1_Eta[i];
              Cluster_1_Eta[i]=Cluster_1_Eta[i+2];
              Cluster_1_Eta[i+2]=temp;
              temp=Cluster_1_Phi[i];
              Cluster_1_Phi[i]=Cluster_1_Phi[i+2];
              Cluster_1_Phi[i+2]=temp;
              }
  }
  for(int i=4;i<6;i++)
  {
#pragma HLS unroll
    if(Cluster_1_Deposits[i]>Cluster_1_Deposits[i+2])
              {temp=Cluster_1_Deposits[i];
              Cluster_1_Deposits[i]=Cluster_1_Deposits[i+2];
              Cluster_1_Deposits[i+2]=temp;
               temp=Cluster_1_Eta[i];
              Cluster_1_Eta[i]=Cluster_1_Eta[i+2];
              Cluster_1_Eta[i+2]=temp;
              temp=Cluster_1_Phi[i];
              Cluster_1_Phi[i]=Cluster_1_Phi[i+2];
              Cluster_1_Phi[i+2]=temp;
              }
  }
  for(int i=8;i<10;i++)
  {
#pragma HLS unroll
      if(Cluster_1_Deposits[i]<Cluster_1_Deposits[i+2])
              {temp=Cluster_1_Deposits[i];
              Cluster_1_Deposits[i]=Cluster_1_Deposits[i+2];
              Cluster_1_Deposits[i+2]=temp;
               temp=Cluster_1_Eta[i];
              Cluster_1_Eta[i]=Cluster_1_Eta[i+2];
              Cluster_1_Eta[i+2]=temp;
              temp=Cluster_1_Phi[i];
              Cluster_1_Phi[i]=Cluster_1_Phi[i+2];
              Cluster_1_Phi[i+2]=temp;
              }
  }
  for(int i=12;i<14;i++)
  {
#pragma HLS unroll
      if(Cluster_1_Deposits[i]>Cluster_1_Deposits[i+2])
              {temp=Cluster_1_Deposits[i];
              Cluster_1_Deposits[i]=Cluster_1_Deposits[i+2];
              Cluster_1_Deposits[i+2]=temp;
               temp=Cluster_1_Eta[i];
              Cluster_1_Eta[i]=Cluster_1_Eta[i+2];
              Cluster_1_Eta[i+2]=temp;
              temp=Cluster_1_Phi[i];
              Cluster_1_Phi[i]=Cluster_1_Phi[i+2];
              Cluster_1_Phi[i+2]=temp;
              }
  }
#pragma empty_line
  for(int i=0;i<3;i=i+2)
  {
#pragma HLS unroll
    if(Cluster_1_Deposits[i]<Cluster_1_Deposits[i+1])
              {temp=Cluster_1_Deposits[i];
              Cluster_1_Deposits[i]=Cluster_1_Deposits[i+1];
              Cluster_1_Deposits[i+1]=temp;
                temp=Cluster_1_Eta[i];
              Cluster_1_Eta[i]=Cluster_1_Eta[i+1];
              Cluster_1_Eta[i+1]=temp;
              temp=Cluster_1_Phi[i];
              Cluster_1_Phi[i]=Cluster_1_Phi[i+1];
              Cluster_1_Phi[i+1]=temp;
              }
  }
  for(int i=4;i<7;i=i+2)
  {
#pragma HLS unroll
    if(Cluster_1_Deposits[i]>Cluster_1_Deposits[i+1])
              {temp=Cluster_1_Deposits[i];
              Cluster_1_Deposits[i]=Cluster_1_Deposits[i+1];
              Cluster_1_Deposits[i+1]=temp;
                temp=Cluster_1_Eta[i];
              Cluster_1_Eta[i]=Cluster_1_Eta[i+1];
              Cluster_1_Eta[i+1]=temp;
              temp=Cluster_1_Phi[i];
              Cluster_1_Phi[i]=Cluster_1_Phi[i+1];
              Cluster_1_Phi[i+1]=temp;
              }
  }
  for(int i=8;i<11;i=i+2)
  {
#pragma HLS unroll
    if(Cluster_1_Deposits[i]<Cluster_1_Deposits[i+1])
              {temp=Cluster_1_Deposits[i];
              Cluster_1_Deposits[i]=Cluster_1_Deposits[i+1];
              Cluster_1_Deposits[i+1]=temp;
                temp=Cluster_1_Eta[i];
              Cluster_1_Eta[i]=Cluster_1_Eta[i+1];
              Cluster_1_Eta[i+1]=temp;
              temp=Cluster_1_Phi[i];
              Cluster_1_Phi[i]=Cluster_1_Phi[i+1];
              Cluster_1_Phi[i+1]=temp;
              }
  }
  for(int i=12;i<15;i=i+2)
  {
#pragma HLS unroll
    if(Cluster_1_Deposits[i]>Cluster_1_Deposits[i+1])
              {temp=Cluster_1_Deposits[i];
              Cluster_1_Deposits[i]=Cluster_1_Deposits[i+1];
              Cluster_1_Deposits[i+1]=temp;
                temp=Cluster_1_Eta[i];
              Cluster_1_Eta[i]=Cluster_1_Eta[i+1];
              Cluster_1_Eta[i+1]=temp;
              temp=Cluster_1_Phi[i];
              Cluster_1_Phi[i]=Cluster_1_Phi[i+1];
              Cluster_1_Phi[i+1]=temp;
              }
  }
#pragma empty_line
  bitonic_1_8(Cluster_1_Deposits,Cluster_1_Eta,Cluster_1_Phi);
#pragma empty_line
}
void bitonic32(uint16_t ClusterDeposits[32], uint16_t ClusterEta[32], uint16_t ClusterPhi[32])
{
  int temp;
#pragma empty_line
for(int i=0;i<16;i++)
{
#pragma HLS unroll
    if(ClusterDeposits[i]<ClusterDeposits[i+16])
    {
      temp=ClusterDeposits[i+16];
      ClusterDeposits[i+16]=ClusterDeposits[i];
      ClusterDeposits[i]=temp;
      temp=ClusterEta[i];
        ClusterEta[i]=ClusterEta[i+16];
        ClusterEta[i+16]=temp;
        temp=ClusterPhi[i];
        ClusterPhi[i]=ClusterPhi[i+16];
        ClusterPhi[i+16]=temp;
    }
  }
#pragma empty_line
  for(int i=0;i<8;i++)
  {
#pragma HLS unroll
    if(ClusterDeposits[i]<ClusterDeposits[i+8])
        {
          temp=ClusterDeposits[i+8];
          ClusterDeposits[i+8]=ClusterDeposits[i];
          ClusterDeposits[i]=temp;
          temp=ClusterEta[i];
        ClusterEta[i]=ClusterEta[i+8];
        ClusterEta[i+8]=temp;
        temp=ClusterPhi[i];
        ClusterPhi[i]=ClusterPhi[i+8];
        ClusterPhi[i+8]=temp;
        }
  }
  for(int i=16;i<24;i++)
    {
#pragma HLS unroll
      if(ClusterDeposits[i]<ClusterDeposits[i+8])
          {
            temp=ClusterDeposits[i+8];
            ClusterDeposits[i+8]=ClusterDeposits[i];
            ClusterDeposits[i]=temp;
            temp=ClusterEta[i];
        ClusterEta[i]=ClusterEta[i+8];
        ClusterEta[i+8]=temp;
        temp=ClusterPhi[i];
        ClusterPhi[i]=ClusterPhi[i+8];
        ClusterPhi[i+8]=temp;
          }
    }
#pragma empty_line
#pragma empty_line
#pragma empty_line
 for(int i=0;i<4;i++)
  {
#pragma HLS unroll
  if(ClusterDeposits[i]<ClusterDeposits[i+4])
    {
      temp=ClusterDeposits[i+4];
      ClusterDeposits[i+4]=ClusterDeposits[i];
      ClusterDeposits[i]=temp;
      temp=ClusterEta[i];
        ClusterEta[i]=ClusterEta[i+4];
        ClusterEta[i+4]=temp;
        temp=ClusterPhi[i];
        ClusterPhi[i]=ClusterPhi[i+4];
        ClusterPhi[i+4]=temp;
    }
    }
 for(int i=8;i<12;i++)
      {
#pragma HLS unroll
      if(ClusterDeposits[i]<ClusterDeposits[i+4])
        {
          temp=ClusterDeposits[i+4];
          ClusterDeposits[i+4]=ClusterDeposits[i];
          ClusterDeposits[i]=temp;
          temp=ClusterEta[i];
        ClusterEta[i]=ClusterEta[i+4];
        ClusterEta[i+4]=temp;
        temp=ClusterPhi[i];
        ClusterPhi[i]=ClusterPhi[i+4];
        ClusterPhi[i+4]=temp;
        }
        }
 for(int i=16;i<20;i++)
      {
#pragma HLS unroll
      if(ClusterDeposits[i]<ClusterDeposits[i+4])
        {
          temp=ClusterDeposits[i+4];
          ClusterDeposits[i+4]=ClusterDeposits[i];
          ClusterDeposits[i]=temp;
          temp=ClusterEta[i];
        ClusterEta[i]=ClusterEta[i+4];
        ClusterEta[i+4]=temp;
        temp=ClusterPhi[i];
        ClusterPhi[i]=ClusterPhi[i+4];
        ClusterPhi[i+4]=temp;
        }
        }
 for(int i=24;i<28;i++)
      {
#pragma HLS unroll
      if(ClusterDeposits[i]<ClusterDeposits[i+4])
        {
          temp=ClusterDeposits[i+4];
          ClusterDeposits[i+4]=ClusterDeposits[i];
          ClusterDeposits[i]=temp;
          temp=ClusterEta[i];
        ClusterEta[i]=ClusterEta[i+4];
        ClusterEta[i+4]=temp;
        temp=ClusterPhi[i];
        ClusterPhi[i]=ClusterPhi[i+4];
        ClusterPhi[i+4]=temp;
        }
        }
#pragma empty_line
#pragma empty_line
 for(int i=0;i<29;i=i+4)
            {
#pragma HLS unroll
      if(ClusterDeposits[i]<ClusterDeposits[i+2])
          {
              temp=ClusterDeposits[i+2];
              ClusterDeposits[i+2]=ClusterDeposits[i];
              ClusterDeposits[i]=temp;
               temp=ClusterEta[i];
                ClusterEta[i]=ClusterEta[i+2];
                ClusterEta[i+2]=temp;
                temp=ClusterPhi[i];
                ClusterPhi[i]=ClusterPhi[i+2];
                ClusterPhi[i+2]=temp;
          }
          if(ClusterDeposits[i+1]<ClusterDeposits[i+3])
          {
              temp=ClusterDeposits[i+3];
              ClusterDeposits[i+3]=ClusterDeposits[i+1];
              ClusterDeposits[i+1]=temp;
              temp=ClusterEta[i+1];
               ClusterEta[i+1]=ClusterEta[i+3];
               ClusterEta[i+3]=temp;
               temp=ClusterPhi[i+1];
               ClusterPhi[i+1]=ClusterPhi[i+3];
               ClusterPhi[i+3]=temp;
          }
          }
#pragma empty_line
#pragma empty_line
     for(int i=0;i<31;i=i+2)
      {
#pragma HLS unroll
      if(ClusterDeposits[i]<ClusterDeposits[i+1])
        {
          temp=ClusterDeposits[i+1];
          ClusterDeposits[i+1]=ClusterDeposits[i];
          ClusterDeposits[i]=temp;
          temp=ClusterEta[i];
              ClusterEta[i]=ClusterEta[i+1];
              ClusterEta[i+1]=temp;
              temp=ClusterPhi[i];
              ClusterPhi[i]=ClusterPhi[i+1];
              ClusterPhi[i+1]=temp;
        }
      }
#pragma empty_line
  }
void bitonic16(uint16_t ClusterDeposits[32], uint16_t ClusterEta[32], uint16_t ClusterPhi[32])
{
  int temp;
#pragma empty_line
  for(int i=0;i<8;i++)
  {
#pragma HLS unroll
  if(ClusterDeposits[i]<ClusterDeposits[i+8])
    {
      temp=ClusterDeposits[i+8];
      ClusterDeposits[i+8]=ClusterDeposits[i];
      ClusterDeposits[i]=temp;
      temp=ClusterEta[i];
        ClusterEta[i]=ClusterEta[i+8];
        ClusterEta[i+8]=temp;
        temp=ClusterPhi[i];
        ClusterPhi[i]=ClusterPhi[i+8];
        ClusterPhi[i+8]=temp;
    }
#pragma empty_line
    }
#pragma empty_line
  for(int i=16;i<24;i++)
  {
#pragma HLS unroll
  if(ClusterDeposits[i]>ClusterDeposits[i+8])
    {
      temp=ClusterDeposits[i+8];
      ClusterDeposits[i+8]=ClusterDeposits[i];
      ClusterDeposits[i]=temp;
      temp=ClusterEta[i];
        ClusterEta[i]=ClusterEta[i+8];
        ClusterEta[i+8]=temp;
        temp=ClusterPhi[i];
        ClusterPhi[i]=ClusterPhi[i+8];
        ClusterPhi[i+8]=temp;
    }
#pragma empty_line
    }
   for(int i=0;i<4;i++)
  {
#pragma HLS unroll
  if(ClusterDeposits[i]<ClusterDeposits[i+4])
    {
      temp=ClusterDeposits[i+4];
      ClusterDeposits[i+4]=ClusterDeposits[i];
      ClusterDeposits[i]=temp;
      temp=ClusterEta[i];
        ClusterEta[i]=ClusterEta[i+4];
        ClusterEta[i+4]=temp;
        temp=ClusterPhi[i];
        ClusterPhi[i]=ClusterPhi[i+4];
        ClusterPhi[i+4]=temp;
    }
    }
   for(int i=8;i<12;i++)
  {
#pragma HLS unroll
  if(ClusterDeposits[i]<ClusterDeposits[i+4])
    {
      temp=ClusterDeposits[i+4];
      ClusterDeposits[i+4]=ClusterDeposits[i];
      ClusterDeposits[i]=temp;
      temp=ClusterEta[i];
        ClusterEta[i]=ClusterEta[i+4];
        ClusterEta[i+4]=temp;
        temp=ClusterPhi[i];
        ClusterPhi[i]=ClusterPhi[i+4];
        ClusterPhi[i+4]=temp;
    }
    }
   for(int i=16;i<20;i++)
  {
#pragma HLS unroll
  if(ClusterDeposits[i]>ClusterDeposits[i+4])
    {
      temp=ClusterDeposits[i+4];
      ClusterDeposits[i+4]=ClusterDeposits[i];
      ClusterDeposits[i]=temp;
      temp=ClusterEta[i];
        ClusterEta[i]=ClusterEta[i+4];
        ClusterEta[i+4]=temp;
        temp=ClusterPhi[i];
        ClusterPhi[i]=ClusterPhi[i+4];
        ClusterPhi[i+4]=temp;
    }
    }
  for(int i=24;i<28;i++)
  {
#pragma HLS unroll
  if(ClusterDeposits[i]>ClusterDeposits[i+4])
    {
      temp=ClusterDeposits[i+4];
      ClusterDeposits[i+4]=ClusterDeposits[i];
      ClusterDeposits[i]=temp;
      temp=ClusterEta[i];
        ClusterEta[i]=ClusterEta[i+4];
        ClusterEta[i+4]=temp;
        temp=ClusterPhi[i];
        ClusterPhi[i]=ClusterPhi[i+4];
        ClusterPhi[i+4]=temp;
    }
    }
#pragma empty_line
  for(int i=0;i<13;i=i+4)
  {
#pragma HLS unroll
  if(ClusterDeposits[i]<ClusterDeposits[i+2])
    {
      temp=ClusterDeposits[i+2];
      ClusterDeposits[i+2]=ClusterDeposits[i];
      ClusterDeposits[i]=temp;
      temp=ClusterEta[i];
          ClusterEta[i]=ClusterEta[i+2];
          ClusterEta[i+2]=temp;
          temp=ClusterPhi[i];
          ClusterPhi[i]=ClusterPhi[i+2];
          ClusterPhi[i+2]=temp;
    }
#pragma empty_line
    if(ClusterDeposits[i+1]<ClusterDeposits[i+3])
    {
      temp=ClusterDeposits[i+3];
      ClusterDeposits[i+3]=ClusterDeposits[i+1];
      ClusterDeposits[i+1]=temp;
       temp=ClusterEta[i+1];
              ClusterEta[i+1]=ClusterEta[i+3];
              ClusterEta[i+3]=temp;
              temp=ClusterPhi[i+1];
              ClusterPhi[i+1]=ClusterPhi[i+3];
              ClusterPhi[i+3]=temp;
    }
    }
  for(int i=16;i<29;i=i+4)
  {
#pragma HLS unroll
  if(ClusterDeposits[i]>ClusterDeposits[i+2])
    {
      temp=ClusterDeposits[i+2];
      ClusterDeposits[i+2]=ClusterDeposits[i];
      ClusterDeposits[i]=temp;
      temp=ClusterEta[i];
          ClusterEta[i]=ClusterEta[i+2];
          ClusterEta[i+2]=temp;
          temp=ClusterPhi[i];
          ClusterPhi[i]=ClusterPhi[i+2];
          ClusterPhi[i+2]=temp;
    }
#pragma empty_line
    if(ClusterDeposits[i+1]>ClusterDeposits[i+3])
    {
      temp=ClusterDeposits[i+3];
      ClusterDeposits[i+3]=ClusterDeposits[i+1];
      ClusterDeposits[i+1]=temp;
       temp=ClusterEta[i+1];
              ClusterEta[i+1]=ClusterEta[i+3];
              ClusterEta[i+3]=temp;
              temp=ClusterPhi[i+1];
              ClusterPhi[i+1]=ClusterPhi[i+3];
              ClusterPhi[i+3]=temp;
    }
    }
#pragma empty_line
#pragma empty_line
#pragma empty_line
  for(int i=0;i<15;i=i+2)
  {
#pragma HLS unroll
  if(ClusterDeposits[i]<ClusterDeposits[i+1])
    {
      temp=ClusterDeposits[i+1];
      ClusterDeposits[i+1]=ClusterDeposits[i];
      ClusterDeposits[i]=temp;
       temp=ClusterEta[i];
              ClusterEta[i]=ClusterEta[i+1];
              ClusterEta[i+1]=temp;
              temp=ClusterPhi[i];
              ClusterPhi[i]=ClusterPhi[i+1];
              ClusterPhi[i+1]=temp;
    }
#pragma empty_line
    }
  for(int i=16;i<31;i=i+2)
  {
#pragma HLS unroll
  if(ClusterDeposits[i]>ClusterDeposits[i+1])
    {
      temp=ClusterDeposits[i+1];
      ClusterDeposits[i+1]=ClusterDeposits[i];
      ClusterDeposits[i]=temp;
       temp=ClusterEta[i];
              ClusterEta[i]=ClusterEta[i+1];
              ClusterEta[i+1]=temp;
              temp=ClusterPhi[i];
              ClusterPhi[i]=ClusterPhi[i+1];
              ClusterPhi[i+1]=temp;
    }
#pragma empty_line
    }
#pragma empty_line
#pragma empty_line
bitonic32(ClusterDeposits,ClusterEta,ClusterPhi);
  }
#pragma empty_line
void bitonic8(uint16_t ClusterDeposits[32], uint16_t ClusterEta[32], uint16_t ClusterPhi[32])
{
  int temp;
#pragma empty_line
  for(int i=0;i<4;i++)
  {
#pragma HLS unroll
    if(ClusterDeposits[i]<ClusterDeposits[i+4])
      {
        temp=ClusterDeposits[i+4];
        ClusterDeposits[i+4]=ClusterDeposits[i];
        ClusterDeposits[i]=temp;
        temp=ClusterEta[i];
        ClusterEta[i]=ClusterEta[i+4];
        ClusterEta[i+4]=temp;
        temp=ClusterPhi[i];
        ClusterPhi[i]=ClusterPhi[i+4];
        ClusterPhi[i+4]=temp;
      }
  }
  for(int i=8;i<12;i++)
  {
#pragma HLS unroll
    if(ClusterDeposits[i]>ClusterDeposits[i+4])
      {
        temp=ClusterDeposits[i+4];
        ClusterDeposits[i+4]=ClusterDeposits[i];
        ClusterDeposits[i]=temp;
        temp=ClusterEta[i];
        ClusterEta[i]=ClusterEta[i+4];
        ClusterEta[i+4]=temp;
        temp=ClusterPhi[i];
        ClusterPhi[i]=ClusterPhi[i+4];
        ClusterPhi[i+4]=temp;
      }
  }
  for(int i=16;i<20;i++)
  {
#pragma HLS unroll
    if(ClusterDeposits[i]<ClusterDeposits[i+4])
      {
        temp=ClusterDeposits[i+4];
        ClusterDeposits[i+4]=ClusterDeposits[i];
        ClusterDeposits[i]=temp;
        temp=ClusterEta[i];
        ClusterEta[i]=ClusterEta[i+4];
        ClusterEta[i+4]=temp;
        temp=ClusterPhi[i];
        ClusterPhi[i]=ClusterPhi[i+4];
        ClusterPhi[i+4]=temp;
      }
  }
  for(int i=24;i<28;i++)
  {
#pragma HLS unroll
    if(ClusterDeposits[i]>ClusterDeposits[i+4])
      {
        temp=ClusterDeposits[i+4];
        ClusterDeposits[i+4]=ClusterDeposits[i];
        ClusterDeposits[i]=temp;
        temp=ClusterEta[i];
        ClusterEta[i]=ClusterEta[i+4];
        ClusterEta[i+4]=temp;
        temp=ClusterPhi[i];
        ClusterPhi[i]=ClusterPhi[i+4];
        ClusterPhi[i+4]=temp;
      }
  }
#pragma empty_line
#pragma empty_line
  for(int i=0;i<5;i=i+4)
  {
#pragma HLS unroll
    if(ClusterDeposits[i]<ClusterDeposits[i+2])
      {
        temp=ClusterDeposits[i+2];
        ClusterDeposits[i+2]=ClusterDeposits[i];
        ClusterDeposits[i]=temp;
        temp=ClusterEta[i+2];
        ClusterEta[i+2]=ClusterEta[i];
        ClusterEta[i]=temp;
        temp=ClusterPhi[i+2];
        ClusterPhi[i+2]=ClusterPhi[i];
        ClusterPhi[i]=temp;
      }
    if(ClusterDeposits[i+1]<ClusterDeposits[i+3])
      {
        temp=ClusterDeposits[i+3];
        ClusterDeposits[i+3]=ClusterDeposits[i+1];
        ClusterDeposits[i+1]=temp;
          temp=ClusterEta[i+1];
        ClusterEta[i+1]=ClusterEta[i+3];
        ClusterEta[i+3]=temp;
        temp=ClusterPhi[i+1];
        ClusterPhi[i+1]=ClusterPhi[i+3];
        ClusterPhi[i+3]=temp;
      }
  }
  for(int i=8;i<13;i=i+4)
  {
#pragma HLS unroll
    if(ClusterDeposits[i]>ClusterDeposits[i+2])
      {
        temp=ClusterDeposits[i+2];
        ClusterDeposits[i+2]=ClusterDeposits[i];
        ClusterDeposits[i]=temp;
        temp=ClusterEta[i+2];
        ClusterEta[i+2]=ClusterEta[i];
        ClusterEta[i]=temp;
        temp=ClusterPhi[i+2];
        ClusterPhi[i+2]=ClusterPhi[i];
        ClusterPhi[i]=temp;
      }
    if(ClusterDeposits[i+1]>ClusterDeposits[i+3])
      {
        temp=ClusterDeposits[i+3];
        ClusterDeposits[i+3]=ClusterDeposits[i+1];
        ClusterDeposits[i+1]=temp;
         temp=ClusterEta[i+1];
        ClusterEta[i+1]=ClusterEta[i+3];
        ClusterEta[i+3]=temp;
        temp=ClusterPhi[i+1];
        ClusterPhi[i+1]=ClusterPhi[i+3];
        ClusterPhi[i+3]=temp;
      }
  }
  for(int i=16;i<21;i=i+4)
  {
#pragma HLS unroll
    if(ClusterDeposits[i]<ClusterDeposits[i+2])
      {
        temp=ClusterDeposits[i+2];
        ClusterDeposits[i+2]=ClusterDeposits[i];
        ClusterDeposits[i]=temp;
        temp=ClusterEta[i+2];
        ClusterEta[i+2]=ClusterEta[i];
        ClusterEta[i]=temp;
        temp=ClusterPhi[i+2];
        ClusterPhi[i+2]=ClusterPhi[i];
        ClusterPhi[i]=temp;
      }
    if(ClusterDeposits[i+1]<ClusterDeposits[i+3])
      {
        temp=ClusterDeposits[i+3];
        ClusterDeposits[i+3]=ClusterDeposits[i+1];
        ClusterDeposits[i+1]=temp;
         temp=ClusterEta[i+1];
        ClusterEta[i+1]=ClusterEta[i+3];
        ClusterEta[i+3]=temp;
        temp=ClusterPhi[i+1];
        ClusterPhi[i+1]=ClusterPhi[i+3];
        ClusterPhi[i+3]=temp;
      }
  }
  for(int i=24;i<29;i=i+4)
  {
#pragma HLS unroll
    if(ClusterDeposits[i]>ClusterDeposits[i+2])
      {
        temp=ClusterDeposits[i+2];
        ClusterDeposits[i+2]=ClusterDeposits[i];
        ClusterDeposits[i]=temp;
        temp=ClusterEta[i+2];
        ClusterEta[i+2]=ClusterEta[i];
        ClusterEta[i]=temp;
        temp=ClusterPhi[i+2];
        ClusterPhi[i+2]=ClusterPhi[i];
        ClusterPhi[i]=temp;
      }
#pragma empty_line
    if(ClusterDeposits[i+1]>ClusterDeposits[i+3])
      {
        temp=ClusterDeposits[i+3];
        ClusterDeposits[i+3]=ClusterDeposits[i+1];
        ClusterDeposits[i+1]=temp;
        temp=ClusterEta[i+1];
        ClusterEta[i+1]=ClusterEta[i+3];
        ClusterEta[i+3]=temp;
        temp=ClusterPhi[i+1];
        ClusterPhi[i+1]=ClusterPhi[i+3];
        ClusterPhi[i+3]=temp;
      }
#pragma empty_line
  }
#pragma empty_line
#pragma empty_line
  for(int i=0;i<7;i=i+2)
  {
#pragma HLS unroll
    if(ClusterDeposits[i]<ClusterDeposits[i+1])
      {
        temp=ClusterDeposits[i+1];
        ClusterDeposits[i+1]=ClusterDeposits[i];
        ClusterDeposits[i]=temp;
          temp=ClusterEta[i];
          ClusterEta[i]=ClusterEta[i+1];
          ClusterEta[i+1]=temp;
          temp=ClusterPhi[i];
          ClusterPhi[i]=ClusterPhi[i+1];
          ClusterPhi[i+1]=temp;
      }
  }
  for(int i=8;i<15;i=i+2)
  {
#pragma HLS unroll
    if(ClusterDeposits[i]>ClusterDeposits[i+1])
      {
        temp=ClusterDeposits[i+1];
        ClusterDeposits[i+1]=ClusterDeposits[i];
        ClusterDeposits[i]=temp;
          temp=ClusterEta[i];
          ClusterEta[i]=ClusterEta[i+1];
          ClusterEta[i+1]=temp;
          temp=ClusterPhi[i];
          ClusterPhi[i]=ClusterPhi[i+1];
          ClusterPhi[i+1]=temp;
      }
  }
  for(int i=16;i<23;i=i+2)
  {
#pragma HLS unroll
    if(ClusterDeposits[i]<ClusterDeposits[i+1])
      {
        temp=ClusterDeposits[i+1];
        ClusterDeposits[i+1]=ClusterDeposits[i];
        ClusterDeposits[i]=temp;
          temp=ClusterEta[i];
          ClusterEta[i]=ClusterEta[i+1];
          ClusterEta[i+1]=temp;
          temp=ClusterPhi[i];
          ClusterPhi[i]=ClusterPhi[i+1];
          ClusterPhi[i+1]=temp;
      }
  }
  for(int i=24;i<31;i=i+2)
  {
#pragma HLS unroll
    if(ClusterDeposits[i]>ClusterDeposits[i+1])
      {
        temp=ClusterDeposits[i+1];
        ClusterDeposits[i+1]=ClusterDeposits[i];
        ClusterDeposits[i]=temp;
         temp=ClusterEta[i];
          ClusterEta[i]=ClusterEta[i+1];
          ClusterEta[i+1]=temp;
          temp=ClusterPhi[i];
          ClusterPhi[i]=ClusterPhi[i+1];
          ClusterPhi[i+1]=temp;
      }
  }
#pragma empty_line
bitonic16(ClusterDeposits,ClusterEta,ClusterPhi);
}
void bitonic4(uint16_t ClusterDeposits[32], uint16_t ClusterEta[32], uint16_t ClusterPhi[32])
{
  int temp;
#pragma empty_line
#pragma empty_line
  for(int i=0;i<2;i++)
  {
#pragma HLS unroll
      if(ClusterDeposits[i]<ClusterDeposits[i+2])
              {temp=ClusterDeposits[i];
              ClusterDeposits[i]=ClusterDeposits[i+2];
              ClusterDeposits[i+2]=temp;
               temp=ClusterEta[i];
              ClusterEta[i]=ClusterEta[i+2];
              ClusterEta[i+2]=temp;
              temp=ClusterPhi[i];
              ClusterPhi[i]=ClusterPhi[i+2];
              ClusterPhi[i+2]=temp;
              }
  }
  for(int i=4;i<6;i++)
  {
#pragma HLS unroll
    if(ClusterDeposits[i]>ClusterDeposits[i+2])
              {temp=ClusterDeposits[i];
              ClusterDeposits[i]=ClusterDeposits[i+2];
              ClusterDeposits[i+2]=temp;
               temp=ClusterEta[i];
              ClusterEta[i]=ClusterEta[i+2];
              ClusterEta[i+2]=temp;
              temp=ClusterPhi[i];
              ClusterPhi[i]=ClusterPhi[i+2];
              ClusterPhi[i+2]=temp;
              }
  }
  for(int i=8;i<10;i++)
  {
#pragma HLS unroll
      if(ClusterDeposits[i]<ClusterDeposits[i+2])
              {temp=ClusterDeposits[i];
              ClusterDeposits[i]=ClusterDeposits[i+2];
              ClusterDeposits[i+2]=temp;
               temp=ClusterEta[i];
              ClusterEta[i]=ClusterEta[i+2];
              ClusterEta[i+2]=temp;
              temp=ClusterPhi[i];
              ClusterPhi[i]=ClusterPhi[i+2];
              ClusterPhi[i+2]=temp;
              }
  }
  for(int i=12;i<14;i++)
  {
#pragma HLS unroll
      if(ClusterDeposits[i]>ClusterDeposits[i+2])
              {temp=ClusterDeposits[i];
              ClusterDeposits[i]=ClusterDeposits[i+2];
              ClusterDeposits[i+2]=temp;
               temp=ClusterEta[i];
              ClusterEta[i]=ClusterEta[i+2];
              ClusterEta[i+2]=temp;
              temp=ClusterPhi[i];
              ClusterPhi[i]=ClusterPhi[i+2];
              ClusterPhi[i+2]=temp;
              }
  }
  for(int i=16;i<18;i++)
  {
#pragma HLS unroll
      if(ClusterDeposits[i]<ClusterDeposits[i+2])
              {temp=ClusterDeposits[i];
              ClusterDeposits[i]=ClusterDeposits[i+2];
              ClusterDeposits[i+2]=temp;
               temp=ClusterEta[i];
              ClusterEta[i]=ClusterEta[i+2];
              ClusterEta[i+2]=temp;
              temp=ClusterPhi[i];
              ClusterPhi[i]=ClusterPhi[i+2];
              ClusterPhi[i+2]=temp;
              }
  }
  for(int i=20;i<22;i++)
  {
#pragma HLS unroll
      if(ClusterDeposits[i]>ClusterDeposits[i+2])
              {temp=ClusterDeposits[i];
              ClusterDeposits[i]=ClusterDeposits[i+2];
              ClusterDeposits[i+2]=temp;
               temp=ClusterEta[i];
              ClusterEta[i]=ClusterEta[i+2];
              ClusterEta[i+2]=temp;
              temp=ClusterPhi[i];
              ClusterPhi[i]=ClusterPhi[i+2];
              ClusterPhi[i+2]=temp;
              }
  }
  for(int i=24;i<26;i++)
  {
#pragma HLS unroll
      if(ClusterDeposits[i]<ClusterDeposits[i+2])
              {temp=ClusterDeposits[i];
              ClusterDeposits[i]=ClusterDeposits[i+2];
              ClusterDeposits[i+2]=temp;
               temp=ClusterEta[i];
              ClusterEta[i]=ClusterEta[i+2];
              ClusterEta[i+2]=temp;
              temp=ClusterPhi[i];
              ClusterPhi[i]=ClusterPhi[i+2];
              ClusterPhi[i+2]=temp;
              }
  }
  for(int i=28;i<30;i++)
  {
#pragma HLS unroll
      if(ClusterDeposits[i]>ClusterDeposits[i+2])
              {temp=ClusterDeposits[i];
              ClusterDeposits[i]=ClusterDeposits[i+2];
              ClusterDeposits[i+2]=temp;
               temp=ClusterEta[i];
              ClusterEta[i]=ClusterEta[i+2];
              ClusterEta[i+2]=temp;
              temp=ClusterPhi[i];
              ClusterPhi[i]=ClusterPhi[i+2];
              ClusterPhi[i+2]=temp;
              }
  }
#pragma empty_line
  for(int i=0;i<3;i=i+2)
  {
#pragma HLS unroll
    if(ClusterDeposits[i]<ClusterDeposits[i+1])
              {temp=ClusterDeposits[i];
              ClusterDeposits[i]=ClusterDeposits[i+1];
              ClusterDeposits[i+1]=temp;
                temp=ClusterEta[i];
              ClusterEta[i]=ClusterEta[i+1];
              ClusterEta[i+1]=temp;
              temp=ClusterPhi[i];
              ClusterPhi[i]=ClusterPhi[i+1];
              ClusterPhi[i+1]=temp;
              }
  }
  for(int i=4;i<7;i=i+2)
  {
#pragma HLS unroll
    if(ClusterDeposits[i]>ClusterDeposits[i+1])
              {temp=ClusterDeposits[i];
              ClusterDeposits[i]=ClusterDeposits[i+1];
              ClusterDeposits[i+1]=temp;
                temp=ClusterEta[i];
              ClusterEta[i]=ClusterEta[i+1];
              ClusterEta[i+1]=temp;
              temp=ClusterPhi[i];
              ClusterPhi[i]=ClusterPhi[i+1];
              ClusterPhi[i+1]=temp;
              }
  }
  for(int i=8;i<11;i=i+2)
  {
#pragma HLS unroll
    if(ClusterDeposits[i]<ClusterDeposits[i+1])
              {temp=ClusterDeposits[i];
              ClusterDeposits[i]=ClusterDeposits[i+1];
              ClusterDeposits[i+1]=temp;
                temp=ClusterEta[i];
              ClusterEta[i]=ClusterEta[i+1];
              ClusterEta[i+1]=temp;
              temp=ClusterPhi[i];
              ClusterPhi[i]=ClusterPhi[i+1];
              ClusterPhi[i+1]=temp;
              }
  }
  for(int i=12;i<15;i=i+2)
  {
#pragma HLS unroll
    if(ClusterDeposits[i]>ClusterDeposits[i+1])
              {temp=ClusterDeposits[i];
              ClusterDeposits[i]=ClusterDeposits[i+1];
              ClusterDeposits[i+1]=temp;
                temp=ClusterEta[i];
              ClusterEta[i]=ClusterEta[i+1];
              ClusterEta[i+1]=temp;
              temp=ClusterPhi[i];
              ClusterPhi[i]=ClusterPhi[i+1];
              ClusterPhi[i+1]=temp;
              }
  }
  for(int i=16;i<19;i=i+2)
  {
#pragma HLS unroll
    if(ClusterDeposits[i]<ClusterDeposits[i+1])
              {temp=ClusterDeposits[i];
              ClusterDeposits[i]=ClusterDeposits[i+1];
              ClusterDeposits[i+1]=temp;
                temp=ClusterEta[i];
              ClusterEta[i]=ClusterEta[i+1];
              ClusterEta[i+1]=temp;
              temp=ClusterPhi[i];
              ClusterPhi[i]=ClusterPhi[i+1];
              ClusterPhi[i+1]=temp;
              }
  }
  for(int i=20;i<23;i=i+2)
  {
#pragma HLS unroll
    if(ClusterDeposits[i]>ClusterDeposits[i+1])
              {temp=ClusterDeposits[i];
              ClusterDeposits[i]=ClusterDeposits[i+1];
              ClusterDeposits[i+1]=temp;
                temp=ClusterEta[i];
              ClusterEta[i]=ClusterEta[i+1];
              ClusterEta[i+1]=temp;
              temp=ClusterPhi[i];
              ClusterPhi[i]=ClusterPhi[i+1];
              ClusterPhi[i+1]=temp;
              }
  }
  for(int i=24;i<27;i=i+2)
  {
#pragma HLS unroll
    if(ClusterDeposits[i]<ClusterDeposits[i+1])
              {temp=ClusterDeposits[i];
              ClusterDeposits[i]=ClusterDeposits[i+1];
              ClusterDeposits[i+1]=temp;
                temp=ClusterEta[i];
              ClusterEta[i]=ClusterEta[i+1];
              ClusterEta[i+1]=temp;
              temp=ClusterPhi[i];
              ClusterPhi[i]=ClusterPhi[i+1];
              ClusterPhi[i+1]=temp;
              }
  }
  for(int i=28;i<31;i=i+2)
  {
#pragma HLS unroll
    if(ClusterDeposits[i]>ClusterDeposits[i+1])
              {temp=ClusterDeposits[i];
              ClusterDeposits[i]=ClusterDeposits[i+1];
              ClusterDeposits[i+1]=temp;
                temp=ClusterEta[i];
              ClusterEta[i]=ClusterEta[i+1];
              ClusterEta[i+1]=temp;
              temp=ClusterPhi[i];
              ClusterPhi[i]=ClusterPhi[i+1];
              ClusterPhi[i+1]=temp;
              }
  }
#pragma empty_line
  bitonic8(ClusterDeposits,ClusterEta,ClusterPhi);
#pragma empty_line
}
void getTowerPeaks3x4(uint16_t towerETRegions[3][4],uint16_t cEta[5],
                        uint16_t cPhi[5])
{
  int temp;
#pragma HLS PIPELINE II=6
 uint16_t Cluster_1_Deposits[16];
  uint16_t Cluster_1_Eta[16];
  uint16_t Cluster_1_Phi[16];
#pragma HLS ARRAY_PARTITION variable=Cluster_1_Deposits complete dim=0
#pragma HLS ARRAY_PARTITION variable=Cluster_1_Eta complete dim=0
#pragma HLS ARRAY_PARTITION variable=Cluster_1_Phi complete dim=0
#pragma HLS ARRAY_PARTITION variable=cEta complete dim=0
#pragma HLS ARRAY_PARTITION variable=cPhi complete dim=0
#pragma HLS ARRAY_PARTITION variable=towerETRegions complete dim=0
#pragma empty_line
 for(int i=0;i<16;i++)
  {
    Cluster_1_Deposits[i]=0;
    Cluster_1_Phi[i]=0;
    Cluster_1_Eta[i]=0;
#pragma empty_line
  }
  int i=0;
 for(int tPhi = 0; tPhi < 4; tPhi++) {
#pragma HLS UNROLL
    for(int tEta = 0; tEta < 3; tEta++) {
#pragma HLS UNROLL
      Cluster_1_Deposits[i] = towerETRegions[tEta][tPhi];
       Cluster_1_Phi[i]=tPhi;
      Cluster_1_Eta[i]=tEta;
     i++;
    }
  }
for (int i=13;i<16;i++)
{
#pragma HLS UNROLL
 Cluster_1_Deposits[i]=0;
 Cluster_1_Phi[i]=0;
  Cluster_1_Eta[i]=0;
}
#pragma empty_line
for(int i=0;i<16;i=i+4)
{
#pragma HLS unroll
if(Cluster_1_Deposits[i]<Cluster_1_Deposits[i+1])
{temp=Cluster_1_Deposits[i+1];
Cluster_1_Deposits[i+1]=Cluster_1_Deposits[i];
Cluster_1_Deposits[i]=temp;
temp=Cluster_1_Eta[i];
Cluster_1_Eta[i]=Cluster_1_Eta[i+1];
Cluster_1_Eta[i+1]=temp;
temp=Cluster_1_Phi[i];
Cluster_1_Phi[i]=Cluster_1_Phi[i+1];
Cluster_1_Phi[i+1]=temp;
}
#pragma empty_line
if(Cluster_1_Deposits[i+2]>Cluster_1_Deposits[i+3])
{temp=Cluster_1_Deposits[i+3];
Cluster_1_Deposits[i+3]=Cluster_1_Deposits[i+2];
Cluster_1_Deposits[i+2]=temp;
temp=Cluster_1_Eta[i+2];
Cluster_1_Eta[i+2]=Cluster_1_Eta[i+3];
Cluster_1_Eta[i+3]=temp;
temp=Cluster_1_Phi[i+2];
Cluster_1_Phi[i+2]=Cluster_1_Phi[i+3];
Cluster_1_Phi[i+3]=temp;
#pragma empty_line
}
 }
#pragma empty_line
#pragma empty_line
#pragma empty_line
    bitonic_1_4(Cluster_1_Deposits,Cluster_1_Eta,Cluster_1_Phi);
#pragma empty_line
for(int i=0;i<5;i++)
{
  cEta[i]=Cluster_1_Eta[i];
  cPhi[i]=Cluster_1_Phi[i];
}
#pragma empty_line
#pragma empty_line
#pragma empty_line
}
void TowerPeaks(uint16_t towerET[17][4], uint16_t TowerPhi[30], uint16_t TowerEta[30])
{
#pragma HLS PIPELINE II=6
#pragma HLS ARRAY_PARTITION variable=towerET complete dim=0
#pragma empty_line
#pragma HLS ARRAY_PARTITION variable=TowerEta complete dim=0
#pragma HLS ARRAY_PARTITION variable=TowerPhi complete dim=0
#pragma empty_line
uint16_t regions[3][4];
#pragma HLS ARRAY_PARTITION variable=regions complete dim=0
uint16_t regionEta[5];
#pragma HLS ARRAY_PARTITION variable=regionEta complete dim=0
uint16_t regionPhi[5];
#pragma HLS ARRAY_PARTITION variable=regionPhi complete dim=0
uint16_t Tower_1_Eta[30];
#pragma HLS ARRAY_PARTITION variable=Tower_1_Eta complete dim=0
uint16_t Tower_1_Phi[30];
#pragma HLS ARRAY_PARTITION variable=Tower_1_Phi complete dim=0
#pragma empty_line
#pragma HLS UNROLL
 for (int j=0;j<3;j++)
  {
#pragma HLS UNROLL
      for (int k=0;k<4;k++)
      {
#pragma HLS UNROLL
        regions[j][k]=0;
      }
  }
  for (int i=0;i<5;i++)
  {
    regionEta[i]=0;
    regionPhi[i]=0;
  }
  for(int i=0;i<30;i++)
  {
    Tower_1_Eta[i]=0;
    Tower_1_Phi[i]=0;
  }
#pragma empty_line
int x=0;
for (int i=0;i<15;i=i+3)
{
#pragma HLS UNROLL
 for (int j=0;j<3;j++)
  {
#pragma HLS UNROLL
      for (int k=0;k<4;k++)
      {
#pragma HLS UNROLL
        regions[j][k]=towerET[i+j][k];
      }
  }
#pragma empty_line
getTowerPeaks3x4(regions,regionEta,regionPhi);
Tower_1_Eta[x+0]=regionEta[0]+i;
Tower_1_Eta[x+1]=regionEta[1]+i;
Tower_1_Eta[x+2]=regionEta[2]+i;
Tower_1_Eta[x+3]=regionEta[3]+i;
Tower_1_Eta[x+4]=regionEta[4]+i;
Tower_1_Phi[x+0]=regionPhi[0];
Tower_1_Phi[x+1]=regionPhi[1];
Tower_1_Phi[x+2]=regionPhi[2];
Tower_1_Phi[x+3]=regionPhi[3];
Tower_1_Phi[x+4]=regionPhi[4];
x=x+5;
 }
for (int j=0;j<2;j++)
  {
#pragma HLS UNROLL
      for (int k=0;k<4;k++)
      {
#pragma HLS UNROLL
        regions[j][k]=towerET[j+15][k];
      }
  }
  regions[2][0]=0;
  regions[2][1]=0;
  regions[2][2]=0;
  regions[2][3]=0;
  getTowerPeaks3x4(regions,regionEta,regionPhi);
Tower_1_Eta[25+0]=regionEta[0]+15;
Tower_1_Eta[25+1]=regionEta[1]+15;
Tower_1_Eta[25+2]=regionEta[2]+15;
Tower_1_Eta[25+3]=regionEta[3]+15;
Tower_1_Eta[25+4]=regionEta[4]+15;
Tower_1_Phi[25+0]=regionPhi[0];
Tower_1_Phi[25+1]=regionPhi[1];
Tower_1_Phi[25+2]=regionPhi[2];
Tower_1_Phi[25+3]=regionPhi[3];
Tower_1_Phi[25+4]=regionPhi[4];
uint16_t ClusterDeposits2[32];
  uint16_t ClusterEta2[32];
  uint16_t ClusterPhi2[32];
  for(int i=0;i<32;i++)
{
  ClusterDeposits2[i]=0;
  ClusterEta2[i]=0;
  ClusterPhi2[i]=0;
}
#pragma HLS ARRAY_PARTITION variable=ClusterDeposits2 complete dim=0
#pragma HLS ARRAY_PARTITION variable=ClusterEta2 complete dim=0
#pragma HLS ARRAY_PARTITION variable=ClusterPhi2 complete dim=0
for(int i=0;i<30;i++)
{
  ClusterDeposits2[i]=towerET[Tower_1_Eta[i]][Tower_1_Phi[i]];
  ClusterEta2[i]=Tower_1_Eta[i];
  ClusterPhi2[i]=Tower_1_Phi[i];
}
#pragma empty_line
#pragma empty_line
int temp=0;
#pragma empty_line
for(int i=0;i<32;i=i+4)
{
#pragma HLS unroll
if(ClusterDeposits2[i]>ClusterDeposits2[i+1])
{temp=ClusterDeposits2[i+1];
ClusterDeposits2[i+1]=ClusterDeposits2[i];
ClusterDeposits2[i]=temp;
temp=ClusterEta2[i];
ClusterEta2[i]=ClusterEta2[i+1];
ClusterEta2[i+1]=temp;
temp=ClusterPhi2[i];
ClusterPhi2[i]=ClusterPhi2[i+1];
ClusterPhi2[i+1]=temp;
}
#pragma empty_line
if(ClusterDeposits2[i+2]<ClusterDeposits2[i+3])
{temp=ClusterDeposits2[i+3];
ClusterDeposits2[i+3]=ClusterDeposits2[i+2];
ClusterDeposits2[i+2]=temp;
temp=ClusterEta2[i+2];
ClusterEta2[i+2]=ClusterEta2[i+3];
ClusterEta2[i+3]=temp;
temp=ClusterPhi2[i+2];
ClusterPhi2[i+2]=ClusterPhi2[i+3];
ClusterPhi2[i+3]=temp;
#pragma empty_line
}
  }
#pragma empty_line
#pragma empty_line
#pragma empty_line
    bitonic4(ClusterDeposits2,ClusterEta2,ClusterPhi2);
#pragma empty_line
    for(int i=0;i<30;i++)
{
#pragma empty_line
  TowerEta[i]=ClusterEta2[i];
  TowerPhi[i]=ClusterPhi2[i];
#pragma empty_line
}
}