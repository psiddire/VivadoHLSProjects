#pragma line 1 "/afs/cern.ch/user/p/psiddire/CMSSW_10_2_2/src/VivadoHLSProjects/HT/TestMakeHT.cpp"
#pragma line 1 "<built-in>"
#pragma line 1 "<command-line>"
#pragma line 1 "/afs/cern.ch/user/p/psiddire/CMSSW_10_2_2/src/VivadoHLSProjects/HT/TestMakeHT.cpp"
#pragma line 1 "/usr/include/stdlib.h" 1 3 4
#pragma line 25 "/usr/include/stdlib.h" 3 4
#pragma line 1 "/home/sw_dir/Xilinx/Vivado_HLS/2016.4/lnx64/tools/gcc/bin/../lib/gcc/x86_64-unknown-linux-gnu/4.6.3/include-fixed/features.h" 1 3 4
#pragma line 339 "/home/sw_dir/Xilinx/Vivado_HLS/2016.4/lnx64/tools/gcc/bin/../lib/gcc/x86_64-unknown-linux-gnu/4.6.3/include-fixed/features.h" 3 4
#pragma line 1 "/usr/include/sys/cdefs.h" 1 3 4
#pragma line 373 "/usr/include/sys/cdefs.h" 3 4
#pragma line 1 "/usr/include/bits/wordsize.h" 1 3 4
#pragma line 374 "/usr/include/sys/cdefs.h" 2 3 4
#pragma line 340 "/home/sw_dir/Xilinx/Vivado_HLS/2016.4/lnx64/tools/gcc/bin/../lib/gcc/x86_64-unknown-linux-gnu/4.6.3/include-fixed/features.h" 2 3 4
#pragma line 362 "/home/sw_dir/Xilinx/Vivado_HLS/2016.4/lnx64/tools/gcc/bin/../lib/gcc/x86_64-unknown-linux-gnu/4.6.3/include-fixed/features.h" 3 4
#pragma line 1 "/usr/include/gnu/stubs.h" 1 3 4
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma line 1 "/usr/include/bits/wordsize.h" 1 3 4
#pragma line 5 "/usr/include/gnu/stubs.h" 2 3 4
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma line 1 "/usr/include/gnu/stubs-64.h" 1 3 4
#pragma line 10 "/usr/include/gnu/stubs.h" 2 3 4
#pragma line 363 "/home/sw_dir/Xilinx/Vivado_HLS/2016.4/lnx64/tools/gcc/bin/../lib/gcc/x86_64-unknown-linux-gnu/4.6.3/include-fixed/features.h" 2 3 4
#pragma line 26 "/usr/include/stdlib.h" 2 3 4
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma line 1 "/home/sw_dir/Xilinx/Vivado_HLS/2016.4/lnx64/tools/gcc/bin/../lib/gcc/x86_64-unknown-linux-gnu/4.6.3/include/stddef.h" 1 3 4
#pragma line 212 "/home/sw_dir/Xilinx/Vivado_HLS/2016.4/lnx64/tools/gcc/bin/../lib/gcc/x86_64-unknown-linux-gnu/4.6.3/include/stddef.h" 3 4
typedef long unsigned int size_t;
#pragma line 34 "/usr/include/stdlib.h" 2 3 4
#pragma empty_line
extern "C" {
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma line 1 "/usr/include/bits/waitflags.h" 1 3 4
#pragma line 43 "/usr/include/stdlib.h" 2 3 4
#pragma line 1 "/usr/include/bits/waitstatus.h" 1 3 4
#pragma line 65 "/usr/include/bits/waitstatus.h" 3 4
#pragma line 1 "/usr/include/endian.h" 1 3 4
#pragma line 37 "/usr/include/endian.h" 3 4
#pragma line 1 "/usr/include/bits/endian.h" 1 3 4
#pragma line 38 "/usr/include/endian.h" 2 3 4
#pragma line 61 "/usr/include/endian.h" 3 4
#pragma line 1 "/usr/include/bits/byteswap.h" 1 3 4
#pragma line 28 "/usr/include/bits/byteswap.h" 3 4
#pragma line 1 "/usr/include/bits/wordsize.h" 1 3 4
#pragma line 29 "/usr/include/bits/byteswap.h" 2 3 4
#pragma line 62 "/usr/include/endian.h" 2 3 4
#pragma line 66 "/usr/include/bits/waitstatus.h" 2 3 4
#pragma empty_line
union wait
  {
    int w_status;
    struct
      {
#pragma empty_line
 unsigned int __w_termsig:7;
 unsigned int __w_coredump:1;
 unsigned int __w_retcode:8;
 unsigned int:16;
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
      } __wait_terminated;
    struct
      {
#pragma empty_line
 unsigned int __w_stopval:8;
 unsigned int __w_stopsig:8;
 unsigned int:16;
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
      } __wait_stopped;
  };
#pragma line 44 "/usr/include/stdlib.h" 2 3 4
#pragma line 96 "/usr/include/stdlib.h" 3 4
#pragma empty_line
#pragma empty_line
typedef struct
  {
    int quot;
    int rem;
  } div_t;
#pragma empty_line
#pragma empty_line
#pragma empty_line
typedef struct
  {
    long int quot;
    long int rem;
  } ldiv_t;
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
__extension__ typedef struct
  {
    long long int quot;
    long long int rem;
  } lldiv_t;
#pragma empty_line
#pragma empty_line
#pragma line 140 "/usr/include/stdlib.h" 3 4
extern size_t __ctype_get_mb_cur_max (void) throw () ;
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern double atof (__const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;
#pragma empty_line
extern int atoi (__const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;
#pragma empty_line
extern long int atol (__const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
__extension__ extern long long int atoll (__const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern double strtod (__const char *__restrict __nptr,
        char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1))) ;
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern float strtof (__const char *__restrict __nptr,
       char **__restrict __endptr) throw () __attribute__ ((__nonnull__ (1))) ;
#pragma empty_line
extern long double strtold (__const char *__restrict __nptr,
       char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1))) ;
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern long int strtol (__const char *__restrict __nptr,
   char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1))) ;
#pragma empty_line
extern unsigned long int strtoul (__const char *__restrict __nptr,
      char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1))) ;
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
__extension__
extern long long int strtoq (__const char *__restrict __nptr,
        char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1))) ;
#pragma empty_line
__extension__
extern unsigned long long int strtouq (__const char *__restrict __nptr,
           char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1))) ;
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
__extension__
extern long long int strtoll (__const char *__restrict __nptr,
         char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1))) ;
#pragma empty_line
__extension__
extern unsigned long long int strtoull (__const char *__restrict __nptr,
     char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1))) ;
#pragma empty_line
#pragma line 236 "/usr/include/stdlib.h" 3 4
#pragma line 1 "/usr/include/xlocale.h" 1 3 4
#pragma line 28 "/usr/include/xlocale.h" 3 4
typedef struct __locale_struct
{
#pragma empty_line
  struct __locale_data *__locales[13];
#pragma empty_line
#pragma empty_line
  const unsigned short int *__ctype_b;
  const int *__ctype_tolower;
  const int *__ctype_toupper;
#pragma empty_line
#pragma empty_line
  const char *__names[13];
} *__locale_t;
#pragma empty_line
#pragma empty_line
typedef __locale_t locale_t;
#pragma line 237 "/usr/include/stdlib.h" 2 3 4
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern long int strtol_l (__const char *__restrict __nptr,
     char **__restrict __endptr, int __base,
     __locale_t __loc) throw () __attribute__ ((__nonnull__ (1, 4))) ;
#pragma empty_line
extern unsigned long int strtoul_l (__const char *__restrict __nptr,
        char **__restrict __endptr,
        int __base, __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 4))) ;
#pragma empty_line
__extension__
extern long long int strtoll_l (__const char *__restrict __nptr,
    char **__restrict __endptr, int __base,
    __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 4))) ;
#pragma empty_line
__extension__
extern unsigned long long int strtoull_l (__const char *__restrict __nptr,
       char **__restrict __endptr,
       int __base, __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 4))) ;
#pragma empty_line
extern double strtod_l (__const char *__restrict __nptr,
   char **__restrict __endptr, __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3))) ;
#pragma empty_line
extern float strtof_l (__const char *__restrict __nptr,
         char **__restrict __endptr, __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3))) ;
#pragma empty_line
extern long double strtold_l (__const char *__restrict __nptr,
         char **__restrict __endptr,
         __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3))) ;
#pragma line 311 "/usr/include/stdlib.h" 3 4
extern char *l64a (long int __n) throw () ;
#pragma empty_line
#pragma empty_line
extern long int a64l (__const char *__s)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma line 1 "/usr/include/sys/types.h" 1 3 4
#pragma line 28 "/usr/include/sys/types.h" 3 4
extern "C" {
#pragma empty_line
#pragma line 1 "/usr/include/bits/types.h" 1 3 4
#pragma line 28 "/usr/include/bits/types.h" 3 4
#pragma line 1 "/usr/include/bits/wordsize.h" 1 3 4
#pragma line 29 "/usr/include/bits/types.h" 2 3 4
#pragma empty_line
#pragma empty_line
typedef unsigned char __u_char;
typedef unsigned short int __u_short;
typedef unsigned int __u_int;
typedef unsigned long int __u_long;
#pragma empty_line
#pragma empty_line
typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef signed short int __int16_t;
typedef unsigned short int __uint16_t;
typedef signed int __int32_t;
typedef unsigned int __uint32_t;
#pragma empty_line
typedef signed long int __int64_t;
typedef unsigned long int __uint64_t;
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
typedef long int __quad_t;
typedef unsigned long int __u_quad_t;
#pragma line 131 "/usr/include/bits/types.h" 3 4
#pragma line 1 "/usr/include/bits/typesizes.h" 1 3 4
#pragma line 132 "/usr/include/bits/types.h" 2 3 4
#pragma empty_line
#pragma empty_line
typedef unsigned long int __dev_t;
typedef unsigned int __uid_t;
typedef unsigned int __gid_t;
typedef unsigned long int __ino_t;
typedef unsigned long int __ino64_t;
typedef unsigned int __mode_t;
typedef unsigned long int __nlink_t;
typedef long int __off_t;
typedef long int __off64_t;
typedef int __pid_t;
typedef struct { int __val[2]; } __fsid_t;
typedef long int __clock_t;
typedef unsigned long int __rlim_t;
typedef unsigned long int __rlim64_t;
typedef unsigned int __id_t;
typedef long int __time_t;
typedef unsigned int __useconds_t;
typedef long int __suseconds_t;
#pragma empty_line
typedef int __daddr_t;
typedef long int __swblk_t;
typedef int __key_t;
#pragma empty_line
#pragma empty_line
typedef int __clockid_t;
#pragma empty_line
#pragma empty_line
typedef void * __timer_t;
#pragma empty_line
#pragma empty_line
typedef long int __blksize_t;
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
typedef long int __blkcnt_t;
typedef long int __blkcnt64_t;
#pragma empty_line
#pragma empty_line
typedef unsigned long int __fsblkcnt_t;
typedef unsigned long int __fsblkcnt64_t;
#pragma empty_line
#pragma empty_line
typedef unsigned long int __fsfilcnt_t;
typedef unsigned long int __fsfilcnt64_t;
#pragma empty_line
typedef long int __ssize_t;
#pragma empty_line
#pragma empty_line
#pragma empty_line
typedef __off64_t __loff_t;
typedef __quad_t *__qaddr_t;
typedef char *__caddr_t;
#pragma empty_line
#pragma empty_line
typedef long int __intptr_t;
#pragma empty_line
#pragma empty_line
typedef unsigned int __socklen_t;
#pragma line 31 "/usr/include/sys/types.h" 2 3 4
#pragma empty_line
#pragma empty_line
#pragma empty_line
typedef __u_char u_char;
typedef __u_short u_short;
typedef __u_int u_int;
typedef __u_long u_long;
typedef __quad_t quad_t;
typedef __u_quad_t u_quad_t;
typedef __fsid_t fsid_t;
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
typedef __loff_t loff_t;
#pragma empty_line
#pragma empty_line
#pragma empty_line
typedef __ino_t ino_t;
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
typedef __ino64_t ino64_t;
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
typedef __dev_t dev_t;
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
typedef __gid_t gid_t;
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
typedef __mode_t mode_t;
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
typedef __nlink_t nlink_t;
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
typedef __uid_t uid_t;
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
typedef __off_t off_t;
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
typedef __off64_t off64_t;
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
typedef __pid_t pid_t;
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
typedef __id_t id_t;
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
typedef __ssize_t ssize_t;
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
typedef __daddr_t daddr_t;
typedef __caddr_t caddr_t;
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
typedef __key_t key_t;
#pragma line 133 "/usr/include/sys/types.h" 3 4
#pragma line 1 "/usr/include/time.h" 1 3 4
#pragma line 58 "/usr/include/time.h" 3 4
#pragma empty_line
#pragma empty_line
typedef __clock_t clock_t;
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma line 74 "/usr/include/time.h" 3 4
#pragma empty_line
#pragma empty_line
typedef __time_t time_t;
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma line 92 "/usr/include/time.h" 3 4
typedef __clockid_t clockid_t;
#pragma line 104 "/usr/include/time.h" 3 4
typedef __timer_t timer_t;
#pragma line 134 "/usr/include/sys/types.h" 2 3 4
#pragma empty_line
#pragma empty_line
#pragma empty_line
typedef __useconds_t useconds_t;
#pragma empty_line
#pragma empty_line
#pragma empty_line
typedef __suseconds_t suseconds_t;
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma line 1 "/home/sw_dir/Xilinx/Vivado_HLS/2016.4/lnx64/tools/gcc/bin/../lib/gcc/x86_64-unknown-linux-gnu/4.6.3/include/stddef.h" 1 3 4
#pragma line 148 "/usr/include/sys/types.h" 2 3 4
#pragma empty_line
#pragma empty_line
#pragma empty_line
typedef unsigned long int ulong;
typedef unsigned short int ushort;
typedef unsigned int uint;
#pragma line 195 "/usr/include/sys/types.h" 3 4
typedef int int8_t __attribute__ ((__mode__ (__QI__)));
typedef int int16_t __attribute__ ((__mode__ (__HI__)));
typedef int int32_t __attribute__ ((__mode__ (__SI__)));
typedef int int64_t __attribute__ ((__mode__ (__DI__)));
#pragma empty_line
#pragma empty_line
typedef unsigned int u_int8_t __attribute__ ((__mode__ (__QI__)));
typedef unsigned int u_int16_t __attribute__ ((__mode__ (__HI__)));
typedef unsigned int u_int32_t __attribute__ ((__mode__ (__SI__)));
typedef unsigned int u_int64_t __attribute__ ((__mode__ (__DI__)));
#pragma empty_line
typedef int register_t __attribute__ ((__mode__ (__word__)));
#pragma line 220 "/usr/include/sys/types.h" 3 4
#pragma line 1 "/usr/include/sys/select.h" 1 3 4
#pragma line 31 "/usr/include/sys/select.h" 3 4
#pragma line 1 "/usr/include/bits/select.h" 1 3 4
#pragma line 23 "/usr/include/bits/select.h" 3 4
#pragma line 1 "/usr/include/bits/wordsize.h" 1 3 4
#pragma line 24 "/usr/include/bits/select.h" 2 3 4
#pragma line 32 "/usr/include/sys/select.h" 2 3 4
#pragma empty_line
#pragma empty_line
#pragma line 1 "/usr/include/bits/sigset.h" 1 3 4
#pragma line 24 "/usr/include/bits/sigset.h" 3 4
typedef int __sig_atomic_t;
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
typedef struct
  {
    unsigned long int __val[(1024 / (8 * sizeof (unsigned long int)))];
  } __sigset_t;
#pragma line 35 "/usr/include/sys/select.h" 2 3 4
#pragma empty_line
#pragma empty_line
#pragma empty_line
typedef __sigset_t sigset_t;
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma line 1 "/usr/include/time.h" 1 3 4
#pragma line 120 "/usr/include/time.h" 3 4
struct timespec
  {
    __time_t tv_sec;
    long int tv_nsec;
  };
#pragma line 45 "/usr/include/sys/select.h" 2 3 4
#pragma empty_line
#pragma line 1 "/usr/include/bits/time.h" 1 3 4
#pragma line 75 "/usr/include/bits/time.h" 3 4
struct timeval
  {
    __time_t tv_sec;
    __suseconds_t tv_usec;
  };
#pragma line 47 "/usr/include/sys/select.h" 2 3 4
#pragma line 55 "/usr/include/sys/select.h" 3 4
typedef long int __fd_mask;
#pragma line 67 "/usr/include/sys/select.h" 3 4
typedef struct
  {
#pragma empty_line
#pragma empty_line
#pragma empty_line
    __fd_mask fds_bits[1024 / (8 * (int) sizeof (__fd_mask))];
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
  } fd_set;
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
typedef __fd_mask fd_mask;
#pragma line 99 "/usr/include/sys/select.h" 3 4
extern "C" {
#pragma line 109 "/usr/include/sys/select.h" 3 4
extern int select (int __nfds, fd_set *__restrict __readfds,
     fd_set *__restrict __writefds,
     fd_set *__restrict __exceptfds,
     struct timeval *__restrict __timeout);
#pragma line 121 "/usr/include/sys/select.h" 3 4
extern int pselect (int __nfds, fd_set *__restrict __readfds,
      fd_set *__restrict __writefds,
      fd_set *__restrict __exceptfds,
      const struct timespec *__restrict __timeout,
      const __sigset_t *__restrict __sigmask);
#pragma empty_line
#pragma empty_line
}
#pragma line 221 "/usr/include/sys/types.h" 2 3 4
#pragma empty_line
#pragma empty_line
#pragma line 1 "/home/sw_dir/Xilinx/Vivado_HLS/2016.4/lnx64/tools/gcc/bin/../lib/gcc/x86_64-unknown-linux-gnu/4.6.3/include-fixed/sys/sysmacros.h" 1 3 4
#pragma line 38 "/home/sw_dir/Xilinx/Vivado_HLS/2016.4/lnx64/tools/gcc/bin/../lib/gcc/x86_64-unknown-linux-gnu/4.6.3/include-fixed/sys/sysmacros.h" 3 4
__extension__
extern __inline __attribute__ ((__gnu_inline__)) unsigned int gnu_dev_major (unsigned long long int __dev)
     throw ();
__extension__
extern __inline __attribute__ ((__gnu_inline__)) unsigned int gnu_dev_minor (unsigned long long int __dev)
     throw ();
__extension__
extern __inline __attribute__ ((__gnu_inline__)) unsigned long long int gnu_dev_makedev (unsigned int __major,
       unsigned int __minor)
     throw ();
#pragma empty_line
#pragma empty_line
__extension__ extern __inline __attribute__ ((__gnu_inline__)) unsigned int
gnu_dev_major (unsigned long long int __dev) throw ()
{
  return ((__dev >> 8) & 0xfff) | ((unsigned int) (__dev >> 32) & ~0xfff);
}
#pragma empty_line
__extension__ extern __inline __attribute__ ((__gnu_inline__)) unsigned int
gnu_dev_minor (unsigned long long int __dev) throw ()
{
  return (__dev & 0xff) | ((unsigned int) (__dev >> 12) & ~0xff);
}
#pragma empty_line
__extension__ extern __inline __attribute__ ((__gnu_inline__)) unsigned long long int
gnu_dev_makedev (unsigned int __major, unsigned int __minor) throw ()
{
  return ((__minor & 0xff) | ((__major & 0xfff) << 8)
   | (((unsigned long long int) (__minor & ~0xff)) << 12)
   | (((unsigned long long int) (__major & ~0xfff)) << 32));
}
#pragma line 224 "/usr/include/sys/types.h" 2 3 4
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
typedef __blksize_t blksize_t;
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
typedef __blkcnt_t blkcnt_t;
#pragma empty_line
#pragma empty_line
#pragma empty_line
typedef __fsblkcnt_t fsblkcnt_t;
#pragma empty_line
#pragma empty_line
#pragma empty_line
typedef __fsfilcnt_t fsfilcnt_t;
#pragma line 263 "/usr/include/sys/types.h" 3 4
typedef __blkcnt64_t blkcnt64_t;
typedef __fsblkcnt64_t fsblkcnt64_t;
typedef __fsfilcnt64_t fsfilcnt64_t;
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma line 1 "/usr/include/bits/pthreadtypes.h" 1 3 4
#pragma line 23 "/usr/include/bits/pthreadtypes.h" 3 4
#pragma line 1 "/usr/include/bits/wordsize.h" 1 3 4
#pragma line 24 "/usr/include/bits/pthreadtypes.h" 2 3 4
#pragma line 50 "/usr/include/bits/pthreadtypes.h" 3 4
typedef unsigned long int pthread_t;
#pragma empty_line
#pragma empty_line
typedef union
{
  char __size[56];
  long int __align;
} pthread_attr_t;
#pragma empty_line
#pragma empty_line
#pragma empty_line
typedef struct __pthread_internal_list
{
  struct __pthread_internal_list *__prev;
  struct __pthread_internal_list *__next;
} __pthread_list_t;
#pragma line 76 "/usr/include/bits/pthreadtypes.h" 3 4
typedef union
{
  struct __pthread_mutex_s
  {
    int __lock;
    unsigned int __count;
    int __owner;
#pragma empty_line
    unsigned int __nusers;
#pragma empty_line
#pragma empty_line
#pragma empty_line
    int __kind;
#pragma empty_line
    int __spins;
    __pthread_list_t __list;
#pragma line 101 "/usr/include/bits/pthreadtypes.h" 3 4
  } __data;
  char __size[40];
  long int __align;
} pthread_mutex_t;
#pragma empty_line
typedef union
{
  char __size[4];
  int __align;
} pthread_mutexattr_t;
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
typedef union
{
  struct
  {
    int __lock;
    unsigned int __futex;
    __extension__ unsigned long long int __total_seq;
    __extension__ unsigned long long int __wakeup_seq;
    __extension__ unsigned long long int __woken_seq;
    void *__mutex;
    unsigned int __nwaiters;
    unsigned int __broadcast_seq;
  } __data;
  char __size[48];
  __extension__ long long int __align;
} pthread_cond_t;
#pragma empty_line
typedef union
{
  char __size[4];
  int __align;
} pthread_condattr_t;
#pragma empty_line
#pragma empty_line
#pragma empty_line
typedef unsigned int pthread_key_t;
#pragma empty_line
#pragma empty_line
#pragma empty_line
typedef int pthread_once_t;
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
typedef union
{
#pragma empty_line
  struct
  {
    int __lock;
    unsigned int __nr_readers;
    unsigned int __readers_wakeup;
    unsigned int __writer_wakeup;
    unsigned int __nr_readers_queued;
    unsigned int __nr_writers_queued;
    int __writer;
    int __shared;
    unsigned long int __pad1;
    unsigned long int __pad2;
#pragma empty_line
#pragma empty_line
    unsigned int __flags;
  } __data;
#pragma line 187 "/usr/include/bits/pthreadtypes.h" 3 4
  char __size[56];
  long int __align;
} pthread_rwlock_t;
#pragma empty_line
typedef union
{
  char __size[8];
  long int __align;
} pthread_rwlockattr_t;
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
typedef volatile int pthread_spinlock_t;
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
typedef union
{
  char __size[32];
  long int __align;
} pthread_barrier_t;
#pragma empty_line
typedef union
{
  char __size[4];
  int __align;
} pthread_barrierattr_t;
#pragma line 272 "/usr/include/sys/types.h" 2 3 4
#pragma empty_line
#pragma empty_line
}
#pragma line 321 "/usr/include/stdlib.h" 2 3 4
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern long int random (void) throw ();
#pragma empty_line
#pragma empty_line
extern void srandom (unsigned int __seed) throw ();
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern char *initstate (unsigned int __seed, char *__statebuf,
   size_t __statelen) throw () __attribute__ ((__nonnull__ (2)));
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern char *setstate (char *__statebuf) throw () __attribute__ ((__nonnull__ (1)));
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
struct random_data
  {
    int32_t *fptr;
    int32_t *rptr;
    int32_t *state;
    int rand_type;
    int rand_deg;
    int rand_sep;
    int32_t *end_ptr;
  };
#pragma empty_line
extern int random_r (struct random_data *__restrict __buf,
       int32_t *__restrict __result) throw () __attribute__ ((__nonnull__ (1, 2)));
#pragma empty_line
extern int srandom_r (unsigned int __seed, struct random_data *__buf)
     throw () __attribute__ ((__nonnull__ (2)));
#pragma empty_line
extern int initstate_r (unsigned int __seed, char *__restrict __statebuf,
   size_t __statelen,
   struct random_data *__restrict __buf)
     throw () __attribute__ ((__nonnull__ (2, 4)));
#pragma empty_line
extern int setstate_r (char *__restrict __statebuf,
         struct random_data *__restrict __buf)
     throw () __attribute__ ((__nonnull__ (1, 2)));
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern int rand (void) throw ();
#pragma empty_line
extern void srand (unsigned int __seed) throw ();
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern int rand_r (unsigned int *__seed) throw ();
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern double drand48 (void) throw ();
extern double erand48 (unsigned short int __xsubi[3]) throw () __attribute__ ((__nonnull__ (1)));
#pragma empty_line
#pragma empty_line
extern long int lrand48 (void) throw ();
extern long int nrand48 (unsigned short int __xsubi[3])
     throw () __attribute__ ((__nonnull__ (1)));
#pragma empty_line
#pragma empty_line
extern long int mrand48 (void) throw ();
extern long int jrand48 (unsigned short int __xsubi[3])
     throw () __attribute__ ((__nonnull__ (1)));
#pragma empty_line
#pragma empty_line
extern void srand48 (long int __seedval) throw ();
extern unsigned short int *seed48 (unsigned short int __seed16v[3])
     throw () __attribute__ ((__nonnull__ (1)));
extern void lcong48 (unsigned short int __param[7]) throw () __attribute__ ((__nonnull__ (1)));
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
struct drand48_data
  {
    unsigned short int __x[3];
    unsigned short int __old_x[3];
    unsigned short int __c;
    unsigned short int __init;
    unsigned long long int __a;
  };
#pragma empty_line
#pragma empty_line
extern int drand48_r (struct drand48_data *__restrict __buffer,
        double *__restrict __result) throw () __attribute__ ((__nonnull__ (1, 2)));
extern int erand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        double *__restrict __result) throw () __attribute__ ((__nonnull__ (1, 2)));
#pragma empty_line
#pragma empty_line
extern int lrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern int nrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));
#pragma empty_line
#pragma empty_line
extern int mrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern int jrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));
#pragma empty_line
#pragma empty_line
extern int srand48_r (long int __seedval, struct drand48_data *__buffer)
     throw () __attribute__ ((__nonnull__ (2)));
#pragma empty_line
extern int seed48_r (unsigned short int __seed16v[3],
       struct drand48_data *__buffer) throw () __attribute__ ((__nonnull__ (1, 2)));
#pragma empty_line
extern int lcong48_r (unsigned short int __param[7],
        struct drand48_data *__buffer)
     throw () __attribute__ ((__nonnull__ (1, 2)));
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern void *malloc (size_t __size) throw () __attribute__ ((__malloc__)) ;
#pragma empty_line
extern void *calloc (size_t __nmemb, size_t __size)
     throw () __attribute__ ((__malloc__)) ;
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern void *realloc (void *__ptr, size_t __size)
     throw () __attribute__ ((__warn_unused_result__));
#pragma empty_line
extern void free (void *__ptr) throw ();
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern void cfree (void *__ptr) throw ();
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma line 1 "/usr/include/alloca.h" 1 3 4
#pragma line 25 "/usr/include/alloca.h" 3 4
#pragma line 1 "/home/sw_dir/Xilinx/Vivado_HLS/2016.4/lnx64/tools/gcc/bin/../lib/gcc/x86_64-unknown-linux-gnu/4.6.3/include/stddef.h" 1 3 4
#pragma line 26 "/usr/include/alloca.h" 2 3 4
#pragma empty_line
extern "C" {
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern void *alloca (size_t __size) throw ();
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
}
#pragma line 498 "/usr/include/stdlib.h" 2 3 4
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern void *valloc (size_t __size) throw () __attribute__ ((__malloc__)) ;
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern int posix_memalign (void **__memptr, size_t __alignment, size_t __size)
     throw () __attribute__ ((__nonnull__ (1))) ;
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern void abort (void) throw () __attribute__ ((__noreturn__));
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern int atexit (void (*__func) (void)) throw () __attribute__ ((__nonnull__ (1)));
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern "C++" int at_quick_exit (void (*__func) (void))
     throw () __asm ("at_quick_exit") __attribute__ ((__nonnull__ (1)));
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern int on_exit (void (*__func) (int __status, void *__arg), void *__arg)
     throw () __attribute__ ((__nonnull__ (1)));
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern void exit (int __status) throw () __attribute__ ((__noreturn__));
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern void quick_exit (int __status) throw () __attribute__ ((__noreturn__));
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern void _Exit (int __status) throw () __attribute__ ((__noreturn__));
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern char *getenv (__const char *__name) throw () __attribute__ ((__nonnull__ (1))) ;
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern char *__secure_getenv (__const char *__name)
     throw () __attribute__ ((__nonnull__ (1))) ;
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern int putenv (char *__string) throw () __attribute__ ((__nonnull__ (1)));
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern int setenv (__const char *__name, __const char *__value, int __replace)
     throw () __attribute__ ((__nonnull__ (2)));
#pragma empty_line
#pragma empty_line
extern int unsetenv (__const char *__name) throw () __attribute__ ((__nonnull__ (1)));
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern int clearenv (void) throw ();
#pragma line 606 "/usr/include/stdlib.h" 3 4
extern char *mktemp (char *__template) throw () __attribute__ ((__nonnull__ (1))) ;
#pragma line 620 "/usr/include/stdlib.h" 3 4
extern int mkstemp (char *__template) __attribute__ ((__nonnull__ (1))) ;
#pragma line 630 "/usr/include/stdlib.h" 3 4
extern int mkstemp64 (char *__template) __attribute__ ((__nonnull__ (1))) ;
#pragma line 642 "/usr/include/stdlib.h" 3 4
extern int mkstemps (char *__template, int __suffixlen) __attribute__ ((__nonnull__ (1))) ;
#pragma line 652 "/usr/include/stdlib.h" 3 4
extern int mkstemps64 (char *__template, int __suffixlen)
     __attribute__ ((__nonnull__ (1))) ;
#pragma line 663 "/usr/include/stdlib.h" 3 4
extern char *mkdtemp (char *__template) throw () __attribute__ ((__nonnull__ (1))) ;
#pragma line 674 "/usr/include/stdlib.h" 3 4
extern int mkostemp (char *__template, int __flags) __attribute__ ((__nonnull__ (1))) ;
#pragma line 684 "/usr/include/stdlib.h" 3 4
extern int mkostemp64 (char *__template, int __flags) __attribute__ ((__nonnull__ (1))) ;
#pragma line 694 "/usr/include/stdlib.h" 3 4
extern int mkostemps (char *__template, int __suffixlen, int __flags)
     __attribute__ ((__nonnull__ (1))) ;
#pragma line 706 "/usr/include/stdlib.h" 3 4
extern int mkostemps64 (char *__template, int __suffixlen, int __flags)
     __attribute__ ((__nonnull__ (1))) ;
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern int system (__const char *__command) ;
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern char *canonicalize_file_name (__const char *__name)
     throw () __attribute__ ((__nonnull__ (1))) ;
#pragma line 734 "/usr/include/stdlib.h" 3 4
extern char *realpath (__const char *__restrict __name,
         char *__restrict __resolved) throw () ;
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
typedef int (*__compar_fn_t) (__const void *, __const void *);
#pragma empty_line
#pragma empty_line
typedef __compar_fn_t comparison_fn_t;
#pragma empty_line
#pragma empty_line
#pragma empty_line
typedef int (*__compar_d_fn_t) (__const void *, __const void *, void *);
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern void *bsearch (__const void *__key, __const void *__base,
        size_t __nmemb, size_t __size, __compar_fn_t __compar)
     __attribute__ ((__nonnull__ (1, 2, 5))) ;
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern void qsort (void *__base, size_t __nmemb, size_t __size,
     __compar_fn_t __compar) __attribute__ ((__nonnull__ (1, 4)));
#pragma empty_line
extern void qsort_r (void *__base, size_t __nmemb, size_t __size,
       __compar_d_fn_t __compar, void *__arg)
  __attribute__ ((__nonnull__ (1, 4)));
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern int abs (int __x) throw () __attribute__ ((__const__)) ;
extern long int labs (long int __x) throw () __attribute__ ((__const__)) ;
#pragma empty_line
#pragma empty_line
#pragma empty_line
__extension__ extern long long int llabs (long long int __x)
     throw () __attribute__ ((__const__)) ;
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern div_t div (int __numer, int __denom)
     throw () __attribute__ ((__const__)) ;
extern ldiv_t ldiv (long int __numer, long int __denom)
     throw () __attribute__ ((__const__)) ;
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
__extension__ extern lldiv_t lldiv (long long int __numer,
        long long int __denom)
     throw () __attribute__ ((__const__)) ;
#pragma empty_line
#pragma line 808 "/usr/include/stdlib.h" 3 4
extern char *ecvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) throw () __attribute__ ((__nonnull__ (3, 4))) ;
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern char *fcvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) throw () __attribute__ ((__nonnull__ (3, 4))) ;
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern char *gcvt (double __value, int __ndigit, char *__buf)
     throw () __attribute__ ((__nonnull__ (3))) ;
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern char *qecvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     throw () __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qfcvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     throw () __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qgcvt (long double __value, int __ndigit, char *__buf)
     throw () __attribute__ ((__nonnull__ (3))) ;
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern int ecvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) throw () __attribute__ ((__nonnull__ (3, 4, 5)));
extern int fcvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) throw () __attribute__ ((__nonnull__ (3, 4, 5)));
#pragma empty_line
extern int qecvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (3, 4, 5)));
extern int qfcvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (3, 4, 5)));
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern int mblen (__const char *__s, size_t __n) throw () ;
#pragma empty_line
#pragma empty_line
extern int mbtowc (wchar_t *__restrict __pwc,
     __const char *__restrict __s, size_t __n) throw () ;
#pragma empty_line
#pragma empty_line
extern int wctomb (char *__s, wchar_t __wchar) throw () ;
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern size_t mbstowcs (wchar_t *__restrict __pwcs,
   __const char *__restrict __s, size_t __n) throw ();
#pragma empty_line
extern size_t wcstombs (char *__restrict __s,
   __const wchar_t *__restrict __pwcs, size_t __n)
     throw ();
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern int rpmatch (__const char *__response) throw () __attribute__ ((__nonnull__ (1))) ;
#pragma line 896 "/usr/include/stdlib.h" 3 4
extern int getsubopt (char **__restrict __optionp,
        char *__const *__restrict __tokens,
        char **__restrict __valuep)
     throw () __attribute__ ((__nonnull__ (1, 2, 3))) ;
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern void setkey (__const char *__key) throw () __attribute__ ((__nonnull__ (1)));
#pragma line 921 "/usr/include/stdlib.h" 3 4
extern int grantpt (int __fd) throw ();
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern int unlockpt (int __fd) throw ();
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern char *ptsname (int __fd) throw () ;
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern int ptsname_r (int __fd, char *__buf, size_t __buflen)
     throw () __attribute__ ((__nonnull__ (2)));
#pragma empty_line
#pragma empty_line
extern int getpt (void);
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern int getloadavg (double __loadavg[], int __nelem)
     throw () __attribute__ ((__nonnull__ (1)));
#pragma line 964 "/usr/include/stdlib.h" 3 4
}
#pragma line 2 "/afs/cern.ch/user/p/psiddire/CMSSW_10_2_2/src/VivadoHLSProjects/HT/TestMakeHT.cpp" 2
#pragma line 1 "/home/sw_dir/Xilinx/Vivado_HLS/2016.4/lnx64/tools/gcc/bin/../lib/gcc/x86_64-unknown-linux-gnu/4.6.3/include/stdint.h" 1 3 4
#pragma empty_line
#pragma empty_line
#pragma line 1 "/usr/include/stdint.h" 1 3 4
#pragma line 27 "/usr/include/stdint.h" 3 4
#pragma line 1 "/usr/include/bits/wchar.h" 1 3 4
#pragma line 28 "/usr/include/stdint.h" 2 3 4
#pragma line 1 "/usr/include/bits/wordsize.h" 1 3 4
#pragma line 29 "/usr/include/stdint.h" 2 3 4
#pragma line 49 "/usr/include/stdint.h" 3 4
typedef unsigned char uint8_t;
typedef unsigned short int uint16_t;
#pragma empty_line
typedef unsigned int uint32_t;
#pragma empty_line
#pragma empty_line
#pragma empty_line
typedef unsigned long int uint64_t;
#pragma line 66 "/usr/include/stdint.h" 3 4
typedef signed char int_least8_t;
typedef short int int_least16_t;
typedef int int_least32_t;
#pragma empty_line
typedef long int int_least64_t;
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
typedef unsigned char uint_least8_t;
typedef unsigned short int uint_least16_t;
typedef unsigned int uint_least32_t;
#pragma empty_line
typedef unsigned long int uint_least64_t;
#pragma line 91 "/usr/include/stdint.h" 3 4
typedef signed char int_fast8_t;
#pragma empty_line
typedef long int int_fast16_t;
typedef long int int_fast32_t;
typedef long int int_fast64_t;
#pragma line 104 "/usr/include/stdint.h" 3 4
typedef unsigned char uint_fast8_t;
#pragma empty_line
typedef unsigned long int uint_fast16_t;
typedef unsigned long int uint_fast32_t;
typedef unsigned long int uint_fast64_t;
#pragma line 120 "/usr/include/stdint.h" 3 4
typedef long int intptr_t;
#pragma empty_line
#pragma empty_line
typedef unsigned long int uintptr_t;
#pragma line 135 "/usr/include/stdint.h" 3 4
typedef long int intmax_t;
typedef unsigned long int uintmax_t;
#pragma line 4 "/home/sw_dir/Xilinx/Vivado_HLS/2016.4/lnx64/tools/gcc/bin/../lib/gcc/x86_64-unknown-linux-gnu/4.6.3/include/stdint.h" 2 3 4
#pragma line 3 "/afs/cern.ch/user/p/psiddire/CMSSW_10_2_2/src/VivadoHLSProjects/HT/TestMakeHT.cpp" 2
#pragma line 1 "/usr/include/string.h" 1 3 4
#pragma line 29 "/usr/include/string.h" 3 4
extern "C" {
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma line 1 "/home/sw_dir/Xilinx/Vivado_HLS/2016.4/lnx64/tools/gcc/bin/../lib/gcc/x86_64-unknown-linux-gnu/4.6.3/include/stddef.h" 1 3 4
#pragma line 35 "/usr/include/string.h" 2 3 4
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern void *memcpy (void *__restrict __dest,
       __const void *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));
#pragma empty_line
#pragma empty_line
extern void *memmove (void *__dest, __const void *__src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern void *memccpy (void *__restrict __dest, __const void *__restrict __src,
        int __c, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern void *memset (void *__s, int __c, size_t __n) throw () __attribute__ ((__nonnull__ (1)));
#pragma empty_line
#pragma empty_line
extern int memcmp (__const void *__s1, __const void *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern "C++"
{
extern void *memchr (void *__s, int __c, size_t __n)
      throw () __asm ("memchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern __const void *memchr (__const void *__s, int __c, size_t __n)
      throw () __asm ("memchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
#pragma line 93 "/usr/include/string.h" 3 4
}
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern "C++" void *rawmemchr (void *__s, int __c)
     throw () __asm ("rawmemchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern "C++" __const void *rawmemchr (__const void *__s, int __c)
     throw () __asm ("rawmemchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern "C++" void *memrchr (void *__s, int __c, size_t __n)
      throw () __asm ("memrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern "C++" __const void *memrchr (__const void *__s, int __c, size_t __n)
      throw () __asm ("memrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern char *strcpy (char *__restrict __dest, __const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));
#pragma empty_line
extern char *strncpy (char *__restrict __dest,
        __const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));
#pragma empty_line
#pragma empty_line
extern char *strcat (char *__restrict __dest, __const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));
#pragma empty_line
extern char *strncat (char *__restrict __dest, __const char *__restrict __src,
        size_t __n) throw () __attribute__ ((__nonnull__ (1, 2)));
#pragma empty_line
#pragma empty_line
extern int strcmp (__const char *__s1, __const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
#pragma empty_line
extern int strncmp (__const char *__s1, __const char *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
#pragma empty_line
#pragma empty_line
extern int strcoll (__const char *__s1, __const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
#pragma empty_line
extern size_t strxfrm (char *__restrict __dest,
         __const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (2)));
#pragma empty_line
#pragma line 165 "/usr/include/string.h" 3 4
extern int strcoll_l (__const char *__s1, __const char *__s2, __locale_t __l)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));
#pragma empty_line
extern size_t strxfrm_l (char *__dest, __const char *__src, size_t __n,
    __locale_t __l) throw () __attribute__ ((__nonnull__ (2, 4)));
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern char *strdup (__const char *__s)
     throw () __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern char *strndup (__const char *__string, size_t __n)
     throw () __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));
#pragma line 210 "/usr/include/string.h" 3 4
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern "C++"
{
extern char *strchr (char *__s, int __c)
     throw () __asm ("strchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern __const char *strchr (__const char *__s, int __c)
     throw () __asm ("strchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
#pragma line 233 "/usr/include/string.h" 3 4
}
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern "C++"
{
extern char *strrchr (char *__s, int __c)
     throw () __asm ("strrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern __const char *strrchr (__const char *__s, int __c)
     throw () __asm ("strrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
#pragma line 260 "/usr/include/string.h" 3 4
}
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern "C++" char *strchrnul (char *__s, int __c)
     throw () __asm ("strchrnul") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern "C++" __const char *strchrnul (__const char *__s, int __c)
     throw () __asm ("strchrnul") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern size_t strcspn (__const char *__s, __const char *__reject)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
#pragma empty_line
#pragma empty_line
extern size_t strspn (__const char *__s, __const char *__accept)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
#pragma empty_line
#pragma empty_line
extern "C++"
{
extern char *strpbrk (char *__s, __const char *__accept)
     throw () __asm ("strpbrk") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
extern __const char *strpbrk (__const char *__s, __const char *__accept)
     throw () __asm ("strpbrk") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
#pragma line 312 "/usr/include/string.h" 3 4
}
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern "C++"
{
extern char *strstr (char *__haystack, __const char *__needle)
     throw () __asm ("strstr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
extern __const char *strstr (__const char *__haystack,
        __const char *__needle)
     throw () __asm ("strstr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
#pragma line 340 "/usr/include/string.h" 3 4
}
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern char *strtok (char *__restrict __s, __const char *__restrict __delim)
     throw () __attribute__ ((__nonnull__ (2)));
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern char *__strtok_r (char *__restrict __s,
    __const char *__restrict __delim,
    char **__restrict __save_ptr)
     throw () __attribute__ ((__nonnull__ (2, 3)));
#pragma empty_line
extern char *strtok_r (char *__restrict __s, __const char *__restrict __delim,
         char **__restrict __save_ptr)
     throw () __attribute__ ((__nonnull__ (2, 3)));
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern "C++" char *strcasestr (char *__haystack, __const char *__needle)
     throw () __asm ("strcasestr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
extern "C++" __const char *strcasestr (__const char *__haystack,
           __const char *__needle)
     throw () __asm ("strcasestr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
#pragma line 382 "/usr/include/string.h" 3 4
extern void *memmem (__const void *__haystack, size_t __haystacklen,
       __const void *__needle, size_t __needlelen)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 3)));
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern void *__mempcpy (void *__restrict __dest,
   __const void *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern void *mempcpy (void *__restrict __dest,
        __const void *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern size_t strlen (__const char *__s)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern size_t strnlen (__const char *__string, size_t __maxlen)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern char *strerror (int __errnum) throw ();
#pragma empty_line
#pragma line 438 "/usr/include/string.h" 3 4
extern char *strerror_r (int __errnum, char *__buf, size_t __buflen)
     throw () __attribute__ ((__nonnull__ (2)));
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern char *strerror_l (int __errnum, __locale_t __l) throw ();
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern void __bzero (void *__s, size_t __n) throw () __attribute__ ((__nonnull__ (1)));
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern void bcopy (__const void *__src, void *__dest, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));
#pragma empty_line
#pragma empty_line
extern void bzero (void *__s, size_t __n) throw () __attribute__ ((__nonnull__ (1)));
#pragma empty_line
#pragma empty_line
extern int bcmp (__const void *__s1, __const void *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern "C++"
{
extern char *index (char *__s, int __c)
     throw () __asm ("index") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern __const char *index (__const char *__s, int __c)
     throw () __asm ("index") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
#pragma line 487 "/usr/include/string.h" 3 4
}
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern "C++"
{
extern char *rindex (char *__s, int __c)
     throw () __asm ("rindex") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern __const char *rindex (__const char *__s, int __c)
     throw () __asm ("rindex") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
#pragma line 515 "/usr/include/string.h" 3 4
}
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern int ffs (int __i) throw () __attribute__ ((__const__));
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern int ffsl (long int __l) throw () __attribute__ ((__const__));
#pragma empty_line
__extension__ extern int ffsll (long long int __ll)
     throw () __attribute__ ((__const__));
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern int strcasecmp (__const char *__s1, __const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
#pragma empty_line
#pragma empty_line
extern int strncasecmp (__const char *__s1, __const char *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern int strcasecmp_l (__const char *__s1, __const char *__s2,
    __locale_t __loc)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));
#pragma empty_line
extern int strncasecmp_l (__const char *__s1, __const char *__s2,
     size_t __n, __locale_t __loc)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 4)));
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern char *strsep (char **__restrict __stringp,
       __const char *__restrict __delim)
     throw () __attribute__ ((__nonnull__ (1, 2)));
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern char *strsignal (int __sig) throw ();
#pragma empty_line
#pragma empty_line
extern char *__stpcpy (char *__restrict __dest, __const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern char *stpcpy (char *__restrict __dest, __const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern char *__stpncpy (char *__restrict __dest,
   __const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern char *stpncpy (char *__restrict __dest,
        __const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern int strverscmp (__const char *__s1, __const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
#pragma empty_line
#pragma empty_line
extern char *strfry (char *__string) throw () __attribute__ ((__nonnull__ (1)));
#pragma empty_line
#pragma empty_line
extern void *memfrob (void *__s, size_t __n) throw () __attribute__ ((__nonnull__ (1)));
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern "C++" char *basename (char *__filename)
     throw () __asm ("basename") __attribute__ ((__nonnull__ (1)));
extern "C++" __const char *basename (__const char *__filename)
     throw () __asm ("basename") __attribute__ ((__nonnull__ (1)));
#pragma line 646 "/usr/include/string.h" 3 4
}
#pragma line 4 "/afs/cern.ch/user/p/psiddire/CMSSW_10_2_2/src/VivadoHLSProjects/HT/TestMakeHT.cpp" 2
#pragma line 1 "/usr/include/stdio.h" 1 3 4
#pragma line 30 "/usr/include/stdio.h" 3 4
extern "C" {
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma line 1 "/home/sw_dir/Xilinx/Vivado_HLS/2016.4/lnx64/tools/gcc/bin/../lib/gcc/x86_64-unknown-linux-gnu/4.6.3/include/stddef.h" 1 3 4
#pragma line 35 "/usr/include/stdio.h" 2 3 4
#pragma line 45 "/usr/include/stdio.h" 3 4
struct _IO_FILE;
#pragma empty_line
#pragma empty_line
#pragma empty_line
typedef struct _IO_FILE FILE;
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma line 65 "/usr/include/stdio.h" 3 4
typedef struct _IO_FILE __FILE;
#pragma line 75 "/usr/include/stdio.h" 3 4
#pragma line 1 "/usr/include/libio.h" 1 3 4
#pragma line 32 "/usr/include/libio.h" 3 4
#pragma line 1 "/usr/include/_G_config.h" 1 3 4
#pragma line 15 "/usr/include/_G_config.h" 3 4
#pragma line 1 "/home/sw_dir/Xilinx/Vivado_HLS/2016.4/lnx64/tools/gcc/bin/../lib/gcc/x86_64-unknown-linux-gnu/4.6.3/include/stddef.h" 1 3 4
#pragma line 16 "/usr/include/_G_config.h" 2 3 4
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma line 1 "/home/sw_dir/Xilinx/Vivado_HLS/2016.4/lnx64/tools/gcc/bin/../lib/gcc/x86_64-unknown-linux-gnu/4.6.3/include-fixed/wchar.h" 1 3 4
#pragma line 57 "/home/sw_dir/Xilinx/Vivado_HLS/2016.4/lnx64/tools/gcc/bin/../lib/gcc/x86_64-unknown-linux-gnu/4.6.3/include-fixed/wchar.h" 3 4
#pragma line 1 "/home/sw_dir/Xilinx/Vivado_HLS/2016.4/lnx64/tools/gcc/bin/../lib/gcc/x86_64-unknown-linux-gnu/4.6.3/include/stddef.h" 1 3 4
#pragma line 353 "/home/sw_dir/Xilinx/Vivado_HLS/2016.4/lnx64/tools/gcc/bin/../lib/gcc/x86_64-unknown-linux-gnu/4.6.3/include/stddef.h" 3 4
typedef unsigned int wint_t;
#pragma line 58 "/home/sw_dir/Xilinx/Vivado_HLS/2016.4/lnx64/tools/gcc/bin/../lib/gcc/x86_64-unknown-linux-gnu/4.6.3/include-fixed/wchar.h" 2 3 4
#pragma line 85 "/home/sw_dir/Xilinx/Vivado_HLS/2016.4/lnx64/tools/gcc/bin/../lib/gcc/x86_64-unknown-linux-gnu/4.6.3/include-fixed/wchar.h" 3 4
typedef struct
{
  int __count;
  union
  {
    wint_t __wch;
    char __wchb[4];
  } __value;
} __mbstate_t;
#pragma line 21 "/usr/include/_G_config.h" 2 3 4
#pragma empty_line
typedef struct
{
  __off_t __pos;
  __mbstate_t __state;
} _G_fpos_t;
typedef struct
{
  __off64_t __pos;
  __mbstate_t __state;
} _G_fpos64_t;
#pragma line 53 "/usr/include/_G_config.h" 3 4
typedef int _G_int16_t __attribute__ ((__mode__ (__HI__)));
typedef int _G_int32_t __attribute__ ((__mode__ (__SI__)));
typedef unsigned int _G_uint16_t __attribute__ ((__mode__ (__HI__)));
typedef unsigned int _G_uint32_t __attribute__ ((__mode__ (__SI__)));
#pragma line 33 "/usr/include/libio.h" 2 3 4
#pragma line 53 "/usr/include/libio.h" 3 4
#pragma line 1 "/home/sw_dir/Xilinx/Vivado_HLS/2016.4/lnx64/tools/gcc/bin/../lib/gcc/x86_64-unknown-linux-gnu/4.6.3/include/stdarg.h" 1 3 4
#pragma line 40 "/home/sw_dir/Xilinx/Vivado_HLS/2016.4/lnx64/tools/gcc/bin/../lib/gcc/x86_64-unknown-linux-gnu/4.6.3/include/stdarg.h" 3 4
typedef __builtin_va_list __gnuc_va_list;
#pragma line 54 "/usr/include/libio.h" 2 3 4
#pragma line 170 "/usr/include/libio.h" 3 4
struct _IO_jump_t; struct _IO_FILE;
#pragma line 180 "/usr/include/libio.h" 3 4
typedef void _IO_lock_t;
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
struct _IO_marker {
  struct _IO_marker *_next;
  struct _IO_FILE *_sbuf;
#pragma empty_line
#pragma empty_line
#pragma empty_line
  int _pos;
#pragma line 203 "/usr/include/libio.h" 3 4
};
#pragma empty_line
#pragma empty_line
enum __codecvt_result
{
  __codecvt_ok,
  __codecvt_partial,
  __codecvt_error,
  __codecvt_noconv
};
#pragma line 271 "/usr/include/libio.h" 3 4
struct _IO_FILE {
  int _flags;
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
  char* _IO_read_ptr;
  char* _IO_read_end;
  char* _IO_read_base;
  char* _IO_write_base;
  char* _IO_write_ptr;
  char* _IO_write_end;
  char* _IO_buf_base;
  char* _IO_buf_end;
#pragma empty_line
  char *_IO_save_base;
  char *_IO_backup_base;
  char *_IO_save_end;
#pragma empty_line
  struct _IO_marker *_markers;
#pragma empty_line
  struct _IO_FILE *_chain;
#pragma empty_line
  int _fileno;
#pragma empty_line
#pragma empty_line
#pragma empty_line
  int _flags2;
#pragma empty_line
  __off_t _old_offset;
#pragma empty_line
#pragma empty_line
#pragma empty_line
  unsigned short _cur_column;
  signed char _vtable_offset;
  char _shortbuf[1];
#pragma empty_line
#pragma empty_line
#pragma empty_line
  _IO_lock_t *_lock;
#pragma line 319 "/usr/include/libio.h" 3 4
  __off64_t _offset;
#pragma line 328 "/usr/include/libio.h" 3 4
  void *__pad1;
  void *__pad2;
  void *__pad3;
  void *__pad4;
  size_t __pad5;
#pragma empty_line
  int _mode;
#pragma empty_line
  char _unused2[15 * sizeof (int) - 4 * sizeof (void *) - sizeof (size_t)];
#pragma empty_line
};
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
struct _IO_FILE_plus;
#pragma empty_line
extern struct _IO_FILE_plus _IO_2_1_stdin_;
extern struct _IO_FILE_plus _IO_2_1_stdout_;
extern struct _IO_FILE_plus _IO_2_1_stderr_;
#pragma line 364 "/usr/include/libio.h" 3 4
typedef __ssize_t __io_read_fn (void *__cookie, char *__buf, size_t __nbytes);
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
typedef __ssize_t __io_write_fn (void *__cookie, __const char *__buf,
     size_t __n);
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
typedef int __io_seek_fn (void *__cookie, __off64_t *__pos, int __w);
#pragma empty_line
#pragma empty_line
typedef int __io_close_fn (void *__cookie);
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
typedef __io_read_fn cookie_read_function_t;
typedef __io_write_fn cookie_write_function_t;
typedef __io_seek_fn cookie_seek_function_t;
typedef __io_close_fn cookie_close_function_t;
#pragma empty_line
#pragma empty_line
typedef struct
{
  __io_read_fn *read;
  __io_write_fn *write;
  __io_seek_fn *seek;
  __io_close_fn *close;
} _IO_cookie_io_functions_t;
typedef _IO_cookie_io_functions_t cookie_io_functions_t;
#pragma empty_line
struct _IO_cookie_file;
#pragma empty_line
#pragma empty_line
extern void _IO_cookie_init (struct _IO_cookie_file *__cfile, int __read_write,
        void *__cookie, _IO_cookie_io_functions_t __fns);
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern "C" {
#pragma empty_line
#pragma empty_line
extern int __underflow (_IO_FILE *);
extern int __uflow (_IO_FILE *);
extern int __overflow (_IO_FILE *, int);
#pragma line 460 "/usr/include/libio.h" 3 4
extern int _IO_getc (_IO_FILE *__fp);
extern int _IO_putc (int __c, _IO_FILE *__fp);
extern int _IO_feof (_IO_FILE *__fp) throw ();
extern int _IO_ferror (_IO_FILE *__fp) throw ();
#pragma empty_line
extern int _IO_peekc_locked (_IO_FILE *__fp);
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern void _IO_flockfile (_IO_FILE *) throw ();
extern void _IO_funlockfile (_IO_FILE *) throw ();
extern int _IO_ftrylockfile (_IO_FILE *) throw ();
#pragma line 490 "/usr/include/libio.h" 3 4
extern int _IO_vfscanf (_IO_FILE * __restrict, const char * __restrict,
   __gnuc_va_list, int *__restrict);
extern int _IO_vfprintf (_IO_FILE *__restrict, const char *__restrict,
    __gnuc_va_list);
extern __ssize_t _IO_padn (_IO_FILE *, int, __ssize_t);
extern size_t _IO_sgetn (_IO_FILE *, void *, size_t);
#pragma empty_line
extern __off64_t _IO_seekoff (_IO_FILE *, __off64_t, int, int);
extern __off64_t _IO_seekpos (_IO_FILE *, __off64_t, int);
#pragma empty_line
extern void _IO_free_backup_area (_IO_FILE *) throw ();
#pragma line 552 "/usr/include/libio.h" 3 4
}
#pragma line 76 "/usr/include/stdio.h" 2 3 4
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
typedef __gnuc_va_list va_list;
#pragma line 109 "/usr/include/stdio.h" 3 4
#pragma empty_line
#pragma empty_line
typedef _G_fpos_t fpos_t;
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
typedef _G_fpos64_t fpos64_t;
#pragma line 161 "/usr/include/stdio.h" 3 4
#pragma line 1 "/usr/include/bits/stdio_lim.h" 1 3 4
#pragma line 162 "/usr/include/stdio.h" 2 3 4
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern struct _IO_FILE *stdin;
extern struct _IO_FILE *stdout;
extern struct _IO_FILE *stderr;
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern int remove (__const char *__filename) throw ();
#pragma empty_line
extern int rename (__const char *__old, __const char *__new) throw ();
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern int renameat (int __oldfd, __const char *__old, int __newfd,
       __const char *__new) throw ();
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern FILE *tmpfile (void) ;
#pragma line 204 "/usr/include/stdio.h" 3 4
extern FILE *tmpfile64 (void) ;
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern char *tmpnam (char *__s) throw () ;
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern char *tmpnam_r (char *__s) throw () ;
#pragma line 226 "/usr/include/stdio.h" 3 4
extern char *tempnam (__const char *__dir, __const char *__pfx)
     throw () __attribute__ ((__malloc__)) ;
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern int fclose (FILE *__stream);
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern int fflush (FILE *__stream);
#pragma empty_line
#pragma line 251 "/usr/include/stdio.h" 3 4
extern int fflush_unlocked (FILE *__stream);
#pragma line 261 "/usr/include/stdio.h" 3 4
extern int fcloseall (void);
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern FILE *fopen (__const char *__restrict __filename,
      __const char *__restrict __modes) ;
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern FILE *freopen (__const char *__restrict __filename,
        __const char *__restrict __modes,
        FILE *__restrict __stream) ;
#pragma line 294 "/usr/include/stdio.h" 3 4
#pragma empty_line
#pragma empty_line
extern FILE *fopen64 (__const char *__restrict __filename,
        __const char *__restrict __modes) ;
extern FILE *freopen64 (__const char *__restrict __filename,
   __const char *__restrict __modes,
   FILE *__restrict __stream) ;
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern FILE *fdopen (int __fd, __const char *__modes) throw () ;
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern FILE *fopencookie (void *__restrict __magic_cookie,
     __const char *__restrict __modes,
     _IO_cookie_io_functions_t __io_funcs) throw () ;
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern FILE *fmemopen (void *__s, size_t __len, __const char *__modes)
  throw () ;
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern FILE *open_memstream (char **__bufloc, size_t *__sizeloc) throw () ;
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern void setbuf (FILE *__restrict __stream, char *__restrict __buf) throw ();
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern int setvbuf (FILE *__restrict __stream, char *__restrict __buf,
      int __modes, size_t __n) throw ();
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern void setbuffer (FILE *__restrict __stream, char *__restrict __buf,
         size_t __size) throw ();
#pragma empty_line
#pragma empty_line
extern void setlinebuf (FILE *__stream) throw ();
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern int fprintf (FILE *__restrict __stream,
      __const char *__restrict __format, ...);
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern int printf (__const char *__restrict __format, ...);
#pragma empty_line
extern int sprintf (char *__restrict __s,
      __const char *__restrict __format, ...) throw ();
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern int vfprintf (FILE *__restrict __s, __const char *__restrict __format,
       __gnuc_va_list __arg);
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern int vprintf (__const char *__restrict __format, __gnuc_va_list __arg);
#pragma empty_line
extern int vsprintf (char *__restrict __s, __const char *__restrict __format,
       __gnuc_va_list __arg) throw ();
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern int snprintf (char *__restrict __s, size_t __maxlen,
       __const char *__restrict __format, ...)
     throw () __attribute__ ((__format__ (__printf__, 3, 4)));
#pragma empty_line
extern int vsnprintf (char *__restrict __s, size_t __maxlen,
        __const char *__restrict __format, __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__printf__, 3, 0)));
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern int vasprintf (char **__restrict __ptr, __const char *__restrict __f,
        __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__printf__, 2, 0))) ;
extern int __asprintf (char **__restrict __ptr,
         __const char *__restrict __fmt, ...)
     throw () __attribute__ ((__format__ (__printf__, 2, 3))) ;
extern int asprintf (char **__restrict __ptr,
       __const char *__restrict __fmt, ...)
     throw () __attribute__ ((__format__ (__printf__, 2, 3))) ;
#pragma line 416 "/usr/include/stdio.h" 3 4
extern int vdprintf (int __fd, __const char *__restrict __fmt,
       __gnuc_va_list __arg)
     __attribute__ ((__format__ (__printf__, 2, 0)));
extern int dprintf (int __fd, __const char *__restrict __fmt, ...)
     __attribute__ ((__format__ (__printf__, 2, 3)));
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern int fscanf (FILE *__restrict __stream,
     __const char *__restrict __format, ...) ;
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern int scanf (__const char *__restrict __format, ...) ;
#pragma empty_line
extern int sscanf (__const char *__restrict __s,
     __const char *__restrict __format, ...) throw ();
#pragma line 467 "/usr/include/stdio.h" 3 4
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern int vfscanf (FILE *__restrict __s, __const char *__restrict __format,
      __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 2, 0))) ;
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern int vscanf (__const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 1, 0))) ;
#pragma empty_line
#pragma empty_line
extern int vsscanf (__const char *__restrict __s,
      __const char *__restrict __format, __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__scanf__, 2, 0)));
#pragma line 526 "/usr/include/stdio.h" 3 4
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern int fgetc (FILE *__stream);
extern int getc (FILE *__stream);
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern int getchar (void);
#pragma empty_line
#pragma line 554 "/usr/include/stdio.h" 3 4
extern int getc_unlocked (FILE *__stream);
extern int getchar_unlocked (void);
#pragma line 565 "/usr/include/stdio.h" 3 4
extern int fgetc_unlocked (FILE *__stream);
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern int fputc (int __c, FILE *__stream);
extern int putc (int __c, FILE *__stream);
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern int putchar (int __c);
#pragma empty_line
#pragma line 598 "/usr/include/stdio.h" 3 4
extern int fputc_unlocked (int __c, FILE *__stream);
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern int putc_unlocked (int __c, FILE *__stream);
extern int putchar_unlocked (int __c);
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern int getw (FILE *__stream);
#pragma empty_line
#pragma empty_line
extern int putw (int __w, FILE *__stream);
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern char *fgets (char *__restrict __s, int __n, FILE *__restrict __stream)
     ;
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern char *gets (char *__s) ;
#pragma empty_line
#pragma line 644 "/usr/include/stdio.h" 3 4
extern char *fgets_unlocked (char *__restrict __s, int __n,
        FILE *__restrict __stream) ;
#pragma line 660 "/usr/include/stdio.h" 3 4
extern __ssize_t __getdelim (char **__restrict __lineptr,
          size_t *__restrict __n, int __delimiter,
          FILE *__restrict __stream) ;
extern __ssize_t getdelim (char **__restrict __lineptr,
        size_t *__restrict __n, int __delimiter,
        FILE *__restrict __stream) ;
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern __ssize_t getline (char **__restrict __lineptr,
       size_t *__restrict __n,
       FILE *__restrict __stream) ;
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern int fputs (__const char *__restrict __s, FILE *__restrict __stream);
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern int puts (__const char *__s);
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern int ungetc (int __c, FILE *__stream);
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern size_t fread (void *__restrict __ptr, size_t __size,
       size_t __n, FILE *__restrict __stream) ;
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern size_t fwrite (__const void *__restrict __ptr, size_t __size,
        size_t __n, FILE *__restrict __s) ;
#pragma empty_line
#pragma line 721 "/usr/include/stdio.h" 3 4
extern int fputs_unlocked (__const char *__restrict __s,
      FILE *__restrict __stream);
#pragma line 732 "/usr/include/stdio.h" 3 4
extern size_t fread_unlocked (void *__restrict __ptr, size_t __size,
         size_t __n, FILE *__restrict __stream) ;
extern size_t fwrite_unlocked (__const void *__restrict __ptr, size_t __size,
          size_t __n, FILE *__restrict __stream) ;
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern int fseek (FILE *__stream, long int __off, int __whence);
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern long int ftell (FILE *__stream) ;
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern void rewind (FILE *__stream);
#pragma empty_line
#pragma line 768 "/usr/include/stdio.h" 3 4
extern int fseeko (FILE *__stream, __off_t __off, int __whence);
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern __off_t ftello (FILE *__stream) ;
#pragma line 787 "/usr/include/stdio.h" 3 4
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern int fgetpos (FILE *__restrict __stream, fpos_t *__restrict __pos);
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern int fsetpos (FILE *__stream, __const fpos_t *__pos);
#pragma line 810 "/usr/include/stdio.h" 3 4
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern int fseeko64 (FILE *__stream, __off64_t __off, int __whence);
extern __off64_t ftello64 (FILE *__stream) ;
extern int fgetpos64 (FILE *__restrict __stream, fpos64_t *__restrict __pos);
extern int fsetpos64 (FILE *__stream, __const fpos64_t *__pos);
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern void clearerr (FILE *__stream) throw ();
#pragma empty_line
extern int feof (FILE *__stream) throw () ;
#pragma empty_line
extern int ferror (FILE *__stream) throw () ;
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern void clearerr_unlocked (FILE *__stream) throw ();
extern int feof_unlocked (FILE *__stream) throw () ;
extern int ferror_unlocked (FILE *__stream) throw () ;
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern void perror (__const char *__s);
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma line 1 "/usr/include/bits/sys_errlist.h" 1 3 4
#pragma line 27 "/usr/include/bits/sys_errlist.h" 3 4
extern int sys_nerr;
extern __const char *__const sys_errlist[];
#pragma empty_line
#pragma empty_line
extern int _sys_nerr;
extern __const char *__const _sys_errlist[];
#pragma line 849 "/usr/include/stdio.h" 2 3 4
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern int fileno (FILE *__stream) throw () ;
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern int fileno_unlocked (FILE *__stream) throw () ;
#pragma line 868 "/usr/include/stdio.h" 3 4
extern FILE *popen (__const char *__command, __const char *__modes) ;
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern int pclose (FILE *__stream);
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern char *ctermid (char *__s) throw ();
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern char *cuserid (char *__s);
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
struct obstack;
#pragma empty_line
#pragma empty_line
extern int obstack_printf (struct obstack *__restrict __obstack,
      __const char *__restrict __format, ...)
     throw () __attribute__ ((__format__ (__printf__, 2, 3)));
extern int obstack_vprintf (struct obstack *__restrict __obstack,
       __const char *__restrict __format,
       __gnuc_va_list __args)
     throw () __attribute__ ((__format__ (__printf__, 2, 0)));
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern void flockfile (FILE *__stream) throw ();
#pragma empty_line
#pragma empty_line
#pragma empty_line
extern int ftrylockfile (FILE *__stream) throw () ;
#pragma empty_line
#pragma empty_line
extern void funlockfile (FILE *__stream) throw ();
#pragma line 938 "/usr/include/stdio.h" 3 4
}
#pragma line 5 "/afs/cern.ch/user/p/psiddire/CMSSW_10_2_2/src/VivadoHLSProjects/HT/TestMakeHT.cpp" 2
#pragma empty_line
#pragma line 1 "/afs/cern.ch/user/p/psiddire/CMSSW_10_2_2/src/VivadoHLSProjects/HT/MakeHT.h" 1
#pragma line 20 "/afs/cern.ch/user/p/psiddire/CMSSW_10_2_2/src/VivadoHLSProjects/HT/MakeHT.h"
#pragma line 1 "/afs/cern.ch/user/p/psiddire/CMSSW_10_2_2/src/VivadoHLSProjects/HT/LUTs.h" 1
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
static const uint16_t rgnETLUT[0x400][7*2] = {
{000000, 000000, 000000, 000000, 000000, 000000, 000000, 000000, 000000, 000000, 0x0001, 0x0001, 0x0001, 0x0001},
{0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0002, 0x0002, 0x0002, 0x0002, 0x0002, 0x0003, 0x0003, 0x0003, 0x0003},
{0x0002, 0x0002, 0x0002, 0x0002, 0x0003, 0x0003, 0x0003, 0x0004, 0x0004, 0x0004, 0x0005, 0x0005, 0x0005, 0x0005},
{0x0003, 0x0003, 0x0003, 0x0004, 0x0004, 0x0005, 0x0005, 0x0005, 0x0006, 0x0006, 0x0007, 0x0007, 0x0007, 0x0008},
{0x0004, 0x0004, 0x0005, 0x0005, 0x0006, 0x0006, 0x0007, 0x0007, 0x0008, 0x0008, 0x0009, 0x0009, 0x000a, 0x000a},
{0x0005, 0x0005, 0x0006, 0x0006, 0x0007, 0x0008, 0x0008, 0x0009, 0x0009, 0x000a, 0x000b, 0x000b, 0x000c, 0x000c},
{0x0006, 0x0006, 0x0007, 0x0008, 0x0008, 0x0009, 0x000a, 0x000a, 0x000b, 0x000c, 0x000d, 0x000d, 0x000e, 0x000f},
{0x0007, 0x0007, 0x0008, 0x0009, 0x000a, 0x000b, 0x000b, 0x000c, 0x000d, 0x000e, 0x000f, 0x000f, 0x0010, 0x0011},
{0x0008, 0x0008, 0x0009, 0x000a, 0x000b, 0x000c, 0x000d, 0x000e, 0x000f, 0x0010, 0x0011, 0x0011, 0x0012, 0x0013},
{0x0009, 0x000a, 0x000a, 0x000c, 0x000d, 0x000e, 0x000f, 0x0010, 0x0011, 0x0011, 0x0013, 0x0014, 0x0015, 0x0016},
{0x000a, 0x000b, 0x000c, 0x000d, 0x000e, 0x000f, 0x0010, 0x0011, 0x0012, 0x0013, 0x0015, 0x0016, 0x0017, 0x0018},
{0x000b, 0x000c, 0x000d, 0x000e, 0x000f, 0x0011, 0x0012, 0x0013, 0x0014, 0x0015, 0x0017, 0x0018, 0x0019, 0x001a},
{0x000c, 0x000d, 0x000e, 0x000f, 0x0011, 0x0012, 0x0013, 0x0015, 0x0016, 0x0017, 0x0019, 0x001a, 0x001b, 0x001c},
{0x000d, 0x000e, 0x000f, 0x0011, 0x0012, 0x0014, 0x0015, 0x0016, 0x0018, 0x0019, 0x001b, 0x001c, 0x001d, 0x001f},
{0x000e, 0x000f, 0x0011, 0x0012, 0x0013, 0x0015, 0x0017, 0x0018, 0x001a, 0x001b, 0x001d, 0x001e, 0x0020, 0x0021},
{0x000f, 0x0010, 0x0012, 0x0013, 0x0015, 0x0017, 0x0018, 0x001a, 0x001b, 0x001d, 0x001f, 0x0020, 0x0022, 0x0023},
{0x0010, 0x0011, 0x0013, 0x0015, 0x0016, 0x0018, 0x001a, 0x001b, 0x001d, 0x001f, 0x0021, 0x0022, 0x0024, 0x0026},
{0x0011, 0x0012, 0x0014, 0x0016, 0x0018, 0x001a, 0x001b, 0x001d, 0x001f, 0x0021, 0x0023, 0x0024, 0x0026, 0x0028},
{0x0012, 0x0013, 0x0015, 0x0017, 0x0019, 0x001b, 0x001d, 0x001f, 0x0021, 0x0023, 0x0025, 0x0026, 0x0028, 0x002a},
{0x0013, 0x0015, 0x0017, 0x0019, 0x001a, 0x001d, 0x001f, 0x0021, 0x0023, 0x0025, 0x0027, 0x0029, 0x002b, 0x002c},
{0x0014, 0x0016, 0x0018, 0x001a, 0x001c, 0x001e, 0x0020, 0x0022, 0x0024, 0x0026, 0x0029, 0x002b, 0x002d, 0x002f},
{0x0015, 0x0017, 0x0019, 0x001b, 0x001d, 0x0020, 0x0022, 0x0024, 0x0026, 0x0028, 0x002b, 0x002d, 0x002f, 0x0031},
{0x0016, 0x0018, 0x001a, 0x001c, 0x001f, 0x0021, 0x0023, 0x0026, 0x0028, 0x002a, 0x002d, 0x002f, 0x0031, 0x0033},
{0x0017, 0x0019, 0x001b, 0x001e, 0x0020, 0x0023, 0x0025, 0x0027, 0x002a, 0x002c, 0x002f, 0x0031, 0x0033, 0x0036},
{0x0018, 0x001a, 0x001c, 0x001f, 0x0021, 0x0024, 0x0027, 0x0029, 0x002c, 0x002e, 0x0031, 0x0033, 0x0036, 0x0038},
{0x0019, 0x001b, 0x001e, 0x0020, 0x0023, 0x0026, 0x0028, 0x002b, 0x002d, 0x0030, 0x0033, 0x0035, 0x0038, 0x003a},
{0x001a, 0x001c, 0x001f, 0x0022, 0x0024, 0x0027, 0x002a, 0x002c, 0x002f, 0x0032, 0x0035, 0x0037, 0x003a, 0x003d},
{0x001b, 0x001d, 0x0020, 0x0023, 0x0026, 0x0029, 0x002b, 0x002e, 0x0031, 0x0034, 0x0037, 0x0039, 0x003c, 0x003f},
{0x001c, 0x001e, 0x0021, 0x0024, 0x0027, 0x002a, 0x002d, 0x0030, 0x0033, 0x0036, 0x0039, 0x003b, 0x003e, 0x0041},
{0x001d, 0x0020, 0x0023, 0x0026, 0x0028, 0x002c, 0x002f, 0x0032, 0x0035, 0x0037, 0x003b, 0x003e, 0x0041, 0x0043},
{0x001e, 0x0021, 0x0024, 0x0027, 0x002a, 0x002d, 0x0030, 0x0033, 0x0036, 0x0039, 0x003d, 0x0040, 0x0043, 0x0046},
{0x001f, 0x0022, 0x0025, 0x0028, 0x002b, 0x002f, 0x0032, 0x0035, 0x0038, 0x003b, 0x003f, 0x0042, 0x0045, 0x0048},
{0x0020, 0x0023, 0x0026, 0x0029, 0x002d, 0x0030, 0x0033, 0x0037, 0x003a, 0x003d, 0x0041, 0x0044, 0x0047, 0x004a},
{0x0021, 0x0024, 0x0027, 0x002b, 0x002e, 0x0032, 0x0035, 0x0038, 0x003c, 0x003f, 0x0043, 0x0046, 0x0049, 0x004d},
{0x0022, 0x0025, 0x0029, 0x002c, 0x002f, 0x0033, 0x0037, 0x003a, 0x003e, 0x0041, 0x0045, 0x0048, 0x004c, 0x004f},
{0x0023, 0x0026, 0x002a, 0x002d, 0x0031, 0x0035, 0x0038, 0x003c, 0x003f, 0x0043, 0x0047, 0x004a, 0x004e, 0x0051},
{0x0024, 0x0027, 0x002b, 0x002f, 0x0032, 0x0036, 0x003a, 0x003d, 0x0041, 0x0045, 0x0049, 0x004c, 0x0050, 0x0054},
{0x0025, 0x0028, 0x002c, 0x0030, 0x0034, 0x0038, 0x003b, 0x003f, 0x0043, 0x0047, 0x004b, 0x004e, 0x0052, 0x0056},
{0x0026, 0x0029, 0x002d, 0x0031, 0x0035, 0x0039, 0x003d, 0x0041, 0x0045, 0x0049, 0x004d, 0x0050, 0x0054, 0x0058},
{0x0027, 0x002b, 0x002f, 0x0033, 0x0036, 0x003b, 0x003f, 0x0043, 0x0047, 0x004b, 0x004f, 0x0053, 0x0057, 0x005a},
{0x0028, 0x002c, 0x0030, 0x0034, 0x0038, 0x003c, 0x0040, 0x0044, 0x0048, 0x004c, 0x0051, 0x0055, 0x0059, 0x005d},
{0x0029, 0x002d, 0x0031, 0x0035, 0x0039, 0x003e, 0x0042, 0x0046, 0x004a, 0x004e, 0x0053, 0x0057, 0x005b, 0x005f},
{0x002a, 0x002e, 0x0032, 0x0036, 0x003b, 0x003f, 0x0043, 0x0048, 0x004c, 0x0050, 0x0055, 0x0059, 0x005d, 0x0061},
{0x002b, 0x002f, 0x0033, 0x0038, 0x003c, 0x0041, 0x0045, 0x0049, 0x004e, 0x0052, 0x0057, 0x005b, 0x005f, 0x0064},
{0x002c, 0x0030, 0x0035, 0x0039, 0x003d, 0x0042, 0x0047, 0x004b, 0x0050, 0x0054, 0x0059, 0x005d, 0x0062, 0x0066},
{0x002d, 0x0031, 0x0036, 0x003a, 0x003f, 0x0044, 0x0048, 0x004d, 0x0051, 0x0056, 0x005b, 0x005f, 0x0064, 0x0068},
{0x002e, 0x0032, 0x0037, 0x003c, 0x0040, 0x0045, 0x004a, 0x004e, 0x0053, 0x0058, 0x005d, 0x0061, 0x0066, 0x006b},
{0x002f, 0x0033, 0x0038, 0x003d, 0x0042, 0x0047, 0x004b, 0x0050, 0x0055, 0x005a, 0x005f, 0x0063, 0x0068, 0x006d},
{0x0030, 0x0034, 0x0039, 0x003e, 0x0043, 0x0048, 0x004d, 0x0052, 0x0057, 0x005c, 0x0061, 0x0065, 0x006a, 0x006f},
{0x0031, 0x0036, 0x003b, 0x0040, 0x0045, 0x004a, 0x004f, 0x0054, 0x0059, 0x005e, 0x0063, 0x0068, 0x006d, 0x0071},
{0x0032, 0x0037, 0x003c, 0x0041, 0x0046, 0x004b, 0x0050, 0x0055, 0x005a, 0x005f, 0x0065, 0x006a, 0x006f, 0x0074},
{0x0033, 0x0038, 0x003d, 0x0042, 0x0047, 0x004d, 0x0052, 0x0057, 0x005c, 0x0061, 0x0067, 0x006c, 0x0071, 0x0076},
{0x0034, 0x0039, 0x003e, 0x0043, 0x0049, 0x004e, 0x0053, 0x0059, 0x005e, 0x0063, 0x0069, 0x006e, 0x0073, 0x0078},
{0x0035, 0x003a, 0x003f, 0x0045, 0x004a, 0x0050, 0x0055, 0x005a, 0x0060, 0x0065, 0x006b, 0x0070, 0x0075, 0x007b},
{0x0036, 0x003b, 0x0041, 0x0046, 0x004c, 0x0051, 0x0057, 0x005c, 0x0062, 0x0067, 0x006d, 0x0072, 0x0078, 0x007d},
{0x0037, 0x003c, 0x0042, 0x0047, 0x004d, 0x0053, 0x0058, 0x005e, 0x0063, 0x0069, 0x006f, 0x0074, 0x007a, 0x007f},
{0x0038, 0x003d, 0x0043, 0x0049, 0x004e, 0x0054, 0x005a, 0x005f, 0x0065, 0x006b, 0x0071, 0x0076, 0x007c, 0x0082},
{0x0039, 0x003e, 0x0044, 0x004a, 0x0050, 0x0056, 0x005b, 0x0061, 0x0067, 0x006d, 0x0073, 0x0078, 0x007e, 0x0084},
{0x003a, 0x003f, 0x0045, 0x004b, 0x0051, 0x0057, 0x005d, 0x0063, 0x0069, 0x006f, 0x0075, 0x007a, 0x0080, 0x0086},
{0x003b, 0x0041, 0x0047, 0x004d, 0x0053, 0x0059, 0x005f, 0x0065, 0x006b, 0x0071, 0x0077, 0x007d, 0x0083, 0x0089},
{0x003c, 0x0042, 0x0048, 0x004e, 0x0054, 0x005a, 0x0060, 0x0066, 0x006c, 0x0072, 0x0079, 0x007f, 0x0085, 0x008b},
{0x003d, 0x0043, 0x0049, 0x004f, 0x0055, 0x005c, 0x0062, 0x0068, 0x006e, 0x0074, 0x007b, 0x0081, 0x0087, 0x008d},
{0x003e, 0x0044, 0x004a, 0x0050, 0x0057, 0x005d, 0x0063, 0x006a, 0x0070, 0x0076, 0x007d, 0x0083, 0x0089, 0x008f},
{0x003f, 0x0045, 0x004b, 0x0052, 0x0058, 0x005f, 0x0065, 0x006b, 0x0072, 0x0078, 0x007f, 0x0085, 0x008b, 0x0092},
{0x0040, 0x0046, 0x004d, 0x0053, 0x005a, 0x0060, 0x0067, 0x006d, 0x0074, 0x007a, 0x0081, 0x0087, 0x008e, 0x0094},
{0x0041, 0x0047, 0x004e, 0x0054, 0x005b, 0x0062, 0x0068, 0x006f, 0x0075, 0x007c, 0x0083, 0x0089, 0x0090, 0x0096},
{0x0042, 0x0048, 0x004f, 0x0056, 0x005c, 0x0063, 0x006a, 0x0070, 0x0077, 0x007e, 0x0085, 0x008b, 0x0092, 0x0099},
{0x0043, 0x0049, 0x0050, 0x0057, 0x005e, 0x0065, 0x006b, 0x0072, 0x0079, 0x0080, 0x0087, 0x008d, 0x0094, 0x009b},
{0x0044, 0x004a, 0x0051, 0x0058, 0x005f, 0x0066, 0x006d, 0x0074, 0x007b, 0x0082, 0x0089, 0x008f, 0x0096, 0x009d},
{0x0045, 0x004c, 0x0053, 0x005a, 0x0061, 0x0068, 0x006f, 0x0076, 0x007d, 0x0084, 0x008b, 0x0092, 0x0099, 0x00a0},
{0x0046, 0x004d, 0x0054, 0x005b, 0x0062, 0x0069, 0x0070, 0x0077, 0x007e, 0x0085, 0x008d, 0x0094, 0x009b, 0x00a2},
{0x0047, 0x004e, 0x0055, 0x005c, 0x0063, 0x006b, 0x0072, 0x0079, 0x0080, 0x0087, 0x008f, 0x0096, 0x009d, 0x00a4},
{0x0048, 0x004f, 0x0056, 0x005d, 0x0065, 0x006c, 0x0073, 0x007b, 0x0082, 0x0089, 0x0091, 0x0098, 0x009f, 0x00a6},
{0x0049, 0x0050, 0x0057, 0x005f, 0x0066, 0x006e, 0x0075, 0x007c, 0x0084, 0x008b, 0x0093, 0x009a, 0x00a1, 0x00a9},
{0x004a, 0x0051, 0x0059, 0x0060, 0x0068, 0x006f, 0x0077, 0x007e, 0x0086, 0x008d, 0x0095, 0x009c, 0x00a4, 0x00ab},
{0x004b, 0x0052, 0x005a, 0x0061, 0x0069, 0x0071, 0x0078, 0x0080, 0x0087, 0x008f, 0x0097, 0x009e, 0x00a6, 0x00ad},
{0x004c, 0x0053, 0x005b, 0x0063, 0x006a, 0x0072, 0x007a, 0x0081, 0x0089, 0x0091, 0x0099, 0x00a0, 0x00a8, 0x00b0},
{0x004d, 0x0054, 0x005c, 0x0064, 0x006c, 0x0074, 0x007b, 0x0083, 0x008b, 0x0093, 0x009b, 0x00a2, 0x00aa, 0x00b2},
{0x004e, 0x0055, 0x005d, 0x0065, 0x006d, 0x0075, 0x007d, 0x0085, 0x008d, 0x0095, 0x009d, 0x00a4, 0x00ac, 0x00b4},
{0x004f, 0x0057, 0x005f, 0x0067, 0x006f, 0x0077, 0x007f, 0x0087, 0x008f, 0x0097, 0x009f, 0x00a7, 0x00af, 0x00b7},
{0x0050, 0x0058, 0x0060, 0x0068, 0x0070, 0x0078, 0x0080, 0x0088, 0x0090, 0x0098, 0x00a1, 0x00a9, 0x00b1, 0x00b9},
{0x0051, 0x0059, 0x0061, 0x0069, 0x0071, 0x007a, 0x0082, 0x008a, 0x0092, 0x009a, 0x00a3, 0x00ab, 0x00b3, 0x00bb},
{0x0052, 0x005a, 0x0062, 0x006a, 0x0073, 0x007b, 0x0083, 0x008c, 0x0094, 0x009c, 0x00a5, 0x00ad, 0x00b5, 0x00bd},
{0x0053, 0x005b, 0x0063, 0x006c, 0x0074, 0x007d, 0x0085, 0x008d, 0x0096, 0x009e, 0x00a7, 0x00af, 0x00b7, 0x00c0},
{0x0054, 0x005c, 0x0065, 0x006d, 0x0076, 0x007e, 0x0087, 0x008f, 0x0098, 0x00a0, 0x00a9, 0x00b1, 0x00ba, 0x00c2},
{0x0055, 0x005d, 0x0066, 0x006e, 0x0077, 0x0080, 0x0088, 0x0091, 0x0099, 0x00a2, 0x00ab, 0x00b3, 0x00bc, 0x00c4},
{0x0056, 0x005e, 0x0067, 0x0070, 0x0078, 0x0081, 0x008a, 0x0092, 0x009b, 0x00a4, 0x00ad, 0x00b5, 0x00be, 0x00c7},
{0x0057, 0x005f, 0x0068, 0x0071, 0x007a, 0x0083, 0x008b, 0x0094, 0x009d, 0x00a6, 0x00af, 0x00b7, 0x00c0, 0x00c9},
{0x0058, 0x0060, 0x0069, 0x0072, 0x007b, 0x0084, 0x008d, 0x0096, 0x009f, 0x00a8, 0x00b1, 0x00b9, 0x00c2, 0x00cb},
{0x0059, 0x0062, 0x006b, 0x0074, 0x007d, 0x0086, 0x008f, 0x0098, 0x00a1, 0x00aa, 0x00b3, 0x00bc, 0x00c5, 0x00ce},
{0x005a, 0x0063, 0x006c, 0x0075, 0x007e, 0x0087, 0x0090, 0x0099, 0x00a2, 0x00ab, 0x00b5, 0x00be, 0x00c7, 0x00d0},
{0x005b, 0x0064, 0x006d, 0x0076, 0x007f, 0x0089, 0x0092, 0x009b, 0x00a4, 0x00ad, 0x00b7, 0x00c0, 0x00c9, 0x00d2},
{0x005c, 0x0065, 0x006e, 0x0077, 0x0081, 0x008a, 0x0093, 0x009d, 0x00a6, 0x00af, 0x00b9, 0x00c2, 0x00cb, 0x00d4},
{0x005d, 0x0066, 0x006f, 0x0079, 0x0082, 0x008c, 0x0095, 0x009e, 0x00a8, 0x00b1, 0x00bb, 0x00c4, 0x00cd, 0x00d7},
{0x005e, 0x0067, 0x0071, 0x007a, 0x0084, 0x008d, 0x0097, 0x00a0, 0x00aa, 0x00b3, 0x00bd, 0x00c6, 0x00d0, 0x00d9},
{0x005f, 0x0068, 0x0072, 0x007b, 0x0085, 0x008f, 0x0098, 0x00a2, 0x00ab, 0x00b5, 0x00bf, 0x00c8, 0x00d2, 0x00db},
{0x0060, 0x0069, 0x0073, 0x007d, 0x0086, 0x0090, 0x009a, 0x00a3, 0x00ad, 0x00b7, 0x00c1, 0x00ca, 0x00d4, 0x00de},
{0x0061, 0x006a, 0x0074, 0x007e, 0x0088, 0x0092, 0x009b, 0x00a5, 0x00af, 0x00b9, 0x00c3, 0x00cc, 0x00d6, 0x00e0},
{0x0062, 0x006b, 0x0075, 0x007f, 0x0089, 0x0093, 0x009d, 0x00a7, 0x00b1, 0x00bb, 0x00c5, 0x00ce, 0x00d8, 0x00e2},
{0x0063, 0x006d, 0x0077, 0x0081, 0x008b, 0x0095, 0x009f, 0x00a9, 0x00b3, 0x00bd, 0x00c7, 0x00d1, 0x00db, 0x00e5},
{0x0064, 0x006e, 0x0078, 0x0082, 0x008c, 0x0096, 0x00a0, 0x00aa, 0x00b4, 0x00be, 0x00c9, 0x00d3, 0x00dd, 0x00e7},
{0x0065, 0x006f, 0x0079, 0x0083, 0x008d, 0x0098, 0x00a2, 0x00ac, 0x00b6, 0x00c0, 0x00cb, 0x00d5, 0x00df, 0x00e9},
{0x0066, 0x0070, 0x007a, 0x0084, 0x008f, 0x0099, 0x00a3, 0x00ae, 0x00b8, 0x00c2, 0x00cd, 0x00d7, 0x00e1, 0x00eb},
{0x0067, 0x0071, 0x007b, 0x0086, 0x0090, 0x009b, 0x00a5, 0x00af, 0x00ba, 0x00c4, 0x00cf, 0x00d9, 0x00e3, 0x00ee},
{0x0068, 0x0072, 0x007d, 0x0087, 0x0092, 0x009c, 0x00a7, 0x00b1, 0x00bc, 0x00c6, 0x00d1, 0x00db, 0x00e6, 0x00f0},
{0x0069, 0x0073, 0x007e, 0x0088, 0x0093, 0x009e, 0x00a8, 0x00b3, 0x00bd, 0x00c8, 0x00d3, 0x00dd, 0x00e8, 0x00f2},
{0x006a, 0x0074, 0x007f, 0x008a, 0x0094, 0x009f, 0x00aa, 0x00b4, 0x00bf, 0x00ca, 0x00d5, 0x00df, 0x00ea, 0x00f5},
{0x006b, 0x0075, 0x0080, 0x008b, 0x0096, 0x00a1, 0x00ab, 0x00b6, 0x00c1, 0x00cc, 0x00d7, 0x00e1, 0x00ec, 0x00f7},
{0x006c, 0x0076, 0x0081, 0x008c, 0x0097, 0x00a2, 0x00ad, 0x00b8, 0x00c3, 0x00ce, 0x00d9, 0x00e3, 0x00ee, 0x00f9},
{0x006d, 0x0078, 0x0082, 0x008e, 0x0099, 0x00a4, 0x00af, 0x00ba, 0x00c5, 0x00d0, 0x00db, 0x00e6, 0x00f1, 0x00fc},
{0x006e, 0x0079, 0x0084, 0x008f, 0x009a, 0x00a5, 0x00b0, 0x00bb, 0x00c6, 0x00d1, 0x00dd, 0x00e8, 0x00f3, 0x00fe},
{0x006f, 0x007a, 0x0085, 0x0090, 0x009b, 0x00a7, 0x00b2, 0x00bd, 0x00c8, 0x00d3, 0x00df, 0x00ea, 0x00f5, 0x0100},
{0x0070, 0x007b, 0x0086, 0x0091, 0x009d, 0x00a8, 0x00b3, 0x00bf, 0x00ca, 0x00d5, 0x00e1, 0x00ec, 0x00f7, 0x0102},
{0x0071, 0x007c, 0x0087, 0x0093, 0x009e, 0x00aa, 0x00b5, 0x00c0, 0x00cc, 0x00d7, 0x00e3, 0x00ee, 0x00f9, 0x0105},
{0x0072, 0x007d, 0x0088, 0x0094, 0x00a0, 0x00ab, 0x00b7, 0x00c2, 0x00ce, 0x00d9, 0x00e5, 0x00f0, 0x00fc, 0x0107},
{0x0073, 0x007e, 0x008a, 0x0095, 0x00a1, 0x00ad, 0x00b8, 0x00c4, 0x00cf, 0x00db, 0x00e7, 0x00f2, 0x00fe, 0x0109},
{0x0074, 0x007f, 0x008b, 0x0097, 0x00a2, 0x00ae, 0x00ba, 0x00c5, 0x00d1, 0x00dd, 0x00e9, 0x00f4, 0x0100, 0x010c},
{0x0075, 0x0080, 0x008c, 0x0098, 0x00a4, 0x00b0, 0x00bb, 0x00c7, 0x00d3, 0x00df, 0x00eb, 0x00f6, 0x0102, 0x010e},
{0x0076, 0x0081, 0x008d, 0x0099, 0x00a5, 0x00b1, 0x00bd, 0x00c9, 0x00d5, 0x00e1, 0x00ed, 0x00f8, 0x0104, 0x0110},
{0x0077, 0x0083, 0x008e, 0x009b, 0x00a7, 0x00b3, 0x00bf, 0x00cb, 0x00d7, 0x00e3, 0x00ef, 0x00fb, 0x0107, 0x0113},
{0x0078, 0x0084, 0x0090, 0x009c, 0x00a8, 0x00b4, 0x00c0, 0x00cc, 0x00d8, 0x00e4, 0x00f1, 0x00fd, 0x0109, 0x0115},
{0x0079, 0x0085, 0x0091, 0x009d, 0x00a9, 0x00b6, 0x00c2, 0x00ce, 0x00da, 0x00e6, 0x00f3, 0x00ff, 0x010b, 0x0117},
{0x007a, 0x0086, 0x0092, 0x009e, 0x00ab, 0x00b7, 0x00c3, 0x00d0, 0x00dc, 0x00e8, 0x00f5, 0x0101, 0x010d, 0x0119},
{0x007b, 0x0087, 0x0093, 0x00a0, 0x00ac, 0x00b9, 0x00c5, 0x00d1, 0x00de, 0x00ea, 0x00f7, 0x0103, 0x010f, 0x011c},
{0x007c, 0x0088, 0x0094, 0x00a1, 0x00ae, 0x00ba, 0x00c7, 0x00d3, 0x00e0, 0x00ec, 0x00f9, 0x0105, 0x0112, 0x011e},
{0x007d, 0x0089, 0x0096, 0x00a2, 0x00af, 0x00bc, 0x00c8, 0x00d5, 0x00e1, 0x00ee, 0x00fb, 0x0107, 0x0114, 0x0120},
{0x007e, 0x008a, 0x0097, 0x00a4, 0x00b0, 0x00bd, 0x00ca, 0x00d6, 0x00e3, 0x00f0, 0x00fd, 0x0109, 0x0116, 0x0123},
{0x007f, 0x008b, 0x0098, 0x00a5, 0x00b2, 0x00bf, 0x00cb, 0x00d8, 0x00e5, 0x00f2, 0x00ff, 0x010b, 0x0118, 0x0125},
{0x0080, 0x008c, 0x0099, 0x00a6, 0x00b3, 0x00c0, 0x00cd, 0x00da, 0x00e7, 0x00f4, 0x0101, 0x010d, 0x011a, 0x0127},
{0x0081, 0x008e, 0x009a, 0x00a8, 0x00b5, 0x00c2, 0x00cf, 0x00dc, 0x00e9, 0x00f6, 0x0103, 0x0110, 0x011d, 0x012a},
{0x0082, 0x008f, 0x009c, 0x00a9, 0x00b6, 0x00c3, 0x00d0, 0x00dd, 0x00ea, 0x00f7, 0x0105, 0x0112, 0x011f, 0x012c},
{0x0083, 0x0090, 0x009d, 0x00aa, 0x00b7, 0x00c5, 0x00d2, 0x00df, 0x00ec, 0x00f9, 0x0107, 0x0114, 0x0121, 0x012e},
{0x0084, 0x0091, 0x009e, 0x00ab, 0x00b9, 0x00c6, 0x00d3, 0x00e1, 0x00ee, 0x00fb, 0x0109, 0x0116, 0x0123, 0x0130},
{0x0085, 0x0092, 0x009f, 0x00ad, 0x00ba, 0x00c8, 0x00d5, 0x00e2, 0x00f0, 0x00fd, 0x010b, 0x0118, 0x0125, 0x0133},
{0x0086, 0x0093, 0x00a0, 0x00ae, 0x00bc, 0x00c9, 0x00d7, 0x00e4, 0x00f2, 0x00ff, 0x010d, 0x011a, 0x0128, 0x0135},
{0x0087, 0x0094, 0x00a2, 0x00af, 0x00bd, 0x00cb, 0x00d8, 0x00e6, 0x00f3, 0x0101, 0x010f, 0x011c, 0x012a, 0x0137},
{0x0088, 0x0095, 0x00a3, 0x00b1, 0x00be, 0x00cc, 0x00da, 0x00e7, 0x00f5, 0x0103, 0x0111, 0x011e, 0x012c, 0x013a},
{0x0089, 0x0096, 0x00a4, 0x00b2, 0x00c0, 0x00ce, 0x00db, 0x00e9, 0x00f7, 0x0105, 0x0113, 0x0120, 0x012e, 0x013c},
{0x008a, 0x0097, 0x00a5, 0x00b3, 0x00c1, 0x00cf, 0x00dd, 0x00eb, 0x00f9, 0x0107, 0x0115, 0x0122, 0x0130, 0x013e},
{0x008b, 0x0099, 0x00a6, 0x00b5, 0x00c3, 0x00d1, 0x00df, 0x00ed, 0x00fb, 0x0108, 0x0117, 0x0125, 0x0133, 0x0141},
{0x008c, 0x009a, 0x00a8, 0x00b6, 0x00c4, 0x00d2, 0x00e0, 0x00ee, 0x00fc, 0x010a, 0x0119, 0x0127, 0x0135, 0x0143},
{0x008d, 0x009b, 0x00a9, 0x00b7, 0x00c5, 0x00d4, 0x00e2, 0x00f0, 0x00fe, 0x010c, 0x011b, 0x0129, 0x0137, 0x0145},
{0x008e, 0x009c, 0x00aa, 0x00b8, 0x00c7, 0x00d5, 0x00e3, 0x00f2, 0x0100, 0x010e, 0x011d, 0x012b, 0x0139, 0x0147},
{0x008f, 0x009d, 0x00ab, 0x00ba, 0x00c8, 0x00d7, 0x00e5, 0x00f3, 0x0102, 0x0110, 0x011f, 0x012d, 0x013b, 0x014a},
{0x0090, 0x009e, 0x00ac, 0x00bb, 0x00ca, 0x00d8, 0x00e7, 0x00f5, 0x0104, 0x0112, 0x0121, 0x012f, 0x013e, 0x014c},
{0x0091, 0x009f, 0x00ae, 0x00bc, 0x00cb, 0x00da, 0x00e8, 0x00f7, 0x0105, 0x0114, 0x0123, 0x0131, 0x0140, 0x014e},
{0x0092, 0x00a0, 0x00af, 0x00be, 0x00cc, 0x00db, 0x00ea, 0x00f8, 0x0107, 0x0116, 0x0125, 0x0133, 0x0142, 0x0151},
{0x0093, 0x00a1, 0x00b0, 0x00bf, 0x00ce, 0x00dd, 0x00eb, 0x00fa, 0x0109, 0x0118, 0x0127, 0x0135, 0x0144, 0x0153},
{0x0094, 0x00a2, 0x00b1, 0x00c0, 0x00cf, 0x00de, 0x00ed, 0x00fc, 0x010b, 0x011a, 0x0129, 0x0137, 0x0146, 0x0155},
{0x0095, 0x00a4, 0x00b2, 0x00c2, 0x00d1, 0x00e0, 0x00ef, 0x00fe, 0x010d, 0x011b, 0x012b, 0x013a, 0x0149, 0x0158},
{0x0096, 0x00a5, 0x00b4, 0x00c3, 0x00d2, 0x00e1, 0x00f0, 0x00ff, 0x010e, 0x011d, 0x012d, 0x013c, 0x014b, 0x015a},
{0x0097, 0x00a6, 0x00b5, 0x00c4, 0x00d3, 0x00e3, 0x00f2, 0x0101, 0x0110, 0x011f, 0x012f, 0x013e, 0x014d, 0x015c},
{0x0098, 0x00a7, 0x00b6, 0x00c5, 0x00d5, 0x00e4, 0x00f3, 0x0103, 0x0112, 0x0121, 0x0131, 0x0140, 0x014f, 0x015e},
{0x0099, 0x00a8, 0x00b7, 0x00c7, 0x00d6, 0x00e6, 0x00f5, 0x0104, 0x0114, 0x0123, 0x0133, 0x0142, 0x0151, 0x0161},
{0x009a, 0x00a9, 0x00b8, 0x00c8, 0x00d8, 0x00e7, 0x00f7, 0x0106, 0x0116, 0x0125, 0x0135, 0x0144, 0x0154, 0x0163},
{0x009b, 0x00aa, 0x00ba, 0x00c9, 0x00d9, 0x00e9, 0x00f8, 0x0108, 0x0117, 0x0127, 0x0137, 0x0146, 0x0156, 0x0165},
{0x009c, 0x00ab, 0x00bb, 0x00cb, 0x00da, 0x00ea, 0x00fa, 0x0109, 0x0119, 0x0129, 0x0139, 0x0148, 0x0158, 0x0168},
{0x009d, 0x00ac, 0x00bc, 0x00cc, 0x00dc, 0x00ec, 0x00fb, 0x010b, 0x011b, 0x012b, 0x013b, 0x014a, 0x015a, 0x016a},
{0x009e, 0x00ad, 0x00bd, 0x00cd, 0x00dd, 0x00ed, 0x00fd, 0x010d, 0x011d, 0x012d, 0x013d, 0x014c, 0x015c, 0x016c},
{0x009f, 0x00af, 0x00be, 0x00cf, 0x00df, 0x00ef, 0x00ff, 0x010f, 0x011f, 0x012e, 0x013f, 0x014f, 0x015f, 0x016f},
{0x00a0, 0x00b0, 0x00c0, 0x00d0, 0x00e0, 0x00f0, 0x0100, 0x0110, 0x0120, 0x0130, 0x0141, 0x0151, 0x0161, 0x0171},
{0x00a1, 0x00b1, 0x00c1, 0x00d1, 0x00e1, 0x00f2, 0x0102, 0x0112, 0x0122, 0x0132, 0x0143, 0x0153, 0x0163, 0x0173},
{0x00a2, 0x00b2, 0x00c2, 0x00d2, 0x00e3, 0x00f3, 0x0103, 0x0114, 0x0124, 0x0134, 0x0145, 0x0155, 0x0165, 0x0175},
{0x00a3, 0x00b3, 0x00c3, 0x00d4, 0x00e4, 0x00f5, 0x0105, 0x0115, 0x0126, 0x0136, 0x0147, 0x0157, 0x0167, 0x0178},
{0x00a4, 0x00b4, 0x00c4, 0x00d5, 0x00e6, 0x00f6, 0x0107, 0x0117, 0x0128, 0x0138, 0x0149, 0x0159, 0x016a, 0x017a},
{0x00a5, 0x00b5, 0x00c6, 0x00d6, 0x00e7, 0x00f8, 0x0108, 0x0119, 0x0129, 0x013a, 0x014b, 0x015b, 0x016c, 0x017c},
{0x00a6, 0x00b6, 0x00c7, 0x00d8, 0x00e8, 0x00f9, 0x010a, 0x011a, 0x012b, 0x013c, 0x014d, 0x015d, 0x016e, 0x017f},
{0x00a7, 0x00b7, 0x00c8, 0x00d9, 0x00ea, 0x00fb, 0x010b, 0x011c, 0x012d, 0x013e, 0x014f, 0x015f, 0x0170, 0x0181},
{0x00a8, 0x00b8, 0x00c9, 0x00da, 0x00eb, 0x00fc, 0x010d, 0x011e, 0x012f, 0x0140, 0x0151, 0x0161, 0x0172, 0x0183},
{0x00a9, 0x00ba, 0x00ca, 0x00dc, 0x00ed, 0x00fe, 0x010f, 0x0120, 0x0131, 0x0141, 0x0153, 0x0164, 0x0175, 0x0186},
{0x00aa, 0x00bb, 0x00cc, 0x00dd, 0x00ee, 0x00ff, 0x0110, 0x0121, 0x0132, 0x0143, 0x0155, 0x0166, 0x0177, 0x0188},
{0x00ab, 0x00bc, 0x00cd, 0x00de, 0x00ef, 0x0101, 0x0112, 0x0123, 0x0134, 0x0145, 0x0157, 0x0168, 0x0179, 0x018a},
{0x00ac, 0x00bd, 0x00ce, 0x00df, 0x00f1, 0x0102, 0x0113, 0x0125, 0x0136, 0x0147, 0x0159, 0x016a, 0x017b, 0x018c},
{0x00ad, 0x00be, 0x00cf, 0x00e1, 0x00f2, 0x0104, 0x0115, 0x0126, 0x0138, 0x0149, 0x015b, 0x016c, 0x017d, 0x018f},
{0x00ae, 0x00bf, 0x00d0, 0x00e2, 0x00f4, 0x0105, 0x0117, 0x0128, 0x013a, 0x014b, 0x015d, 0x016e, 0x0180, 0x0191},
{0x00af, 0x00c0, 0x00d2, 0x00e3, 0x00f5, 0x0107, 0x0118, 0x012a, 0x013b, 0x014d, 0x015f, 0x0170, 0x0182, 0x0193},
{0x00b0, 0x00c1, 0x00d3, 0x00e5, 0x00f6, 0x0108, 0x011a, 0x012b, 0x013d, 0x014f, 0x0161, 0x0172, 0x0184, 0x0196},
{0x00b1, 0x00c2, 0x00d4, 0x00e6, 0x00f8, 0x010a, 0x011b, 0x012d, 0x013f, 0x0151, 0x0163, 0x0174, 0x0186, 0x0198},
{0x00b2, 0x00c3, 0x00d5, 0x00e7, 0x00f9, 0x010b, 0x011d, 0x012f, 0x0141, 0x0153, 0x0165, 0x0176, 0x0188, 0x019a},
{0x00b3, 0x00c5, 0x00d6, 0x00e9, 0x00fb, 0x010d, 0x011f, 0x0131, 0x0143, 0x0154, 0x0167, 0x0179, 0x018b, 0x019d},
{0x00b4, 0x00c6, 0x00d8, 0x00ea, 0x00fc, 0x010e, 0x0120, 0x0132, 0x0144, 0x0156, 0x0169, 0x017b, 0x018d, 0x019f},
{0x00b5, 0x00c7, 0x00d9, 0x00eb, 0x00fd, 0x0110, 0x0122, 0x0134, 0x0146, 0x0158, 0x016b, 0x017d, 0x018f, 0x01a1},
{0x00b6, 0x00c8, 0x00da, 0x00ec, 0x00ff, 0x0111, 0x0123, 0x0136, 0x0148, 0x015a, 0x016d, 0x017f, 0x0191, 0x01a3},
{0x00b7, 0x00c9, 0x00db, 0x00ee, 0x0100, 0x0113, 0x0125, 0x0137, 0x014a, 0x015c, 0x016f, 0x0181, 0x0193, 0x01a6},
{0x00b8, 0x00ca, 0x00dc, 0x00ef, 0x0101, 0x0114, 0x0127, 0x0139, 0x014c, 0x015e, 0x0171, 0x0183, 0x0196, 0x01a8},
{0x00b9, 0x00cb, 0x00de, 0x00f0, 0x0103, 0x0116, 0x0128, 0x013b, 0x014d, 0x0160, 0x0173, 0x0185, 0x0198, 0x01aa},
{0x00ba, 0x00cc, 0x00df, 0x00f2, 0x0104, 0x0117, 0x012a, 0x013c, 0x014f, 0x0162, 0x0175, 0x0187, 0x019a, 0x01ad},
{0x00bb, 0x00cd, 0x00e0, 0x00f3, 0x0106, 0x0119, 0x012b, 0x013e, 0x0151, 0x0164, 0x0177, 0x0189, 0x019c, 0x01af},
{0x00bc, 0x00ce, 0x00e1, 0x00f4, 0x0107, 0x011a, 0x012d, 0x0140, 0x0153, 0x0166, 0x0179, 0x018b, 0x019e, 0x01b1},
{0x00bd, 0x00d0, 0x00e2, 0x00f6, 0x0108, 0x011c, 0x012f, 0x0142, 0x0155, 0x0167, 0x017b, 0x018e, 0x01a1, 0x01b4},
{0x00be, 0x00d1, 0x00e4, 0x00f7, 0x010a, 0x011d, 0x0130, 0x0143, 0x0156, 0x0169, 0x017d, 0x0190, 0x01a3, 0x01b6},
{0x00bf, 0x00d2, 0x00e5, 0x00f8, 0x010b, 0x011f, 0x0132, 0x0145, 0x0158, 0x016b, 0x017f, 0x0192, 0x01a5, 0x01b8},
{0x00c0, 0x00d3, 0x00e6, 0x00f9, 0x010d, 0x0120, 0x0133, 0x0147, 0x015a, 0x016d, 0x0181, 0x0194, 0x01a7, 0x01ba},
{0x00c1, 0x00d4, 0x00e7, 0x00fb, 0x010e, 0x0122, 0x0135, 0x0148, 0x015c, 0x016f, 0x0183, 0x0196, 0x01a9, 0x01bd},
{0x00c2, 0x00d5, 0x00e8, 0x00fc, 0x010f, 0x0123, 0x0137, 0x014a, 0x015e, 0x0171, 0x0185, 0x0198, 0x01ac, 0x01bf},
{0x00c3, 0x00d6, 0x00ea, 0x00fd, 0x0111, 0x0125, 0x0138, 0x014c, 0x015f, 0x0173, 0x0187, 0x019a, 0x01ae, 0x01c1},
{0x00c4, 0x00d7, 0x00eb, 0x00ff, 0x0112, 0x0126, 0x013a, 0x014d, 0x0161, 0x0175, 0x0189, 0x019c, 0x01b0, 0x01c4},
{0x00c5, 0x00d8, 0x00ec, 0x0100, 0x0114, 0x0128, 0x013b, 0x014f, 0x0163, 0x0177, 0x018b, 0x019e, 0x01b2, 0x01c6},
{0x00c6, 0x00d9, 0x00ed, 0x0101, 0x0115, 0x0129, 0x013d, 0x0151, 0x0165, 0x0179, 0x018d, 0x01a0, 0x01b4, 0x01c8},
{0x00c7, 0x00db, 0x00ee, 0x0103, 0x0116, 0x012b, 0x013f, 0x0153, 0x0167, 0x017a, 0x018f, 0x01a3, 0x01b7, 0x01cb},
{0x00c8, 0x00dc, 0x00f0, 0x0104, 0x0118, 0x012c, 0x0140, 0x0154, 0x0168, 0x017c, 0x0191, 0x01a5, 0x01b9, 0x01cd},
{0x00c9, 0x00dd, 0x00f1, 0x0105, 0x0119, 0x012e, 0x0142, 0x0156, 0x016a, 0x017e, 0x0193, 0x01a7, 0x01bb, 0x01cf},
{0x00ca, 0x00de, 0x00f2, 0x0106, 0x011b, 0x012f, 0x0143, 0x0158, 0x016c, 0x0180, 0x0195, 0x01a9, 0x01bd, 0x01d1},
{0x00cb, 0x00df, 0x00f3, 0x0108, 0x011c, 0x0131, 0x0145, 0x0159, 0x016e, 0x0182, 0x0197, 0x01ab, 0x01bf, 0x01d4},
{0x00cc, 0x00e0, 0x00f4, 0x0109, 0x011d, 0x0132, 0x0147, 0x015b, 0x0170, 0x0184, 0x0199, 0x01ad, 0x01c2, 0x01d6},
{0x00cd, 0x00e1, 0x00f6, 0x010a, 0x011f, 0x0134, 0x0148, 0x015d, 0x0171, 0x0186, 0x019b, 0x01af, 0x01c4, 0x01d8},
{0x00ce, 0x00e2, 0x00f7, 0x010c, 0x0120, 0x0135, 0x014a, 0x015e, 0x0173, 0x0188, 0x019d, 0x01b1, 0x01c6, 0x01db},
{0x00cf, 0x00e3, 0x00f8, 0x010d, 0x0122, 0x0137, 0x014b, 0x0160, 0x0175, 0x018a, 0x019f, 0x01b3, 0x01c8, 0x01dd},
{0x00d0, 0x00e4, 0x00f9, 0x010e, 0x0123, 0x0138, 0x014d, 0x0162, 0x0177, 0x018c, 0x01a1, 0x01b5, 0x01ca, 0x01df},
{0x00d1, 0x00e6, 0x00fa, 0x0110, 0x0124, 0x013a, 0x014f, 0x0164, 0x0179, 0x018d, 0x01a3, 0x01b8, 0x01cd, 0x01e2},
{0x00d2, 0x00e7, 0x00fc, 0x0111, 0x0126, 0x013b, 0x0150, 0x0165, 0x017a, 0x018f, 0x01a5, 0x01ba, 0x01cf, 0x01e4},
{0x00d3, 0x00e8, 0x00fd, 0x0112, 0x0127, 0x013d, 0x0152, 0x0167, 0x017c, 0x0191, 0x01a7, 0x01bc, 0x01d1, 0x01e6},
{0x00d4, 0x00e9, 0x00fe, 0x0113, 0x0129, 0x013e, 0x0153, 0x0169, 0x017e, 0x0193, 0x01a9, 0x01be, 0x01d3, 0x01e8},
{0x00d5, 0x00ea, 0x00ff, 0x0115, 0x012a, 0x0140, 0x0155, 0x016a, 0x0180, 0x0195, 0x01ab, 0x01c0, 0x01d5, 0x01eb},
{0x00d6, 0x00eb, 0x0101, 0x0116, 0x012b, 0x0141, 0x0157, 0x016c, 0x0182, 0x0197, 0x01ad, 0x01c2, 0x01d8, 0x01ed},
{0x00d7, 0x00ec, 0x0102, 0x0117, 0x012d, 0x0143, 0x0158, 0x016e, 0x0183, 0x0199, 0x01af, 0x01c4, 0x01da, 0x01ef},
{0x00d8, 0x00ed, 0x0103, 0x0119, 0x012e, 0x0144, 0x015a, 0x016f, 0x0185, 0x019b, 0x01b1, 0x01c6, 0x01dc, 0x01f2},
{0x00d9, 0x00ee, 0x0104, 0x011a, 0x0130, 0x0146, 0x015b, 0x0171, 0x0187, 0x019d, 0x01b3, 0x01c8, 0x01de, 0x01f4},
{0x00da, 0x00ef, 0x0105, 0x011b, 0x0131, 0x0147, 0x015d, 0x0173, 0x0189, 0x019f, 0x01b5, 0x01ca, 0x01e0, 0x01f6},
{0x00db, 0x00f1, 0x0107, 0x011d, 0x0132, 0x0149, 0x015f, 0x0175, 0x018b, 0x01a0, 0x01b7, 0x01cd, 0x01e3, 0x01f9},
{0x00dc, 0x00f2, 0x0108, 0x011e, 0x0134, 0x014a, 0x0160, 0x0176, 0x018c, 0x01a2, 0x01b9, 0x01cf, 0x01e5, 0x01fb},
{0x00dd, 0x00f3, 0x0109, 0x011f, 0x0135, 0x014c, 0x0162, 0x0178, 0x018e, 0x01a4, 0x01bb, 0x01d1, 0x01e7, 0x01fd},
{0x00de, 0x00f4, 0x010a, 0x0120, 0x0137, 0x014d, 0x0163, 0x017a, 0x0190, 0x01a6, 0x01bd, 0x01d3, 0x01e9, 0x01ff},
{0x00df, 0x00f5, 0x010b, 0x0122, 0x0138, 0x014f, 0x0165, 0x017b, 0x0192, 0x01a8, 0x01bf, 0x01d5, 0x01eb, 0x0202},
{0x00e0, 0x00f6, 0x010d, 0x0123, 0x0139, 0x0150, 0x0167, 0x017d, 0x0194, 0x01aa, 0x01c1, 0x01d7, 0x01ee, 0x0204},
{0x00e1, 0x00f7, 0x010e, 0x0124, 0x013b, 0x0152, 0x0168, 0x017f, 0x0195, 0x01ac, 0x01c3, 0x01d9, 0x01f0, 0x0206},
{0x00e2, 0x00f8, 0x010f, 0x0126, 0x013c, 0x0153, 0x016a, 0x0180, 0x0197, 0x01ae, 0x01c5, 0x01db, 0x01f2, 0x0209},
{0x00e3, 0x00f9, 0x0110, 0x0127, 0x013e, 0x0155, 0x016b, 0x0182, 0x0199, 0x01b0, 0x01c7, 0x01dd, 0x01f4, 0x020b},
{0x00e4, 0x00fa, 0x0111, 0x0128, 0x013f, 0x0156, 0x016d, 0x0184, 0x019b, 0x01b2, 0x01c9, 0x01df, 0x01f6, 0x020d},
{0x00e5, 0x00fc, 0x0113, 0x012a, 0x0140, 0x0158, 0x016f, 0x0186, 0x019d, 0x01b3, 0x01cb, 0x01e2, 0x01f9, 0x020f},
{0x00e6, 0x00fd, 0x0114, 0x012b, 0x0142, 0x0159, 0x0170, 0x0187, 0x019e, 0x01b5, 0x01cd, 0x01e4, 0x01fb, 0x0212},
{0x00e7, 0x00fe, 0x0115, 0x012c, 0x0143, 0x015b, 0x0172, 0x0189, 0x01a0, 0x01b7, 0x01cf, 0x01e6, 0x01fd, 0x0214},
{0x00e8, 0x00ff, 0x0116, 0x012d, 0x0145, 0x015c, 0x0173, 0x018b, 0x01a2, 0x01b9, 0x01d1, 0x01e8, 0x01ff, 0x0216},
{0x00e9, 0x0100, 0x0117, 0x012f, 0x0146, 0x015e, 0x0175, 0x018c, 0x01a4, 0x01bb, 0x01d3, 0x01ea, 0x0201, 0x0219},
{0x00ea, 0x0101, 0x0119, 0x0130, 0x0147, 0x015f, 0x0177, 0x018e, 0x01a6, 0x01bd, 0x01d5, 0x01ec, 0x0204, 0x021b},
{0x00eb, 0x0102, 0x011a, 0x0131, 0x0149, 0x0161, 0x0178, 0x0190, 0x01a7, 0x01bf, 0x01d7, 0x01ee, 0x0206, 0x021d},
{0x00ec, 0x0103, 0x011b, 0x0133, 0x014a, 0x0162, 0x017a, 0x0191, 0x01a9, 0x01c1, 0x01d9, 0x01f0, 0x0208, 0x0220},
{0x00ed, 0x0104, 0x011c, 0x0134, 0x014c, 0x0164, 0x017b, 0x0193, 0x01ab, 0x01c3, 0x01db, 0x01f2, 0x020a, 0x0222},
{0x00ee, 0x0105, 0x011d, 0x0135, 0x014d, 0x0165, 0x017d, 0x0195, 0x01ad, 0x01c5, 0x01dd, 0x01f4, 0x020c, 0x0224},
{0x00ef, 0x0107, 0x011f, 0x0137, 0x014e, 0x0167, 0x017f, 0x0197, 0x01af, 0x01c6, 0x01df, 0x01f7, 0x020f, 0x0226},
{0x00f0, 0x0108, 0x0120, 0x0138, 0x0150, 0x0168, 0x0180, 0x0198, 0x01b0, 0x01c8, 0x01e1, 0x01f9, 0x0211, 0x0229},
{0x00f1, 0x0109, 0x0121, 0x0139, 0x0151, 0x016a, 0x0182, 0x019a, 0x01b2, 0x01ca, 0x01e3, 0x01fb, 0x0213, 0x022b},
{0x00f2, 0x010a, 0x0122, 0x013a, 0x0153, 0x016b, 0x0183, 0x019c, 0x01b4, 0x01cc, 0x01e5, 0x01fd, 0x0215, 0x022d},
{0x00f3, 0x010b, 0x0123, 0x013c, 0x0154, 0x016d, 0x0185, 0x019d, 0x01b6, 0x01ce, 0x01e7, 0x01ff, 0x0217, 0x0230},
{0x00f4, 0x010c, 0x0125, 0x013d, 0x0155, 0x016e, 0x0187, 0x019f, 0x01b8, 0x01d0, 0x01e9, 0x0201, 0x021a, 0x0232},
{0x00f5, 0x010d, 0x0126, 0x013e, 0x0157, 0x0170, 0x0188, 0x01a1, 0x01b9, 0x01d2, 0x01eb, 0x0203, 0x021c, 0x0234},
{0x00f6, 0x010e, 0x0127, 0x0140, 0x0158, 0x0171, 0x018a, 0x01a2, 0x01bb, 0x01d4, 0x01ed, 0x0205, 0x021e, 0x0237},
{0x00f7, 0x010f, 0x0128, 0x0141, 0x015a, 0x0173, 0x018b, 0x01a4, 0x01bd, 0x01d6, 0x01ef, 0x0207, 0x0220, 0x0239},
{0x00f8, 0x0110, 0x0129, 0x0142, 0x015b, 0x0174, 0x018d, 0x01a6, 0x01bf, 0x01d8, 0x01f1, 0x0209, 0x0222, 0x023b},
{0x00f9, 0x0112, 0x012b, 0x0144, 0x015c, 0x0176, 0x018f, 0x01a8, 0x01c1, 0x01d9, 0x01f3, 0x020c, 0x0225, 0x023d},
{0x00fa, 0x0113, 0x012c, 0x0145, 0x015e, 0x0177, 0x0190, 0x01a9, 0x01c2, 0x01db, 0x01f5, 0x020e, 0x0227, 0x0240},
{0x00fb, 0x0114, 0x012d, 0x0146, 0x015f, 0x0179, 0x0192, 0x01ab, 0x01c4, 0x01dd, 0x01f7, 0x0210, 0x0229, 0x0242},
{0x00fc, 0x0115, 0x012e, 0x0147, 0x0161, 0x017a, 0x0193, 0x01ad, 0x01c6, 0x01df, 0x01f9, 0x0212, 0x022b, 0x0244},
{0x00fd, 0x0116, 0x012f, 0x0149, 0x0162, 0x017c, 0x0195, 0x01ae, 0x01c8, 0x01e1, 0x01fb, 0x0214, 0x022d, 0x0247},
{0x00fe, 0x0117, 0x0131, 0x014a, 0x0163, 0x017d, 0x0197, 0x01b0, 0x01ca, 0x01e3, 0x01fd, 0x0216, 0x0230, 0x0249},
{0x00ff, 0x0118, 0x0132, 0x014b, 0x0165, 0x017f, 0x0198, 0x01b2, 0x01cb, 0x01e5, 0x01ff, 0x0218, 0x0232, 0x024b},
{0x0100, 0x0119, 0x0133, 0x014d, 0x0166, 0x0180, 0x019a, 0x01b3, 0x01cd, 0x01e7, 0x0201, 0x021a, 0x0234, 0x024e},
{0x0101, 0x011a, 0x0134, 0x014e, 0x0168, 0x0182, 0x019b, 0x01b5, 0x01cf, 0x01e9, 0x0203, 0x021c, 0x0236, 0x0250},
{0x0102, 0x011b, 0x0135, 0x014f, 0x0169, 0x0183, 0x019d, 0x01b7, 0x01d1, 0x01eb, 0x0205, 0x021e, 0x0238, 0x0252},
{0x0103, 0x011d, 0x0137, 0x0151, 0x016a, 0x0185, 0x019f, 0x01b9, 0x01d3, 0x01ec, 0x0207, 0x0221, 0x023b, 0x0254},
{0x0104, 0x011e, 0x0138, 0x0152, 0x016c, 0x0186, 0x01a0, 0x01ba, 0x01d4, 0x01ee, 0x0209, 0x0223, 0x023d, 0x0257},
{0x0105, 0x011f, 0x0139, 0x0153, 0x016d, 0x0188, 0x01a2, 0x01bc, 0x01d6, 0x01f0, 0x020b, 0x0225, 0x023f, 0x0259},
{0x0106, 0x0120, 0x013a, 0x0154, 0x016f, 0x0189, 0x01a3, 0x01be, 0x01d8, 0x01f2, 0x020d, 0x0227, 0x0241, 0x025b},
{0x0107, 0x0121, 0x013b, 0x0156, 0x0170, 0x018b, 0x01a5, 0x01bf, 0x01da, 0x01f4, 0x020f, 0x0229, 0x0243, 0x025e},
{0x0108, 0x0122, 0x013d, 0x0157, 0x0171, 0x018c, 0x01a7, 0x01c1, 0x01dc, 0x01f6, 0x0211, 0x022b, 0x0246, 0x0260},
{0x0109, 0x0123, 0x013e, 0x0158, 0x0173, 0x018e, 0x01a8, 0x01c3, 0x01dd, 0x01f8, 0x0213, 0x022d, 0x0248, 0x0262},
{0x010a, 0x0124, 0x013f, 0x015a, 0x0174, 0x018f, 0x01aa, 0x01c4, 0x01df, 0x01fa, 0x0215, 0x022f, 0x024a, 0x0265},
{0x010b, 0x0125, 0x0140, 0x015b, 0x0176, 0x0191, 0x01ab, 0x01c6, 0x01e1, 0x01fc, 0x0217, 0x0231, 0x024c, 0x0267},
{0x010c, 0x0126, 0x0141, 0x015c, 0x0177, 0x0192, 0x01ad, 0x01c8, 0x01e3, 0x01fe, 0x0219, 0x0233, 0x024e, 0x0269},
{0x010d, 0x0128, 0x0143, 0x015e, 0x0178, 0x0194, 0x01af, 0x01ca, 0x01e5, 0x01ff, 0x021b, 0x0236, 0x0251, 0x026b},
{0x010e, 0x0129, 0x0144, 0x015f, 0x017a, 0x0195, 0x01b0, 0x01cb, 0x01e6, 0x0201, 0x021d, 0x0238, 0x0253, 0x026e},
{0x010f, 0x012a, 0x0145, 0x0160, 0x017b, 0x0197, 0x01b2, 0x01cd, 0x01e8, 0x0203, 0x021f, 0x023a, 0x0255, 0x0270},
{0x0110, 0x012b, 0x0146, 0x0161, 0x017d, 0x0198, 0x01b3, 0x01cf, 0x01ea, 0x0205, 0x0221, 0x023c, 0x0257, 0x0272},
{0x0111, 0x012c, 0x0147, 0x0163, 0x017e, 0x019a, 0x01b5, 0x01d0, 0x01ec, 0x0207, 0x0223, 0x023e, 0x0259, 0x0275},
{0x0112, 0x012d, 0x0149, 0x0164, 0x017f, 0x019b, 0x01b7, 0x01d2, 0x01ee, 0x0209, 0x0225, 0x0240, 0x025c, 0x0277},
{0x0113, 0x012e, 0x014a, 0x0165, 0x0181, 0x019d, 0x01b8, 0x01d4, 0x01ef, 0x020b, 0x0227, 0x0242, 0x025e, 0x0279},
{0x0114, 0x012f, 0x014b, 0x0167, 0x0182, 0x019e, 0x01ba, 0x01d5, 0x01f1, 0x020d, 0x0229, 0x0244, 0x0260, 0x027c},
{0x0115, 0x0130, 0x014c, 0x0168, 0x0184, 0x01a0, 0x01bb, 0x01d7, 0x01f3, 0x020f, 0x022b, 0x0246, 0x0262, 0x027e},
{0x0116, 0x0131, 0x014d, 0x0169, 0x0185, 0x01a1, 0x01bd, 0x01d9, 0x01f5, 0x0211, 0x022d, 0x0248, 0x0264, 0x0280},
{0x0117, 0x0133, 0x014f, 0x016b, 0x0186, 0x01a3, 0x01bf, 0x01db, 0x01f7, 0x0213, 0x022f, 0x024b, 0x0267, 0x0282},
{0x0118, 0x0134, 0x0150, 0x016c, 0x0188, 0x01a4, 0x01c0, 0x01dc, 0x01f8, 0x0214, 0x0231, 0x024d, 0x0269, 0x0285},
{0x0119, 0x0135, 0x0151, 0x016d, 0x0189, 0x01a6, 0x01c2, 0x01de, 0x01fa, 0x0216, 0x0233, 0x024f, 0x026b, 0x0287},
{0x011a, 0x0136, 0x0152, 0x016e, 0x018b, 0x01a7, 0x01c3, 0x01e0, 0x01fc, 0x0218, 0x0235, 0x0251, 0x026d, 0x0289},
{0x011b, 0x0137, 0x0153, 0x0170, 0x018c, 0x01a9, 0x01c5, 0x01e1, 0x01fe, 0x021a, 0x0237, 0x0253, 0x026f, 0x028c},
{0x011c, 0x0138, 0x0155, 0x0171, 0x018d, 0x01aa, 0x01c7, 0x01e3, 0x0200, 0x021c, 0x0239, 0x0255, 0x0272, 0x028e},
{0x011d, 0x0139, 0x0156, 0x0172, 0x018f, 0x01ac, 0x01c8, 0x01e5, 0x0201, 0x021e, 0x023b, 0x0257, 0x0274, 0x0290},
{0x011e, 0x013a, 0x0157, 0x0174, 0x0190, 0x01ad, 0x01ca, 0x01e6, 0x0203, 0x0220, 0x023d, 0x0259, 0x0276, 0x0293},
{0x011f, 0x013b, 0x0158, 0x0175, 0x0192, 0x01af, 0x01cb, 0x01e8, 0x0205, 0x0222, 0x023f, 0x025b, 0x0278, 0x0295},
{0x0120, 0x013c, 0x0159, 0x0176, 0x0193, 0x01b0, 0x01cd, 0x01ea, 0x0207, 0x0224, 0x0241, 0x025d, 0x027a, 0x0297},
{0x0121, 0x013e, 0x015b, 0x0178, 0x0194, 0x01b2, 0x01cf, 0x01ec, 0x0209, 0x0226, 0x0243, 0x0260, 0x027d, 0x0299},
{0x0122, 0x013f, 0x015c, 0x0179, 0x0196, 0x01b3, 0x01d0, 0x01ed, 0x020a, 0x0227, 0x0245, 0x0262, 0x027f, 0x029c},
{0x0123, 0x0140, 0x015d, 0x017a, 0x0197, 0x01b5, 0x01d2, 0x01ef, 0x020c, 0x0229, 0x0247, 0x0264, 0x0281, 0x029e},
{0x0124, 0x0141, 0x015e, 0x017b, 0x0199, 0x01b6, 0x01d3, 0x01f1, 0x020e, 0x022b, 0x0249, 0x0266, 0x0283, 0x02a0},
{0x0125, 0x0142, 0x015f, 0x017d, 0x019a, 0x01b8, 0x01d5, 0x01f2, 0x0210, 0x022d, 0x024b, 0x0268, 0x0285, 0x02a3},
{0x0126, 0x0143, 0x0161, 0x017e, 0x019b, 0x01b9, 0x01d7, 0x01f4, 0x0212, 0x022f, 0x024d, 0x026a, 0x0288, 0x02a5},
{0x0127, 0x0144, 0x0162, 0x017f, 0x019d, 0x01bb, 0x01d8, 0x01f6, 0x0213, 0x0231, 0x024f, 0x026c, 0x028a, 0x02a7},
{0x0128, 0x0145, 0x0163, 0x0181, 0x019e, 0x01bc, 0x01da, 0x01f7, 0x0215, 0x0233, 0x0251, 0x026e, 0x028c, 0x02aa},
{0x0129, 0x0146, 0x0164, 0x0182, 0x01a0, 0x01be, 0x01db, 0x01f9, 0x0217, 0x0235, 0x0253, 0x0270, 0x028e, 0x02ac},
{0x012a, 0x0147, 0x0165, 0x0183, 0x01a1, 0x01bf, 0x01dd, 0x01fb, 0x0219, 0x0237, 0x0255, 0x0272, 0x0290, 0x02ae},
{0x012b, 0x0149, 0x0167, 0x0185, 0x01a2, 0x01c1, 0x01df, 0x01fd, 0x021b, 0x0239, 0x0257, 0x0275, 0x0293, 0x02b0},
{0x012c, 0x014a, 0x0168, 0x0186, 0x01a4, 0x01c2, 0x01e0, 0x01fe, 0x021c, 0x023a, 0x0259, 0x0277, 0x0295, 0x02b3},
{0x012d, 0x014b, 0x0169, 0x0187, 0x01a5, 0x01c4, 0x01e2, 0x0200, 0x021e, 0x023c, 0x025b, 0x0279, 0x0297, 0x02b5},
{0x012e, 0x014c, 0x016a, 0x0188, 0x01a7, 0x01c5, 0x01e3, 0x0202, 0x0220, 0x023e, 0x025d, 0x027b, 0x0299, 0x02b7},
{0x012f, 0x014d, 0x016b, 0x018a, 0x01a8, 0x01c7, 0x01e5, 0x0203, 0x0222, 0x0240, 0x025f, 0x027d, 0x029b, 0x02ba},
{0x0130, 0x014e, 0x016d, 0x018b, 0x01a9, 0x01c8, 0x01e7, 0x0205, 0x0224, 0x0242, 0x0261, 0x027f, 0x029e, 0x02bc},
{0x0131, 0x014f, 0x016e, 0x018c, 0x01ab, 0x01ca, 0x01e8, 0x0207, 0x0225, 0x0244, 0x0263, 0x0281, 0x02a0, 0x02be},
{0x0132, 0x0150, 0x016f, 0x018e, 0x01ac, 0x01cb, 0x01ea, 0x0208, 0x0227, 0x0246, 0x0265, 0x0283, 0x02a2, 0x02c1},
{0x0133, 0x0151, 0x0170, 0x018f, 0x01ae, 0x01cd, 0x01eb, 0x020a, 0x0229, 0x0248, 0x0267, 0x0285, 0x02a4, 0x02c3},
{0x0134, 0x0152, 0x0171, 0x0190, 0x01af, 0x01ce, 0x01ed, 0x020c, 0x022b, 0x024a, 0x0269, 0x0287, 0x02a6, 0x02c5},
{0x0135, 0x0154, 0x0173, 0x0192, 0x01b0, 0x01d0, 0x01ef, 0x020e, 0x022d, 0x024c, 0x026b, 0x028a, 0x02a9, 0x02c7},
{0x0136, 0x0155, 0x0174, 0x0193, 0x01b2, 0x01d1, 0x01f0, 0x020f, 0x022e, 0x024d, 0x026d, 0x028c, 0x02ab, 0x02ca},
{0x0137, 0x0156, 0x0175, 0x0194, 0x01b3, 0x01d3, 0x01f2, 0x0211, 0x0230, 0x024f, 0x026f, 0x028e, 0x02ad, 0x02cc},
{0x0138, 0x0157, 0x0176, 0x0195, 0x01b5, 0x01d4, 0x01f3, 0x0213, 0x0232, 0x0251, 0x0271, 0x0290, 0x02af, 0x02ce},
{0x0139, 0x0158, 0x0177, 0x0197, 0x01b6, 0x01d6, 0x01f5, 0x0214, 0x0234, 0x0253, 0x0273, 0x0292, 0x02b1, 0x02d1},
{0x013a, 0x0159, 0x0179, 0x0198, 0x01b7, 0x01d7, 0x01f7, 0x0216, 0x0236, 0x0255, 0x0275, 0x0294, 0x02b4, 0x02d3},
{0x013b, 0x015a, 0x017a, 0x0199, 0x01b9, 0x01d9, 0x01f8, 0x0218, 0x0237, 0x0257, 0x0277, 0x0296, 0x02b6, 0x02d5},
{0x013c, 0x015b, 0x017b, 0x019b, 0x01ba, 0x01da, 0x01fa, 0x0219, 0x0239, 0x0259, 0x0279, 0x0298, 0x02b8, 0x02d8},
{0x013d, 0x015c, 0x017c, 0x019c, 0x01bc, 0x01dc, 0x01fb, 0x021b, 0x023b, 0x025b, 0x027b, 0x029a, 0x02ba, 0x02da},
{0x013e, 0x015d, 0x017d, 0x019d, 0x01bd, 0x01dd, 0x01fd, 0x021d, 0x023d, 0x025d, 0x027d, 0x029c, 0x02bc, 0x02dc},
{0x013f, 0x015f, 0x017f, 0x019f, 0x01be, 0x01df, 0x01ff, 0x021f, 0x023f, 0x025f, 0x027f, 0x029f, 0x02bf, 0x02de},
{0x0140, 0x0160, 0x0180, 0x01a0, 0x01c0, 0x01e0, 0x0200, 0x0220, 0x0240, 0x0260, 0x0281, 0x02a1, 0x02c1, 0x02e1},
{0x0141, 0x0161, 0x0181, 0x01a1, 0x01c1, 0x01e2, 0x0202, 0x0222, 0x0242, 0x0262, 0x0283, 0x02a3, 0x02c3, 0x02e3},
{0x0142, 0x0162, 0x0182, 0x01a2, 0x01c3, 0x01e3, 0x0203, 0x0224, 0x0244, 0x0264, 0x0285, 0x02a5, 0x02c5, 0x02e5},
{0x0143, 0x0163, 0x0183, 0x01a4, 0x01c4, 0x01e5, 0x0205, 0x0225, 0x0246, 0x0266, 0x0287, 0x02a7, 0x02c7, 0x02e8},
{0x0144, 0x0164, 0x0185, 0x01a5, 0x01c5, 0x01e6, 0x0207, 0x0227, 0x0248, 0x0268, 0x0289, 0x02a9, 0x02ca, 0x02ea},
{0x0145, 0x0165, 0x0186, 0x01a6, 0x01c7, 0x01e8, 0x0208, 0x0229, 0x0249, 0x026a, 0x028b, 0x02ab, 0x02cc, 0x02ec},
{0x0146, 0x0166, 0x0187, 0x01a8, 0x01c8, 0x01e9, 0x020a, 0x022a, 0x024b, 0x026c, 0x028d, 0x02ad, 0x02ce, 0x02ef},
{0x0147, 0x0167, 0x0188, 0x01a9, 0x01ca, 0x01eb, 0x020b, 0x022c, 0x024d, 0x026e, 0x028f, 0x02af, 0x02d0, 0x02f1},
{0x0148, 0x0168, 0x0189, 0x01aa, 0x01cb, 0x01ec, 0x020d, 0x022e, 0x024f, 0x0270, 0x0291, 0x02b1, 0x02d2, 0x02f3},
{0x0149, 0x016a, 0x018b, 0x01ac, 0x01cc, 0x01ee, 0x020f, 0x0230, 0x0251, 0x0272, 0x0293, 0x02b4, 0x02d5, 0x02f5},
{0x014a, 0x016b, 0x018c, 0x01ad, 0x01ce, 0x01ef, 0x0210, 0x0231, 0x0252, 0x0273, 0x0295, 0x02b6, 0x02d7, 0x02f8},
{0x014b, 0x016c, 0x018d, 0x01ae, 0x01cf, 0x01f1, 0x0212, 0x0233, 0x0254, 0x0275, 0x0297, 0x02b8, 0x02d9, 0x02fa},
{0x014c, 0x016d, 0x018e, 0x01af, 0x01d1, 0x01f2, 0x0213, 0x0235, 0x0256, 0x0277, 0x0299, 0x02ba, 0x02db, 0x02fc},
{0x014d, 0x016e, 0x018f, 0x01b1, 0x01d2, 0x01f4, 0x0215, 0x0236, 0x0258, 0x0279, 0x029b, 0x02bc, 0x02dd, 0x02ff},
{0x014e, 0x016f, 0x0191, 0x01b2, 0x01d3, 0x01f5, 0x0217, 0x0238, 0x025a, 0x027b, 0x029d, 0x02be, 0x02e0, 0x0301},
{0x014f, 0x0170, 0x0192, 0x01b3, 0x01d5, 0x01f7, 0x0218, 0x023a, 0x025b, 0x027d, 0x029f, 0x02c0, 0x02e2, 0x0303},
{0x0150, 0x0171, 0x0193, 0x01b5, 0x01d6, 0x01f8, 0x021a, 0x023b, 0x025d, 0x027f, 0x02a1, 0x02c2, 0x02e4, 0x0306},
{0x0151, 0x0172, 0x0194, 0x01b6, 0x01d8, 0x01fa, 0x021b, 0x023d, 0x025f, 0x0281, 0x02a3, 0x02c4, 0x02e6, 0x0308},
{0x0152, 0x0173, 0x0195, 0x01b7, 0x01d9, 0x01fb, 0x021d, 0x023f, 0x0261, 0x0283, 0x02a5, 0x02c6, 0x02e8, 0x030a},
{0x0153, 0x0175, 0x0197, 0x01b9, 0x01da, 0x01fd, 0x021f, 0x0241, 0x0263, 0x0285, 0x02a7, 0x02c9, 0x02eb, 0x030c},
{0x0154, 0x0176, 0x0198, 0x01ba, 0x01dc, 0x01fe, 0x0220, 0x0242, 0x0264, 0x0286, 0x02a9, 0x02cb, 0x02ed, 0x030f},
{0x0155, 0x0177, 0x0199, 0x01bb, 0x01dd, 0x0200, 0x0222, 0x0244, 0x0266, 0x0288, 0x02ab, 0x02cd, 0x02ef, 0x0311},
{0x0156, 0x0178, 0x019a, 0x01bc, 0x01df, 0x0201, 0x0223, 0x0246, 0x0268, 0x028a, 0x02ad, 0x02cf, 0x02f1, 0x0313},
{0x0157, 0x0179, 0x019b, 0x01be, 0x01e0, 0x0203, 0x0225, 0x0247, 0x026a, 0x028c, 0x02af, 0x02d1, 0x02f3, 0x0316},
{0x0158, 0x017a, 0x019d, 0x01bf, 0x01e1, 0x0204, 0x0227, 0x0249, 0x026c, 0x028e, 0x02b1, 0x02d3, 0x02f6, 0x0318},
{0x0159, 0x017b, 0x019e, 0x01c0, 0x01e3, 0x0206, 0x0228, 0x024b, 0x026d, 0x0290, 0x02b3, 0x02d5, 0x02f8, 0x031a},
{0x015a, 0x017c, 0x019f, 0x01c2, 0x01e4, 0x0207, 0x022a, 0x024c, 0x026f, 0x0292, 0x02b5, 0x02d7, 0x02fa, 0x031d},
{0x015b, 0x017d, 0x01a0, 0x01c3, 0x01e6, 0x0209, 0x022b, 0x024e, 0x0271, 0x0294, 0x02b7, 0x02d9, 0x02fc, 0x031f},
{0x015c, 0x017e, 0x01a1, 0x01c4, 0x01e7, 0x020a, 0x022d, 0x0250, 0x0273, 0x0296, 0x02b9, 0x02db, 0x02fe, 0x0321},
{0x015d, 0x0180, 0x01a3, 0x01c6, 0x01e8, 0x020c, 0x022f, 0x0252, 0x0275, 0x0298, 0x02bb, 0x02de, 0x0301, 0x0323},
{0x015e, 0x0181, 0x01a4, 0x01c7, 0x01ea, 0x020d, 0x0230, 0x0253, 0x0276, 0x0299, 0x02bd, 0x02e0, 0x0303, 0x0326},
{0x015f, 0x0182, 0x01a5, 0x01c8, 0x01eb, 0x020f, 0x0232, 0x0255, 0x0278, 0x029b, 0x02bf, 0x02e2, 0x0305, 0x0328},
{0x0160, 0x0183, 0x01a6, 0x01c9, 0x01ed, 0x0210, 0x0233, 0x0257, 0x027a, 0x029d, 0x02c1, 0x02e4, 0x0307, 0x032a},
{0x0161, 0x0184, 0x01a7, 0x01cb, 0x01ee, 0x0212, 0x0235, 0x0258, 0x027c, 0x029f, 0x02c3, 0x02e6, 0x0309, 0x032d},
{0x0162, 0x0185, 0x01a9, 0x01cc, 0x01ef, 0x0213, 0x0237, 0x025a, 0x027e, 0x02a1, 0x02c5, 0x02e8, 0x030c, 0x032f},
{0x0163, 0x0186, 0x01aa, 0x01cd, 0x01f1, 0x0215, 0x0238, 0x025c, 0x027f, 0x02a3, 0x02c7, 0x02ea, 0x030e, 0x0331},
{0x0164, 0x0187, 0x01ab, 0x01cf, 0x01f2, 0x0216, 0x023a, 0x025d, 0x0281, 0x02a5, 0x02c9, 0x02ec, 0x0310, 0x0334},
{0x0165, 0x0188, 0x01ac, 0x01d0, 0x01f4, 0x0218, 0x023b, 0x025f, 0x0283, 0x02a7, 0x02cb, 0x02ee, 0x0312, 0x0336},
{0x0166, 0x0189, 0x01ad, 0x01d1, 0x01f5, 0x0219, 0x023d, 0x0261, 0x0285, 0x02a9, 0x02cd, 0x02f0, 0x0314, 0x0338},
{0x0167, 0x018b, 0x01af, 0x01d3, 0x01f6, 0x021b, 0x023f, 0x0263, 0x0287, 0x02ab, 0x02cf, 0x02f3, 0x0317, 0x033a},
{0x0168, 0x018c, 0x01b0, 0x01d4, 0x01f8, 0x021c, 0x0240, 0x0264, 0x0288, 0x02ac, 0x02d1, 0x02f5, 0x0319, 0x033d},
{0x0169, 0x018d, 0x01b1, 0x01d5, 0x01f9, 0x021e, 0x0242, 0x0266, 0x028a, 0x02ae, 0x02d3, 0x02f7, 0x031b, 0x033f},
{0x016a, 0x018e, 0x01b2, 0x01d6, 0x01fb, 0x021f, 0x0243, 0x0268, 0x028c, 0x02b0, 0x02d5, 0x02f9, 0x031d, 0x0341},
{0x016b, 0x018f, 0x01b3, 0x01d8, 0x01fc, 0x0221, 0x0245, 0x0269, 0x028e, 0x02b2, 0x02d7, 0x02fb, 0x031f, 0x0344},
{0x016c, 0x0190, 0x01b5, 0x01d9, 0x01fd, 0x0222, 0x0247, 0x026b, 0x0290, 0x02b4, 0x02d9, 0x02fd, 0x0322, 0x0346},
{0x016d, 0x0191, 0x01b6, 0x01da, 0x01ff, 0x0224, 0x0248, 0x026d, 0x0291, 0x02b6, 0x02db, 0x02ff, 0x0324, 0x0348},
{0x016e, 0x0192, 0x01b7, 0x01dc, 0x0200, 0x0225, 0x024a, 0x026e, 0x0293, 0x02b8, 0x02dd, 0x0301, 0x0326, 0x034b},
{0x016f, 0x0193, 0x01b8, 0x01dd, 0x0202, 0x0227, 0x024b, 0x0270, 0x0295, 0x02ba, 0x02df, 0x0303, 0x0328, 0x034d},
{0x0170, 0x0194, 0x01b9, 0x01de, 0x0203, 0x0228, 0x024d, 0x0272, 0x0297, 0x02bc, 0x02e1, 0x0305, 0x032a, 0x034f},
{0x0171, 0x0196, 0x01bb, 0x01e0, 0x0205, 0x022a, 0x024f, 0x0274, 0x0299, 0x02be, 0x02e3, 0x0308, 0x032d, 0x0351},
{0x0172, 0x0197, 0x01bc, 0x01e1, 0x0206, 0x022b, 0x0250, 0x0275, 0x029a, 0x02bf, 0x02e5, 0x030a, 0x032f, 0x0354},
{0x0173, 0x0198, 0x01bd, 0x01e2, 0x0207, 0x022d, 0x0252, 0x0277, 0x029c, 0x02c1, 0x02e7, 0x030c, 0x0331, 0x0356},
{0x0174, 0x0199, 0x01be, 0x01e3, 0x0209, 0x022e, 0x0253, 0x0279, 0x029e, 0x02c3, 0x02e9, 0x030e, 0x0333, 0x0358},
{0x0175, 0x019a, 0x01bf, 0x01e5, 0x020a, 0x0230, 0x0255, 0x027a, 0x02a0, 0x02c5, 0x02eb, 0x0310, 0x0335, 0x035b},
{0x0176, 0x019b, 0x01c1, 0x01e6, 0x020c, 0x0231, 0x0257, 0x027c, 0x02a2, 0x02c7, 0x02ed, 0x0312, 0x0338, 0x035d},
{0x0177, 0x019c, 0x01c2, 0x01e7, 0x020d, 0x0233, 0x0258, 0x027e, 0x02a3, 0x02c9, 0x02ef, 0x0314, 0x033a, 0x035f},
{0x0178, 0x019d, 0x01c3, 0x01e9, 0x020e, 0x0234, 0x025a, 0x027f, 0x02a5, 0x02cb, 0x02f1, 0x0316, 0x033c, 0x0362},
{0x0179, 0x019e, 0x01c4, 0x01ea, 0x0210, 0x0236, 0x025b, 0x0281, 0x02a7, 0x02cd, 0x02f3, 0x0318, 0x033e, 0x0364},
{0x017a, 0x019f, 0x01c5, 0x01eb, 0x0211, 0x0237, 0x025d, 0x0283, 0x02a9, 0x02cf, 0x02f5, 0x031a, 0x0340, 0x0366},
{0x017b, 0x01a1, 0x01c7, 0x01ed, 0x0213, 0x0239, 0x025f, 0x0285, 0x02ab, 0x02d1, 0x02f7, 0x031d, 0x0343, 0x0368},
{0x017c, 0x01a2, 0x01c8, 0x01ee, 0x0214, 0x023a, 0x0260, 0x0286, 0x02ac, 0x02d2, 0x02f9, 0x031f, 0x0345, 0x036b},
{0x017d, 0x01a3, 0x01c9, 0x01ef, 0x0215, 0x023c, 0x0262, 0x0288, 0x02ae, 0x02d4, 0x02fb, 0x0321, 0x0347, 0x036d},
{0x017e, 0x01a4, 0x01ca, 0x01f0, 0x0217, 0x023d, 0x0263, 0x028a, 0x02b0, 0x02d6, 0x02fd, 0x0323, 0x0349, 0x036f},
{0x017f, 0x01a5, 0x01cb, 0x01f2, 0x0218, 0x023f, 0x0265, 0x028b, 0x02b2, 0x02d8, 0x02ff, 0x0325, 0x034b, 0x0372},
{0x0180, 0x01a6, 0x01cc, 0x01f3, 0x0219, 0x0240, 0x0267, 0x028d, 0x02b4, 0x02da, 0x0301, 0x0327, 0x034e, 0x0374},
{0x0181, 0x01a7, 0x01ce, 0x01f4, 0x021b, 0x0242, 0x0268, 0x028f, 0x02b5, 0x02dc, 0x0303, 0x0329, 0x0350, 0x0376},
{0x0182, 0x01a8, 0x01cf, 0x01f6, 0x021c, 0x0243, 0x026a, 0x0290, 0x02b7, 0x02de, 0x0305, 0x032b, 0x0352, 0x0379},
{0x0183, 0x01a9, 0x01d0, 0x01f7, 0x021e, 0x0245, 0x026b, 0x0292, 0x02b9, 0x02e0, 0x0307, 0x032d, 0x0354, 0x037b},
{0x0184, 0x01aa, 0x01d1, 0x01f8, 0x021f, 0x0246, 0x026d, 0x0294, 0x02bb, 0x02e2, 0x0309, 0x032f, 0x0356, 0x037d},
{0x0185, 0x01ac, 0x01d2, 0x01fa, 0x0220, 0x0248, 0x026f, 0x0296, 0x02bd, 0x02e3, 0x030b, 0x0332, 0x0359, 0x037f},
{0x0186, 0x01ad, 0x01d4, 0x01fb, 0x0222, 0x0249, 0x0270, 0x0297, 0x02be, 0x02e5, 0x030d, 0x0334, 0x035b, 0x0382},
{0x0187, 0x01ae, 0x01d5, 0x01fc, 0x0223, 0x024b, 0x0272, 0x0299, 0x02c0, 0x02e7, 0x030f, 0x0336, 0x035d, 0x0384},
{0x0188, 0x01af, 0x01d6, 0x01fd, 0x0225, 0x024c, 0x0273, 0x029b, 0x02c2, 0x02e9, 0x0311, 0x0338, 0x035f, 0x0386},
{0x0189, 0x01b0, 0x01d7, 0x01ff, 0x0226, 0x024e, 0x0275, 0x029c, 0x02c4, 0x02eb, 0x0313, 0x033a, 0x0361, 0x0389},
{0x018a, 0x01b1, 0x01d8, 0x0200, 0x0227, 0x024f, 0x0277, 0x029e, 0x02c6, 0x02ed, 0x0315, 0x033c, 0x0364, 0x038b},
{0x018b, 0x01b2, 0x01da, 0x0201, 0x0229, 0x0251, 0x0278, 0x02a0, 0x02c7, 0x02ef, 0x0317, 0x033e, 0x0366, 0x038d},
{0x018c, 0x01b3, 0x01db, 0x0203, 0x022a, 0x0252, 0x027a, 0x02a1, 0x02c9, 0x02f1, 0x0319, 0x0340, 0x0368, 0x0390},
{0x018d, 0x01b4, 0x01dc, 0x0204, 0x022c, 0x0254, 0x027b, 0x02a3, 0x02cb, 0x02f3, 0x031b, 0x0342, 0x036a, 0x0392},
{0x018e, 0x01b5, 0x01dd, 0x0205, 0x022d, 0x0255, 0x027d, 0x02a5, 0x02cd, 0x02f5, 0x031d, 0x0344, 0x036c, 0x0394},
{0x018f, 0x01b7, 0x01de, 0x0207, 0x022e, 0x0257, 0x027f, 0x02a7, 0x02cf, 0x02f6, 0x031f, 0x0347, 0x036f, 0x0396},
{0x0190, 0x01b8, 0x01e0, 0x0208, 0x0230, 0x0258, 0x0280, 0x02a8, 0x02d0, 0x02f8, 0x0321, 0x0349, 0x0371, 0x0399},
{0x0191, 0x01b9, 0x01e1, 0x0209, 0x0231, 0x025a, 0x0282, 0x02aa, 0x02d2, 0x02fa, 0x0323, 0x034b, 0x0373, 0x039b},
{0x0192, 0x01ba, 0x01e2, 0x020a, 0x0233, 0x025b, 0x0283, 0x02ac, 0x02d4, 0x02fc, 0x0325, 0x034d, 0x0375, 0x039d},
{0x0193, 0x01bb, 0x01e3, 0x020c, 0x0234, 0x025d, 0x0285, 0x02ad, 0x02d6, 0x02fe, 0x0327, 0x034f, 0x0377, 0x03a0},
{0x0194, 0x01bc, 0x01e4, 0x020d, 0x0235, 0x025e, 0x0287, 0x02af, 0x02d8, 0x0300, 0x0329, 0x0351, 0x037a, 0x03a2},
{0x0195, 0x01bd, 0x01e6, 0x020e, 0x0237, 0x0260, 0x0288, 0x02b1, 0x02d9, 0x0302, 0x032b, 0x0353, 0x037c, 0x03a4},
{0x0196, 0x01be, 0x01e7, 0x0210, 0x0238, 0x0261, 0x028a, 0x02b2, 0x02db, 0x0304, 0x032d, 0x0355, 0x037e, 0x03a7},
{0x0197, 0x01bf, 0x01e8, 0x0211, 0x023a, 0x0263, 0x028b, 0x02b4, 0x02dd, 0x0306, 0x032f, 0x0357, 0x0380, 0x03a9},
{0x0198, 0x01c0, 0x01e9, 0x0212, 0x023b, 0x0264, 0x028d, 0x02b6, 0x02df, 0x0308, 0x0331, 0x0359, 0x0382, 0x03ab},
{0x0199, 0x01c2, 0x01ea, 0x0214, 0x023c, 0x0266, 0x028f, 0x02b8, 0x02e1, 0x0309, 0x0333, 0x035c, 0x0385, 0x03ad},
{0x019a, 0x01c3, 0x01ec, 0x0215, 0x023e, 0x0267, 0x0290, 0x02b9, 0x02e2, 0x030b, 0x0335, 0x035e, 0x0387, 0x03b0},
{0x019b, 0x01c4, 0x01ed, 0x0216, 0x023f, 0x0269, 0x0292, 0x02bb, 0x02e4, 0x030d, 0x0337, 0x0360, 0x0389, 0x03b2},
{0x019c, 0x01c5, 0x01ee, 0x0217, 0x0241, 0x026a, 0x0293, 0x02bd, 0x02e6, 0x030f, 0x0339, 0x0362, 0x038b, 0x03b4},
{0x019d, 0x01c6, 0x01ef, 0x0219, 0x0242, 0x026c, 0x0295, 0x02be, 0x02e8, 0x0311, 0x033b, 0x0364, 0x038d, 0x03b7},
{0x019e, 0x01c7, 0x01f0, 0x021a, 0x0243, 0x026d, 0x0297, 0x02c0, 0x02ea, 0x0313, 0x033d, 0x0366, 0x0390, 0x03b9},
{0x019f, 0x01c8, 0x01f2, 0x021b, 0x0245, 0x026f, 0x0298, 0x02c2, 0x02eb, 0x0315, 0x033f, 0x0368, 0x0392, 0x03bb},
{0x01a0, 0x01c9, 0x01f3, 0x021d, 0x0246, 0x0270, 0x029a, 0x02c3, 0x02ed, 0x0317, 0x0341, 0x036a, 0x0394, 0x03be},
{0x01a1, 0x01ca, 0x01f4, 0x021e, 0x0248, 0x0272, 0x029b, 0x02c5, 0x02ef, 0x0319, 0x0343, 0x036c, 0x0396, 0x03c0},
{0x01a2, 0x01cb, 0x01f5, 0x021f, 0x0249, 0x0273, 0x029d, 0x02c7, 0x02f1, 0x031b, 0x0345, 0x036e, 0x0398, 0x03c2},
{0x01a3, 0x01cd, 0x01f6, 0x0221, 0x024a, 0x0275, 0x029f, 0x02c9, 0x02f3, 0x031c, 0x0347, 0x0371, 0x039b, 0x03c4},
{0x01a4, 0x01ce, 0x01f8, 0x0222, 0x024c, 0x0276, 0x02a0, 0x02ca, 0x02f4, 0x031e, 0x0349, 0x0373, 0x039d, 0x03c7},
{0x01a5, 0x01cf, 0x01f9, 0x0223, 0x024d, 0x0278, 0x02a2, 0x02cc, 0x02f6, 0x0320, 0x034b, 0x0375, 0x039f, 0x03c9},
{0x01a6, 0x01d0, 0x01fa, 0x0224, 0x024f, 0x0279, 0x02a3, 0x02ce, 0x02f8, 0x0322, 0x034d, 0x0377, 0x03a1, 0x03cb},
{0x01a7, 0x01d1, 0x01fb, 0x0226, 0x0250, 0x027b, 0x02a5, 0x02cf, 0x02fa, 0x0324, 0x034f, 0x0379, 0x03a3, 0x03ce},
{0x01a8, 0x01d2, 0x01fc, 0x0227, 0x0251, 0x027c, 0x02a7, 0x02d1, 0x02fc, 0x0326, 0x0351, 0x037b, 0x03a6, 0x03d0},
{0x01a9, 0x01d3, 0x01fe, 0x0228, 0x0253, 0x027e, 0x02a8, 0x02d3, 0x02fd, 0x0328, 0x0353, 0x037d, 0x03a8, 0x03d2},
{0x01aa, 0x01d4, 0x01ff, 0x022a, 0x0254, 0x027f, 0x02aa, 0x02d4, 0x02ff, 0x032a, 0x0355, 0x037f, 0x03aa, 0x03d5},
{0x01ab, 0x01d5, 0x0200, 0x022b, 0x0256, 0x0281, 0x02ab, 0x02d6, 0x0301, 0x032c, 0x0357, 0x0381, 0x03ac, 0x03d7},
{0x01ac, 0x01d6, 0x0201, 0x022c, 0x0257, 0x0282, 0x02ad, 0x02d8, 0x0303, 0x032e, 0x0359, 0x0383, 0x03ae, 0x03d9},
{0x01ad, 0x01d8, 0x0203, 0x022e, 0x0258, 0x0284, 0x02af, 0x02da, 0x0305, 0x032f, 0x035b, 0x0386, 0x03b1, 0x03db},
{0x01ae, 0x01d9, 0x0204, 0x022f, 0x025a, 0x0285, 0x02b0, 0x02db, 0x0306, 0x0331, 0x035d, 0x0388, 0x03b3, 0x03de},
{0x01af, 0x01da, 0x0205, 0x0230, 0x025b, 0x0287, 0x02b2, 0x02dd, 0x0308, 0x0333, 0x035f, 0x038a, 0x03b5, 0x03e0},
{0x01b0, 0x01db, 0x0206, 0x0231, 0x025d, 0x0288, 0x02b3, 0x02df, 0x030a, 0x0335, 0x0361, 0x038c, 0x03b7, 0x03e2},
{0x01b1, 0x01dc, 0x0207, 0x0233, 0x025e, 0x028a, 0x02b5, 0x02e0, 0x030c, 0x0337, 0x0363, 0x038e, 0x03b9, 0x03e5},
{0x01b2, 0x01dd, 0x0209, 0x0234, 0x025f, 0x028b, 0x02b7, 0x02e2, 0x030e, 0x0339, 0x0365, 0x0390, 0x03bc, 0x03e7},
{0x01b3, 0x01de, 0x020a, 0x0235, 0x0261, 0x028d, 0x02b8, 0x02e4, 0x030f, 0x033b, 0x0367, 0x0392, 0x03be, 0x03e9},
{0x01b4, 0x01df, 0x020b, 0x0237, 0x0262, 0x028e, 0x02ba, 0x02e5, 0x0311, 0x033d, 0x0369, 0x0394, 0x03c0, 0x03ec},
{0x01b5, 0x01e0, 0x020c, 0x0238, 0x0264, 0x0290, 0x02bb, 0x02e7, 0x0313, 0x033f, 0x036b, 0x0396, 0x03c2, 0x03ee},
{0x01b6, 0x01e1, 0x020d, 0x0239, 0x0265, 0x0291, 0x02bd, 0x02e9, 0x0315, 0x0341, 0x036d, 0x0398, 0x03c4, 0x03f0},
{0x01b7, 0x01e3, 0x020f, 0x023b, 0x0266, 0x0293, 0x02bf, 0x02eb, 0x0317, 0x0342, 0x036f, 0x039b, 0x03c7, 0x03f2},
{0x01b8, 0x01e4, 0x0210, 0x023c, 0x0268, 0x0294, 0x02c0, 0x02ec, 0x0318, 0x0344, 0x0371, 0x039d, 0x03c9, 0x03f5},
{0x01b9, 0x01e5, 0x0211, 0x023d, 0x0269, 0x0296, 0x02c2, 0x02ee, 0x031a, 0x0346, 0x0373, 0x039f, 0x03cb, 0x03f7},
{0x01ba, 0x01e6, 0x0212, 0x023e, 0x026b, 0x0297, 0x02c3, 0x02f0, 0x031c, 0x0348, 0x0375, 0x03a1, 0x03cd, 0x03f9},
{0x01bb, 0x01e7, 0x0213, 0x0240, 0x026c, 0x0299, 0x02c5, 0x02f1, 0x031e, 0x034a, 0x0377, 0x03a3, 0x03cf, 0x03fc},
{0x01bc, 0x01e8, 0x0215, 0x0241, 0x026d, 0x029a, 0x02c7, 0x02f3, 0x0320, 0x034c, 0x0379, 0x03a5, 0x03d2, 0x03fe},
{0x01bd, 0x01e9, 0x0216, 0x0242, 0x026f, 0x029c, 0x02c8, 0x02f5, 0x0321, 0x034e, 0x037b, 0x03a7, 0x03d4, 0x03ff},
{0x01be, 0x01ea, 0x0217, 0x0244, 0x0270, 0x029d, 0x02ca, 0x02f6, 0x0323, 0x0350, 0x037d, 0x03a9, 0x03d6, 0x03ff},
{0x01bf, 0x01eb, 0x0218, 0x0245, 0x0272, 0x029f, 0x02cb, 0x02f8, 0x0325, 0x0352, 0x037f, 0x03ab, 0x03d8, 0x03ff},
{0x01c0, 0x01ec, 0x0219, 0x0246, 0x0273, 0x02a0, 0x02cd, 0x02fa, 0x0327, 0x0354, 0x0381, 0x03ad, 0x03da, 0x03ff},
{0x01c1, 0x01ee, 0x021b, 0x0248, 0x0274, 0x02a2, 0x02cf, 0x02fc, 0x0329, 0x0355, 0x0383, 0x03b0, 0x03dd, 0x03ff},
{0x01c2, 0x01ef, 0x021c, 0x0249, 0x0276, 0x02a3, 0x02d0, 0x02fd, 0x032a, 0x0357, 0x0385, 0x03b2, 0x03df, 0x03ff},
{0x01c3, 0x01f0, 0x021d, 0x024a, 0x0277, 0x02a5, 0x02d2, 0x02ff, 0x032c, 0x0359, 0x0387, 0x03b4, 0x03e1, 0x03ff},
{0x01c4, 0x01f1, 0x021e, 0x024b, 0x0279, 0x02a6, 0x02d3, 0x0301, 0x032e, 0x035b, 0x0389, 0x03b6, 0x03e3, 0x03ff},
{0x01c5, 0x01f2, 0x021f, 0x024d, 0x027a, 0x02a8, 0x02d5, 0x0302, 0x0330, 0x035d, 0x038b, 0x03b8, 0x03e5, 0x03ff},
{0x01c6, 0x01f3, 0x0221, 0x024e, 0x027b, 0x02a9, 0x02d7, 0x0304, 0x0332, 0x035f, 0x038d, 0x03ba, 0x03e8, 0x03ff},
{0x01c7, 0x01f4, 0x0222, 0x024f, 0x027d, 0x02ab, 0x02d8, 0x0306, 0x0333, 0x0361, 0x038f, 0x03bc, 0x03ea, 0x03ff},
{0x01c8, 0x01f5, 0x0223, 0x0251, 0x027e, 0x02ac, 0x02da, 0x0307, 0x0335, 0x0363, 0x0391, 0x03be, 0x03ec, 0x03ff},
{0x01c9, 0x01f6, 0x0224, 0x0252, 0x0280, 0x02ae, 0x02db, 0x0309, 0x0337, 0x0365, 0x0393, 0x03c0, 0x03ee, 0x03ff},
{0x01ca, 0x01f7, 0x0225, 0x0253, 0x0281, 0x02af, 0x02dd, 0x030b, 0x0339, 0x0367, 0x0395, 0x03c2, 0x03f0, 0x03ff},
{0x01cb, 0x01f9, 0x0227, 0x0255, 0x0282, 0x02b1, 0x02df, 0x030d, 0x033b, 0x0368, 0x0397, 0x03c5, 0x03f3, 0x03ff},
{0x01cc, 0x01fa, 0x0228, 0x0256, 0x0284, 0x02b2, 0x02e0, 0x030e, 0x033c, 0x036a, 0x0399, 0x03c7, 0x03f5, 0x03ff},
{0x01cd, 0x01fb, 0x0229, 0x0257, 0x0285, 0x02b4, 0x02e2, 0x0310, 0x033e, 0x036c, 0x039b, 0x03c9, 0x03f7, 0x03ff},
{0x01ce, 0x01fc, 0x022a, 0x0258, 0x0287, 0x02b5, 0x02e3, 0x0312, 0x0340, 0x036e, 0x039d, 0x03cb, 0x03f9, 0x03ff},
{0x01cf, 0x01fd, 0x022b, 0x025a, 0x0288, 0x02b7, 0x02e5, 0x0313, 0x0342, 0x0370, 0x039f, 0x03cd, 0x03fb, 0x03ff},
{0x01d0, 0x01fe, 0x022d, 0x025b, 0x0289, 0x02b8, 0x02e7, 0x0315, 0x0344, 0x0372, 0x03a1, 0x03cf, 0x03fe, 0x03ff},
{0x01d1, 0x01ff, 0x022e, 0x025c, 0x028b, 0x02ba, 0x02e8, 0x0317, 0x0345, 0x0374, 0x03a3, 0x03d1, 0x03ff, 0x03ff},
{0x01d2, 0x0200, 0x022f, 0x025e, 0x028c, 0x02bb, 0x02ea, 0x0318, 0x0347, 0x0376, 0x03a5, 0x03d3, 0x03ff, 0x03ff},
{0x01d3, 0x0201, 0x0230, 0x025f, 0x028e, 0x02bd, 0x02eb, 0x031a, 0x0349, 0x0378, 0x03a7, 0x03d5, 0x03ff, 0x03ff},
{0x01d4, 0x0202, 0x0231, 0x0260, 0x028f, 0x02be, 0x02ed, 0x031c, 0x034b, 0x037a, 0x03a9, 0x03d7, 0x03ff, 0x03ff},
{0x01d5, 0x0204, 0x0233, 0x0262, 0x0290, 0x02c0, 0x02ef, 0x031e, 0x034d, 0x037b, 0x03ab, 0x03da, 0x03ff, 0x03ff},
{0x01d6, 0x0205, 0x0234, 0x0263, 0x0292, 0x02c1, 0x02f0, 0x031f, 0x034e, 0x037d, 0x03ad, 0x03dc, 0x03ff, 0x03ff},
{0x01d7, 0x0206, 0x0235, 0x0264, 0x0293, 0x02c3, 0x02f2, 0x0321, 0x0350, 0x037f, 0x03af, 0x03de, 0x03ff, 0x03ff},
{0x01d8, 0x0207, 0x0236, 0x0265, 0x0295, 0x02c4, 0x02f3, 0x0323, 0x0352, 0x0381, 0x03b1, 0x03e0, 0x03ff, 0x03ff},
{0x01d9, 0x0208, 0x0237, 0x0267, 0x0296, 0x02c6, 0x02f5, 0x0324, 0x0354, 0x0383, 0x03b3, 0x03e2, 0x03ff, 0x03ff},
{0x01da, 0x0209, 0x0239, 0x0268, 0x0297, 0x02c7, 0x02f7, 0x0326, 0x0356, 0x0385, 0x03b5, 0x03e4, 0x03ff, 0x03ff},
{0x01db, 0x020a, 0x023a, 0x0269, 0x0299, 0x02c9, 0x02f8, 0x0328, 0x0357, 0x0387, 0x03b7, 0x03e6, 0x03ff, 0x03ff},
{0x01dc, 0x020b, 0x023b, 0x026b, 0x029a, 0x02ca, 0x02fa, 0x0329, 0x0359, 0x0389, 0x03b9, 0x03e8, 0x03ff, 0x03ff},
{0x01dd, 0x020c, 0x023c, 0x026c, 0x029c, 0x02cc, 0x02fb, 0x032b, 0x035b, 0x038b, 0x03bb, 0x03ea, 0x03ff, 0x03ff},
{0x01de, 0x020d, 0x023d, 0x026d, 0x029d, 0x02cd, 0x02fd, 0x032d, 0x035d, 0x038d, 0x03bd, 0x03ec, 0x03ff, 0x03ff},
{0x01df, 0x020f, 0x023f, 0x026f, 0x029e, 0x02cf, 0x02ff, 0x032f, 0x035f, 0x038e, 0x03bf, 0x03ef, 0x03ff, 0x03ff},
{0x01e0, 0x0210, 0x0240, 0x0270, 0x02a0, 0x02d0, 0x0300, 0x0330, 0x0360, 0x0390, 0x03c1, 0x03f1, 0x03ff, 0x03ff},
{0x01e1, 0x0211, 0x0241, 0x0271, 0x02a1, 0x02d2, 0x0302, 0x0332, 0x0362, 0x0392, 0x03c3, 0x03f3, 0x03ff, 0x03ff},
{0x01e2, 0x0212, 0x0242, 0x0272, 0x02a3, 0x02d3, 0x0303, 0x0334, 0x0364, 0x0394, 0x03c5, 0x03f5, 0x03ff, 0x03ff},
{0x01e3, 0x0213, 0x0243, 0x0274, 0x02a4, 0x02d5, 0x0305, 0x0335, 0x0366, 0x0396, 0x03c7, 0x03f7, 0x03ff, 0x03ff},
{0x01e4, 0x0214, 0x0245, 0x0275, 0x02a5, 0x02d6, 0x0307, 0x0337, 0x0368, 0x0398, 0x03c9, 0x03f9, 0x03ff, 0x03ff},
{0x01e5, 0x0215, 0x0246, 0x0276, 0x02a7, 0x02d8, 0x0308, 0x0339, 0x0369, 0x039a, 0x03cb, 0x03fb, 0x03ff, 0x03ff},
{0x01e6, 0x0216, 0x0247, 0x0278, 0x02a8, 0x02d9, 0x030a, 0x033a, 0x036b, 0x039c, 0x03cd, 0x03fd, 0x03ff, 0x03ff},
{0x01e7, 0x0217, 0x0248, 0x0279, 0x02aa, 0x02db, 0x030b, 0x033c, 0x036d, 0x039e, 0x03cf, 0x03ff, 0x03ff, 0x03ff},
{0x01e8, 0x0218, 0x0249, 0x027a, 0x02ab, 0x02dc, 0x030d, 0x033e, 0x036f, 0x03a0, 0x03d1, 0x03ff, 0x03ff, 0x03ff},
{0x01e9, 0x021a, 0x024b, 0x027c, 0x02ac, 0x02de, 0x030f, 0x0340, 0x0371, 0x03a1, 0x03d3, 0x03ff, 0x03ff, 0x03ff},
{0x01ea, 0x021b, 0x024c, 0x027d, 0x02ae, 0x02df, 0x0310, 0x0341, 0x0372, 0x03a3, 0x03d5, 0x03ff, 0x03ff, 0x03ff},
{0x01eb, 0x021c, 0x024d, 0x027e, 0x02af, 0x02e1, 0x0312, 0x0343, 0x0374, 0x03a5, 0x03d7, 0x03ff, 0x03ff, 0x03ff},
{0x01ec, 0x021d, 0x024e, 0x027f, 0x02b1, 0x02e2, 0x0313, 0x0345, 0x0376, 0x03a7, 0x03d9, 0x03ff, 0x03ff, 0x03ff},
{0x01ed, 0x021e, 0x024f, 0x0281, 0x02b2, 0x02e4, 0x0315, 0x0346, 0x0378, 0x03a9, 0x03db, 0x03ff, 0x03ff, 0x03ff},
{0x01ee, 0x021f, 0x0251, 0x0282, 0x02b3, 0x02e5, 0x0317, 0x0348, 0x037a, 0x03ab, 0x03dd, 0x03ff, 0x03ff, 0x03ff},
{0x01ef, 0x0220, 0x0252, 0x0283, 0x02b5, 0x02e7, 0x0318, 0x034a, 0x037b, 0x03ad, 0x03df, 0x03ff, 0x03ff, 0x03ff},
{0x01f0, 0x0221, 0x0253, 0x0285, 0x02b6, 0x02e8, 0x031a, 0x034b, 0x037d, 0x03af, 0x03e1, 0x03ff, 0x03ff, 0x03ff},
{0x01f1, 0x0222, 0x0254, 0x0286, 0x02b8, 0x02ea, 0x031b, 0x034d, 0x037f, 0x03b1, 0x03e3, 0x03ff, 0x03ff, 0x03ff},
{0x01f2, 0x0223, 0x0255, 0x0287, 0x02b9, 0x02eb, 0x031d, 0x034f, 0x0381, 0x03b3, 0x03e5, 0x03ff, 0x03ff, 0x03ff},
{0x01f3, 0x0225, 0x0257, 0x0289, 0x02ba, 0x02ed, 0x031f, 0x0351, 0x0383, 0x03b4, 0x03e7, 0x03ff, 0x03ff, 0x03ff},
{0x01f4, 0x0226, 0x0258, 0x028a, 0x02bc, 0x02ee, 0x0320, 0x0352, 0x0384, 0x03b6, 0x03e9, 0x03ff, 0x03ff, 0x03ff},
{0x01f5, 0x0227, 0x0259, 0x028b, 0x02bd, 0x02f0, 0x0322, 0x0354, 0x0386, 0x03b8, 0x03eb, 0x03ff, 0x03ff, 0x03ff},
{0x01f6, 0x0228, 0x025a, 0x028c, 0x02bf, 0x02f1, 0x0323, 0x0356, 0x0388, 0x03ba, 0x03ed, 0x03ff, 0x03ff, 0x03ff},
{0x01f7, 0x0229, 0x025b, 0x028e, 0x02c0, 0x02f3, 0x0325, 0x0357, 0x038a, 0x03bc, 0x03ef, 0x03ff, 0x03ff, 0x03ff},
{0x01f8, 0x022a, 0x025d, 0x028f, 0x02c1, 0x02f4, 0x0327, 0x0359, 0x038c, 0x03be, 0x03f1, 0x03ff, 0x03ff, 0x03ff},
{0x01f9, 0x022b, 0x025e, 0x0290, 0x02c3, 0x02f6, 0x0328, 0x035b, 0x038d, 0x03c0, 0x03f3, 0x03ff, 0x03ff, 0x03ff},
{0x01fa, 0x022c, 0x025f, 0x0292, 0x02c4, 0x02f7, 0x032a, 0x035c, 0x038f, 0x03c2, 0x03f5, 0x03ff, 0x03ff, 0x03ff},
{0x01fb, 0x022d, 0x0260, 0x0293, 0x02c6, 0x02f9, 0x032b, 0x035e, 0x0391, 0x03c4, 0x03f7, 0x03ff, 0x03ff, 0x03ff},
{0x01fc, 0x022e, 0x0261, 0x0294, 0x02c7, 0x02fa, 0x032d, 0x0360, 0x0393, 0x03c6, 0x03f9, 0x03ff, 0x03ff, 0x03ff},
{0x01fd, 0x0230, 0x0263, 0x0296, 0x02c8, 0x02fc, 0x032f, 0x0362, 0x0395, 0x03c7, 0x03fb, 0x03ff, 0x03ff, 0x03ff},
{0x01fe, 0x0231, 0x0264, 0x0297, 0x02ca, 0x02fd, 0x0330, 0x0363, 0x0396, 0x03c9, 0x03fd, 0x03ff, 0x03ff, 0x03ff},
{0x01ff, 0x0232, 0x0265, 0x0298, 0x02cb, 0x02ff, 0x0332, 0x0365, 0x0398, 0x03cb, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0200, 0x0233, 0x0266, 0x0299, 0x02cd, 0x0300, 0x0333, 0x0367, 0x039a, 0x03cd, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0201, 0x0234, 0x0267, 0x029b, 0x02ce, 0x0302, 0x0335, 0x0368, 0x039c, 0x03cf, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0202, 0x0235, 0x0269, 0x029c, 0x02cf, 0x0303, 0x0337, 0x036a, 0x039e, 0x03d1, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0203, 0x0236, 0x026a, 0x029d, 0x02d1, 0x0305, 0x0338, 0x036c, 0x039f, 0x03d3, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0204, 0x0237, 0x026b, 0x029f, 0x02d2, 0x0306, 0x033a, 0x036d, 0x03a1, 0x03d5, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0205, 0x0238, 0x026c, 0x02a0, 0x02d4, 0x0308, 0x033b, 0x036f, 0x03a3, 0x03d7, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0206, 0x0239, 0x026d, 0x02a1, 0x02d5, 0x0309, 0x033d, 0x0371, 0x03a5, 0x03d9, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0207, 0x023b, 0x026f, 0x02a3, 0x02d6, 0x030b, 0x033f, 0x0373, 0x03a7, 0x03da, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0208, 0x023c, 0x0270, 0x02a4, 0x02d8, 0x030c, 0x0340, 0x0374, 0x03a8, 0x03dc, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0209, 0x023d, 0x0271, 0x02a5, 0x02d9, 0x030e, 0x0342, 0x0376, 0x03aa, 0x03de, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x020a, 0x023e, 0x0272, 0x02a6, 0x02db, 0x030f, 0x0343, 0x0378, 0x03ac, 0x03e0, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x020b, 0x023f, 0x0273, 0x02a8, 0x02dc, 0x0311, 0x0345, 0x0379, 0x03ae, 0x03e2, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x020c, 0x0240, 0x0275, 0x02a9, 0x02dd, 0x0312, 0x0347, 0x037b, 0x03b0, 0x03e4, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x020d, 0x0241, 0x0276, 0x02aa, 0x02df, 0x0314, 0x0348, 0x037d, 0x03b1, 0x03e6, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x020e, 0x0242, 0x0277, 0x02ac, 0x02e0, 0x0315, 0x034a, 0x037e, 0x03b3, 0x03e8, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x020f, 0x0243, 0x0278, 0x02ad, 0x02e2, 0x0317, 0x034b, 0x0380, 0x03b5, 0x03ea, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0210, 0x0244, 0x0279, 0x02ae, 0x02e3, 0x0318, 0x034d, 0x0382, 0x03b7, 0x03ec, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0211, 0x0246, 0x027b, 0x02b0, 0x02e4, 0x031a, 0x034f, 0x0384, 0x03b9, 0x03ed, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0212, 0x0247, 0x027c, 0x02b1, 0x02e6, 0x031b, 0x0350, 0x0385, 0x03ba, 0x03ef, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0213, 0x0248, 0x027d, 0x02b2, 0x02e7, 0x031d, 0x0352, 0x0387, 0x03bc, 0x03f1, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0214, 0x0249, 0x027e, 0x02b3, 0x02e9, 0x031e, 0x0353, 0x0389, 0x03be, 0x03f3, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0215, 0x024a, 0x027f, 0x02b5, 0x02ea, 0x0320, 0x0355, 0x038a, 0x03c0, 0x03f5, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0216, 0x024b, 0x0281, 0x02b6, 0x02eb, 0x0321, 0x0357, 0x038c, 0x03c2, 0x03f7, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0217, 0x024c, 0x0282, 0x02b7, 0x02ed, 0x0323, 0x0358, 0x038e, 0x03c3, 0x03f9, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0218, 0x024d, 0x0283, 0x02b9, 0x02ee, 0x0324, 0x035a, 0x038f, 0x03c5, 0x03fb, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0219, 0x024e, 0x0284, 0x02ba, 0x02f0, 0x0326, 0x035b, 0x0391, 0x03c7, 0x03fd, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x021a, 0x024f, 0x0285, 0x02bb, 0x02f1, 0x0327, 0x035d, 0x0393, 0x03c9, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x021b, 0x0251, 0x0287, 0x02bd, 0x02f2, 0x0329, 0x035f, 0x0395, 0x03cb, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x021c, 0x0252, 0x0288, 0x02be, 0x02f4, 0x032a, 0x0360, 0x0396, 0x03cc, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x021d, 0x0253, 0x0289, 0x02bf, 0x02f5, 0x032c, 0x0362, 0x0398, 0x03ce, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x021e, 0x0254, 0x028a, 0x02c0, 0x02f7, 0x032d, 0x0363, 0x039a, 0x03d0, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x021f, 0x0255, 0x028b, 0x02c2, 0x02f8, 0x032f, 0x0365, 0x039b, 0x03d2, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0220, 0x0256, 0x028d, 0x02c3, 0x02f9, 0x0330, 0x0367, 0x039d, 0x03d4, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0221, 0x0257, 0x028e, 0x02c4, 0x02fb, 0x0332, 0x0368, 0x039f, 0x03d5, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0222, 0x0258, 0x028f, 0x02c6, 0x02fc, 0x0333, 0x036a, 0x03a0, 0x03d7, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0223, 0x0259, 0x0290, 0x02c7, 0x02fe, 0x0335, 0x036b, 0x03a2, 0x03d9, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0224, 0x025a, 0x0291, 0x02c8, 0x02ff, 0x0336, 0x036d, 0x03a4, 0x03db, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0225, 0x025c, 0x0293, 0x02ca, 0x0300, 0x0338, 0x036f, 0x03a6, 0x03dd, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0226, 0x025d, 0x0294, 0x02cb, 0x0302, 0x0339, 0x0370, 0x03a7, 0x03de, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0227, 0x025e, 0x0295, 0x02cc, 0x0303, 0x033b, 0x0372, 0x03a9, 0x03e0, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0228, 0x025f, 0x0296, 0x02cd, 0x0305, 0x033c, 0x0373, 0x03ab, 0x03e2, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0229, 0x0260, 0x0297, 0x02cf, 0x0306, 0x033e, 0x0375, 0x03ac, 0x03e4, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x022a, 0x0261, 0x0299, 0x02d0, 0x0307, 0x033f, 0x0377, 0x03ae, 0x03e6, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x022b, 0x0262, 0x029a, 0x02d1, 0x0309, 0x0341, 0x0378, 0x03b0, 0x03e7, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x022c, 0x0263, 0x029b, 0x02d3, 0x030a, 0x0342, 0x037a, 0x03b1, 0x03e9, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x022d, 0x0264, 0x029c, 0x02d4, 0x030c, 0x0344, 0x037b, 0x03b3, 0x03eb, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x022e, 0x0265, 0x029d, 0x02d5, 0x030d, 0x0345, 0x037d, 0x03b5, 0x03ed, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x022f, 0x0267, 0x029f, 0x02d7, 0x030e, 0x0347, 0x037f, 0x03b7, 0x03ef, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0230, 0x0268, 0x02a0, 0x02d8, 0x0310, 0x0348, 0x0380, 0x03b8, 0x03f0, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0231, 0x0269, 0x02a1, 0x02d9, 0x0311, 0x034a, 0x0382, 0x03ba, 0x03f2, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0232, 0x026a, 0x02a2, 0x02da, 0x0313, 0x034b, 0x0383, 0x03bc, 0x03f4, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0233, 0x026b, 0x02a3, 0x02dc, 0x0314, 0x034d, 0x0385, 0x03bd, 0x03f6, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0234, 0x026c, 0x02a5, 0x02dd, 0x0315, 0x034e, 0x0387, 0x03bf, 0x03f8, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0235, 0x026d, 0x02a6, 0x02de, 0x0317, 0x0350, 0x0388, 0x03c1, 0x03f9, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0236, 0x026e, 0x02a7, 0x02e0, 0x0318, 0x0351, 0x038a, 0x03c2, 0x03fb, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0237, 0x026f, 0x02a8, 0x02e1, 0x031a, 0x0353, 0x038b, 0x03c4, 0x03fd, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0238, 0x0270, 0x02a9, 0x02e2, 0x031b, 0x0354, 0x038d, 0x03c6, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0239, 0x0272, 0x02ab, 0x02e4, 0x031c, 0x0356, 0x038f, 0x03c8, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x023a, 0x0273, 0x02ac, 0x02e5, 0x031e, 0x0357, 0x0390, 0x03c9, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x023b, 0x0274, 0x02ad, 0x02e6, 0x031f, 0x0359, 0x0392, 0x03cb, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x023c, 0x0275, 0x02ae, 0x02e7, 0x0321, 0x035a, 0x0393, 0x03cd, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x023d, 0x0276, 0x02af, 0x02e9, 0x0322, 0x035c, 0x0395, 0x03ce, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x023e, 0x0277, 0x02b1, 0x02ea, 0x0323, 0x035d, 0x0397, 0x03d0, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x023f, 0x0278, 0x02b2, 0x02eb, 0x0325, 0x035f, 0x0398, 0x03d2, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0240, 0x0279, 0x02b3, 0x02ed, 0x0326, 0x0360, 0x039a, 0x03d3, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0241, 0x027a, 0x02b4, 0x02ee, 0x0328, 0x0362, 0x039b, 0x03d5, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0242, 0x027b, 0x02b5, 0x02ef, 0x0329, 0x0363, 0x039d, 0x03d7, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0243, 0x027d, 0x02b7, 0x02f1, 0x032a, 0x0365, 0x039f, 0x03d9, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0244, 0x027e, 0x02b8, 0x02f2, 0x032c, 0x0366, 0x03a0, 0x03da, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0245, 0x027f, 0x02b9, 0x02f3, 0x032d, 0x0368, 0x03a2, 0x03dc, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0246, 0x0280, 0x02ba, 0x02f4, 0x032f, 0x0369, 0x03a3, 0x03de, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0247, 0x0281, 0x02bb, 0x02f6, 0x0330, 0x036b, 0x03a5, 0x03df, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0248, 0x0282, 0x02bd, 0x02f7, 0x0331, 0x036c, 0x03a7, 0x03e1, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0249, 0x0283, 0x02be, 0x02f8, 0x0333, 0x036e, 0x03a8, 0x03e3, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x024a, 0x0284, 0x02bf, 0x02fa, 0x0334, 0x036f, 0x03aa, 0x03e4, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x024b, 0x0285, 0x02c0, 0x02fb, 0x0336, 0x0371, 0x03ab, 0x03e6, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x024c, 0x0286, 0x02c1, 0x02fc, 0x0337, 0x0372, 0x03ad, 0x03e8, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x024d, 0x0288, 0x02c3, 0x02fe, 0x0338, 0x0374, 0x03af, 0x03ea, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x024e, 0x0289, 0x02c4, 0x02ff, 0x033a, 0x0375, 0x03b0, 0x03eb, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x024f, 0x028a, 0x02c5, 0x0300, 0x033b, 0x0377, 0x03b2, 0x03ed, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0250, 0x028b, 0x02c6, 0x0301, 0x033d, 0x0378, 0x03b3, 0x03ef, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0251, 0x028c, 0x02c7, 0x0303, 0x033e, 0x037a, 0x03b5, 0x03f0, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0252, 0x028d, 0x02c9, 0x0304, 0x033f, 0x037b, 0x03b7, 0x03f2, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0253, 0x028e, 0x02ca, 0x0305, 0x0341, 0x037d, 0x03b8, 0x03f4, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0254, 0x028f, 0x02cb, 0x0307, 0x0342, 0x037e, 0x03ba, 0x03f5, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0255, 0x0290, 0x02cc, 0x0308, 0x0344, 0x0380, 0x03bb, 0x03f7, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0256, 0x0291, 0x02cd, 0x0309, 0x0345, 0x0381, 0x03bd, 0x03f9, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0257, 0x0293, 0x02cf, 0x030b, 0x0346, 0x0383, 0x03bf, 0x03fb, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0258, 0x0294, 0x02d0, 0x030c, 0x0348, 0x0384, 0x03c0, 0x03fc, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0259, 0x0295, 0x02d1, 0x030d, 0x0349, 0x0386, 0x03c2, 0x03fe, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x025a, 0x0296, 0x02d2, 0x030e, 0x034b, 0x0387, 0x03c3, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x025b, 0x0297, 0x02d3, 0x0310, 0x034c, 0x0389, 0x03c5, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x025c, 0x0298, 0x02d5, 0x0311, 0x034d, 0x038a, 0x03c7, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x025d, 0x0299, 0x02d6, 0x0312, 0x034f, 0x038c, 0x03c8, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x025e, 0x029a, 0x02d7, 0x0314, 0x0350, 0x038d, 0x03ca, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x025f, 0x029b, 0x02d8, 0x0315, 0x0352, 0x038f, 0x03cb, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0260, 0x029c, 0x02d9, 0x0316, 0x0353, 0x0390, 0x03cd, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0261, 0x029e, 0x02db, 0x0318, 0x0354, 0x0392, 0x03cf, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0262, 0x029f, 0x02dc, 0x0319, 0x0356, 0x0393, 0x03d0, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0263, 0x02a0, 0x02dd, 0x031a, 0x0357, 0x0395, 0x03d2, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0264, 0x02a1, 0x02de, 0x031b, 0x0359, 0x0396, 0x03d3, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0265, 0x02a2, 0x02df, 0x031d, 0x035a, 0x0398, 0x03d5, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0266, 0x02a3, 0x02e1, 0x031e, 0x035b, 0x0399, 0x03d7, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0267, 0x02a4, 0x02e2, 0x031f, 0x035d, 0x039b, 0x03d8, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0268, 0x02a5, 0x02e3, 0x0321, 0x035e, 0x039c, 0x03da, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0269, 0x02a6, 0x02e4, 0x0322, 0x0360, 0x039e, 0x03db, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x026a, 0x02a7, 0x02e5, 0x0323, 0x0361, 0x039f, 0x03dd, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x026b, 0x02a9, 0x02e7, 0x0325, 0x0362, 0x03a1, 0x03df, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x026c, 0x02aa, 0x02e8, 0x0326, 0x0364, 0x03a2, 0x03e0, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x026d, 0x02ab, 0x02e9, 0x0327, 0x0365, 0x03a4, 0x03e2, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x026e, 0x02ac, 0x02ea, 0x0328, 0x0367, 0x03a5, 0x03e3, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x026f, 0x02ad, 0x02eb, 0x032a, 0x0368, 0x03a7, 0x03e5, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0270, 0x02ae, 0x02ed, 0x032b, 0x0369, 0x03a8, 0x03e7, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0271, 0x02af, 0x02ee, 0x032c, 0x036b, 0x03aa, 0x03e8, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0272, 0x02b0, 0x02ef, 0x032e, 0x036c, 0x03ab, 0x03ea, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0273, 0x02b1, 0x02f0, 0x032f, 0x036e, 0x03ad, 0x03eb, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0274, 0x02b2, 0x02f1, 0x0330, 0x036f, 0x03ae, 0x03ed, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0275, 0x02b4, 0x02f3, 0x0332, 0x0370, 0x03b0, 0x03ef, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0276, 0x02b5, 0x02f4, 0x0333, 0x0372, 0x03b1, 0x03f0, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0277, 0x02b6, 0x02f5, 0x0334, 0x0373, 0x03b3, 0x03f2, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0278, 0x02b7, 0x02f6, 0x0335, 0x0375, 0x03b4, 0x03f3, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0279, 0x02b8, 0x02f7, 0x0337, 0x0376, 0x03b6, 0x03f5, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x027a, 0x02b9, 0x02f9, 0x0338, 0x0377, 0x03b7, 0x03f7, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x027b, 0x02ba, 0x02fa, 0x0339, 0x0379, 0x03b9, 0x03f8, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x027c, 0x02bb, 0x02fb, 0x033b, 0x037a, 0x03ba, 0x03fa, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x027d, 0x02bc, 0x02fc, 0x033c, 0x037c, 0x03bc, 0x03fb, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x027e, 0x02bd, 0x02fd, 0x033d, 0x037d, 0x03bd, 0x03fd, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x027f, 0x02bf, 0x02ff, 0x033f, 0x037e, 0x03bf, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0280, 0x02c0, 0x0300, 0x0340, 0x0380, 0x03c0, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0281, 0x02c1, 0x0301, 0x0341, 0x0381, 0x03c2, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0282, 0x02c2, 0x0302, 0x0342, 0x0383, 0x03c3, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0283, 0x02c3, 0x0303, 0x0344, 0x0384, 0x03c5, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0284, 0x02c4, 0x0305, 0x0345, 0x0385, 0x03c6, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0285, 0x02c5, 0x0306, 0x0346, 0x0387, 0x03c8, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0286, 0x02c6, 0x0307, 0x0348, 0x0388, 0x03c9, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0287, 0x02c7, 0x0308, 0x0349, 0x038a, 0x03cb, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0288, 0x02c8, 0x0309, 0x034a, 0x038b, 0x03cc, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0289, 0x02ca, 0x030b, 0x034c, 0x038c, 0x03ce, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x028a, 0x02cb, 0x030c, 0x034d, 0x038e, 0x03cf, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x028b, 0x02cc, 0x030d, 0x034e, 0x038f, 0x03d1, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x028c, 0x02cd, 0x030e, 0x034f, 0x0391, 0x03d2, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x028d, 0x02ce, 0x030f, 0x0351, 0x0392, 0x03d4, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x028e, 0x02cf, 0x0311, 0x0352, 0x0393, 0x03d5, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x028f, 0x02d0, 0x0312, 0x0353, 0x0395, 0x03d7, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0290, 0x02d1, 0x0313, 0x0355, 0x0396, 0x03d8, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0291, 0x02d2, 0x0314, 0x0356, 0x0398, 0x03da, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0292, 0x02d3, 0x0315, 0x0357, 0x0399, 0x03db, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0293, 0x02d5, 0x0317, 0x0359, 0x039a, 0x03dd, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0294, 0x02d6, 0x0318, 0x035a, 0x039c, 0x03de, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0295, 0x02d7, 0x0319, 0x035b, 0x039d, 0x03e0, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0296, 0x02d8, 0x031a, 0x035c, 0x039f, 0x03e1, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0297, 0x02d9, 0x031b, 0x035e, 0x03a0, 0x03e3, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0298, 0x02da, 0x031d, 0x035f, 0x03a1, 0x03e4, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0299, 0x02db, 0x031e, 0x0360, 0x03a3, 0x03e6, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x029a, 0x02dc, 0x031f, 0x0362, 0x03a4, 0x03e7, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x029b, 0x02dd, 0x0320, 0x0363, 0x03a6, 0x03e9, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x029c, 0x02de, 0x0321, 0x0364, 0x03a7, 0x03ea, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x029d, 0x02e0, 0x0323, 0x0366, 0x03a8, 0x03ec, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x029e, 0x02e1, 0x0324, 0x0367, 0x03aa, 0x03ed, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x029f, 0x02e2, 0x0325, 0x0368, 0x03ab, 0x03ef, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x02a0, 0x02e3, 0x0326, 0x0369, 0x03ad, 0x03f0, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x02a1, 0x02e4, 0x0327, 0x036b, 0x03ae, 0x03f2, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x02a2, 0x02e5, 0x0329, 0x036c, 0x03af, 0x03f3, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x02a3, 0x02e6, 0x032a, 0x036d, 0x03b1, 0x03f5, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x02a4, 0x02e7, 0x032b, 0x036f, 0x03b2, 0x03f6, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x02a5, 0x02e8, 0x032c, 0x0370, 0x03b4, 0x03f8, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x02a6, 0x02e9, 0x032d, 0x0371, 0x03b5, 0x03f9, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x02a7, 0x02eb, 0x032f, 0x0373, 0x03b6, 0x03fb, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x02a8, 0x02ec, 0x0330, 0x0374, 0x03b8, 0x03fc, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x02a9, 0x02ed, 0x0331, 0x0375, 0x03b9, 0x03fe, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x02aa, 0x02ee, 0x0332, 0x0376, 0x03bb, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x02ab, 0x02ef, 0x0333, 0x0378, 0x03bc, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x02ac, 0x02f0, 0x0335, 0x0379, 0x03bd, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x02ad, 0x02f1, 0x0336, 0x037a, 0x03bf, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x02ae, 0x02f2, 0x0337, 0x037c, 0x03c0, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x02af, 0x02f3, 0x0338, 0x037d, 0x03c2, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x02b0, 0x02f4, 0x0339, 0x037e, 0x03c3, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x02b1, 0x02f6, 0x033b, 0x0380, 0x03c4, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x02b2, 0x02f7, 0x033c, 0x0381, 0x03c6, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x02b3, 0x02f8, 0x033d, 0x0382, 0x03c7, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x02b4, 0x02f9, 0x033e, 0x0383, 0x03c9, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x02b5, 0x02fa, 0x033f, 0x0385, 0x03ca, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x02b6, 0x02fb, 0x0341, 0x0386, 0x03cb, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x02b7, 0x02fc, 0x0342, 0x0387, 0x03cd, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x02b8, 0x02fd, 0x0343, 0x0389, 0x03ce, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x02b9, 0x02fe, 0x0344, 0x038a, 0x03d0, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x02ba, 0x02ff, 0x0345, 0x038b, 0x03d1, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x02bb, 0x0301, 0x0347, 0x038d, 0x03d2, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x02bc, 0x0302, 0x0348, 0x038e, 0x03d4, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x02bd, 0x0303, 0x0349, 0x038f, 0x03d5, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x02be, 0x0304, 0x034a, 0x0390, 0x03d7, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x02bf, 0x0305, 0x034b, 0x0392, 0x03d8, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x02c0, 0x0306, 0x034d, 0x0393, 0x03d9, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x02c1, 0x0307, 0x034e, 0x0394, 0x03db, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x02c2, 0x0308, 0x034f, 0x0396, 0x03dc, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x02c3, 0x0309, 0x0350, 0x0397, 0x03de, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x02c4, 0x030a, 0x0351, 0x0398, 0x03df, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x02c5, 0x030c, 0x0353, 0x039a, 0x03e0, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x02c6, 0x030d, 0x0354, 0x039b, 0x03e2, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x02c7, 0x030e, 0x0355, 0x039c, 0x03e3, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x02c8, 0x030f, 0x0356, 0x039d, 0x03e5, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x02c9, 0x0310, 0x0357, 0x039f, 0x03e6, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x02ca, 0x0311, 0x0359, 0x03a0, 0x03e7, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x02cb, 0x0312, 0x035a, 0x03a1, 0x03e9, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x02cc, 0x0313, 0x035b, 0x03a3, 0x03ea, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x02cd, 0x0314, 0x035c, 0x03a4, 0x03ec, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x02ce, 0x0315, 0x035d, 0x03a5, 0x03ed, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x02cf, 0x0317, 0x035f, 0x03a7, 0x03ee, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x02d0, 0x0318, 0x0360, 0x03a8, 0x03f0, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x02d1, 0x0319, 0x0361, 0x03a9, 0x03f1, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x02d2, 0x031a, 0x0362, 0x03aa, 0x03f3, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x02d3, 0x031b, 0x0363, 0x03ac, 0x03f4, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x02d4, 0x031c, 0x0365, 0x03ad, 0x03f5, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x02d5, 0x031d, 0x0366, 0x03ae, 0x03f7, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x02d6, 0x031e, 0x0367, 0x03b0, 0x03f8, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x02d7, 0x031f, 0x0368, 0x03b1, 0x03fa, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x02d8, 0x0320, 0x0369, 0x03b2, 0x03fb, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x02d9, 0x0322, 0x036b, 0x03b4, 0x03fc, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x02da, 0x0323, 0x036c, 0x03b5, 0x03fe, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x02db, 0x0324, 0x036d, 0x03b6, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x02dc, 0x0325, 0x036e, 0x03b7, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x02dd, 0x0326, 0x036f, 0x03b9, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x02de, 0x0327, 0x0371, 0x03ba, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x02df, 0x0328, 0x0372, 0x03bb, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x02e0, 0x0329, 0x0373, 0x03bd, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x02e1, 0x032a, 0x0374, 0x03be, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x02e2, 0x032b, 0x0375, 0x03bf, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x02e3, 0x032d, 0x0377, 0x03c1, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x02e4, 0x032e, 0x0378, 0x03c2, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x02e5, 0x032f, 0x0379, 0x03c3, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x02e6, 0x0330, 0x037a, 0x03c4, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x02e7, 0x0331, 0x037b, 0x03c6, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x02e8, 0x0332, 0x037d, 0x03c7, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x02e9, 0x0333, 0x037e, 0x03c8, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x02ea, 0x0334, 0x037f, 0x03ca, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x02eb, 0x0335, 0x0380, 0x03cb, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x02ec, 0x0336, 0x0381, 0x03cc, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x02ed, 0x0338, 0x0383, 0x03ce, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x02ee, 0x0339, 0x0384, 0x03cf, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x02ef, 0x033a, 0x0385, 0x03d0, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x02f0, 0x033b, 0x0386, 0x03d1, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x02f1, 0x033c, 0x0387, 0x03d3, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x02f2, 0x033d, 0x0389, 0x03d4, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x02f3, 0x033e, 0x038a, 0x03d5, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x02f4, 0x033f, 0x038b, 0x03d7, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x02f5, 0x0340, 0x038c, 0x03d8, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x02f6, 0x0341, 0x038d, 0x03d9, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x02f7, 0x0343, 0x038f, 0x03db, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x02f8, 0x0344, 0x0390, 0x03dc, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x02f9, 0x0345, 0x0391, 0x03dd, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x02fa, 0x0346, 0x0392, 0x03de, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x02fb, 0x0347, 0x0393, 0x03e0, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x02fc, 0x0348, 0x0395, 0x03e1, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x02fd, 0x0349, 0x0396, 0x03e2, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x02fe, 0x034a, 0x0397, 0x03e4, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x02ff, 0x034b, 0x0398, 0x03e5, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0300, 0x034c, 0x0399, 0x03e6, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0301, 0x034e, 0x039b, 0x03e8, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0302, 0x034f, 0x039c, 0x03e9, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0303, 0x0350, 0x039d, 0x03ea, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0304, 0x0351, 0x039e, 0x03eb, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0305, 0x0352, 0x039f, 0x03ed, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0306, 0x0353, 0x03a1, 0x03ee, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0307, 0x0354, 0x03a2, 0x03ef, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0308, 0x0355, 0x03a3, 0x03f1, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0309, 0x0356, 0x03a4, 0x03f2, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x030a, 0x0357, 0x03a5, 0x03f3, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x030b, 0x0359, 0x03a7, 0x03f5, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x030c, 0x035a, 0x03a8, 0x03f6, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x030d, 0x035b, 0x03a9, 0x03f7, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x030e, 0x035c, 0x03aa, 0x03f8, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x030f, 0x035d, 0x03ab, 0x03fa, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0310, 0x035e, 0x03ad, 0x03fb, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0311, 0x035f, 0x03ae, 0x03fc, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0312, 0x0360, 0x03af, 0x03fe, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0313, 0x0361, 0x03b0, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0314, 0x0362, 0x03b1, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0315, 0x0364, 0x03b3, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0316, 0x0365, 0x03b4, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0317, 0x0366, 0x03b5, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0318, 0x0367, 0x03b6, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0319, 0x0368, 0x03b7, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x031a, 0x0369, 0x03b9, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x031b, 0x036a, 0x03ba, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x031c, 0x036b, 0x03bb, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x031d, 0x036c, 0x03bc, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x031e, 0x036d, 0x03bd, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x031f, 0x036f, 0x03bf, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0320, 0x0370, 0x03c0, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0321, 0x0371, 0x03c1, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0322, 0x0372, 0x03c2, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0323, 0x0373, 0x03c3, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0324, 0x0374, 0x03c5, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0325, 0x0375, 0x03c6, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0326, 0x0376, 0x03c7, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0327, 0x0377, 0x03c8, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0328, 0x0378, 0x03c9, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0329, 0x037a, 0x03cb, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x032a, 0x037b, 0x03cc, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x032b, 0x037c, 0x03cd, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x032c, 0x037d, 0x03ce, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x032d, 0x037e, 0x03cf, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x032e, 0x037f, 0x03d1, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x032f, 0x0380, 0x03d2, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0330, 0x0381, 0x03d3, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0331, 0x0382, 0x03d4, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0332, 0x0383, 0x03d5, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0333, 0x0385, 0x03d7, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0334, 0x0386, 0x03d8, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0335, 0x0387, 0x03d9, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0336, 0x0388, 0x03da, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0337, 0x0389, 0x03db, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0338, 0x038a, 0x03dd, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0339, 0x038b, 0x03de, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x033a, 0x038c, 0x03df, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x033b, 0x038d, 0x03e0, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x033c, 0x038e, 0x03e1, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x033d, 0x0390, 0x03e3, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x033e, 0x0391, 0x03e4, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x033f, 0x0392, 0x03e5, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0340, 0x0393, 0x03e6, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0341, 0x0394, 0x03e7, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0342, 0x0395, 0x03e9, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0343, 0x0396, 0x03ea, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0344, 0x0397, 0x03eb, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0345, 0x0398, 0x03ec, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0346, 0x0399, 0x03ed, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0347, 0x039b, 0x03ef, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0348, 0x039c, 0x03f0, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0349, 0x039d, 0x03f1, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x034a, 0x039e, 0x03f2, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x034b, 0x039f, 0x03f3, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x034c, 0x03a0, 0x03f5, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x034d, 0x03a1, 0x03f6, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x034e, 0x03a2, 0x03f7, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x034f, 0x03a3, 0x03f8, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0350, 0x03a4, 0x03f9, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0351, 0x03a6, 0x03fb, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0352, 0x03a7, 0x03fc, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0353, 0x03a8, 0x03fd, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0354, 0x03a9, 0x03fe, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0355, 0x03aa, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0356, 0x03ab, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0357, 0x03ac, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0358, 0x03ad, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0359, 0x03ae, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x035a, 0x03af, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x035b, 0x03b1, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x035c, 0x03b2, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x035d, 0x03b3, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x035e, 0x03b4, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x035f, 0x03b5, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0360, 0x03b6, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0361, 0x03b7, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0362, 0x03b8, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0363, 0x03b9, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0364, 0x03ba, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0365, 0x03bc, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0366, 0x03bd, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0367, 0x03be, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0368, 0x03bf, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0369, 0x03c0, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x036a, 0x03c1, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x036b, 0x03c2, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x036c, 0x03c3, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x036d, 0x03c4, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x036e, 0x03c5, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x036f, 0x03c7, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0370, 0x03c8, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0371, 0x03c9, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0372, 0x03ca, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0373, 0x03cb, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0374, 0x03cc, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0375, 0x03cd, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0376, 0x03ce, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0377, 0x03cf, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0378, 0x03d0, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0379, 0x03d2, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x037a, 0x03d3, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x037b, 0x03d4, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x037c, 0x03d5, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x037d, 0x03d6, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x037e, 0x03d7, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x037f, 0x03d8, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0380, 0x03d9, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0381, 0x03da, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0382, 0x03db, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0383, 0x03dd, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0384, 0x03de, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0385, 0x03df, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0386, 0x03e0, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0387, 0x03e1, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0388, 0x03e2, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0389, 0x03e3, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x038a, 0x03e4, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x038b, 0x03e5, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x038c, 0x03e6, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x038d, 0x03e8, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x038e, 0x03e9, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x038f, 0x03ea, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0390, 0x03eb, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0391, 0x03ec, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0392, 0x03ed, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0393, 0x03ee, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0394, 0x03ef, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0395, 0x03f0, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0396, 0x03f1, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0397, 0x03f3, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0398, 0x03f4, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0399, 0x03f5, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x039a, 0x03f6, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x039b, 0x03f7, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x039c, 0x03f8, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x039d, 0x03f9, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x039e, 0x03fa, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x039f, 0x03fb, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03a0, 0x03fc, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03a1, 0x03fe, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03a2, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03a3, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03a4, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03a5, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03a6, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03a7, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03a8, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03a9, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03aa, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03ab, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03ac, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03ad, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03ae, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03af, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03b0, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03b1, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03b2, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03b3, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03b4, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03b5, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03b6, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03b7, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03b8, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03b9, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03ba, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03bb, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03bc, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03bd, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03be, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03bf, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03c0, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03c1, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03c2, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03c3, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03c4, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03c5, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03c6, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03c7, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03c8, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03c9, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03ca, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03cb, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03cc, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03cd, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03ce, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03cf, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03d0, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03d1, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03d2, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03d3, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03d4, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03d5, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03d6, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03d7, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03d8, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03d9, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03da, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03db, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03dc, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03dd, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03de, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03df, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03e0, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03e1, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03e2, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03e3, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03e4, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03e5, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03e6, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03e7, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03e8, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03e9, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03ea, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03eb, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03ec, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03ed, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03ee, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03ef, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03f0, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03f1, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03f2, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03f3, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03f4, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03f5, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03f6, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03f7, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03f8, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03f9, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03fa, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03fb, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03fc, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03fd, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03fe, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff}
};
#pragma empty_line
static const uint16_t hfETLUT[0x400][8] = {
{000000, 000000, 000000, 000000, 000000, 000000, 000000, 000000},
{0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0002, 0x0002, 0x0002},
{0x0002, 0x0002, 0x0002, 0x0002, 0x0003, 0x0003, 0x0003, 0x0004},
{0x0003, 0x0003, 0x0003, 0x0004, 0x0004, 0x0005, 0x0005, 0x0005},
{0x0004, 0x0004, 0x0005, 0x0005, 0x0006, 0x0006, 0x0007, 0x0007},
{0x0005, 0x0005, 0x0006, 0x0006, 0x0007, 0x0008, 0x0008, 0x0009},
{0x0006, 0x0006, 0x0007, 0x0008, 0x0008, 0x0009, 0x000a, 0x000a},
{0x0007, 0x0007, 0x0008, 0x0009, 0x000a, 0x000b, 0x000b, 0x000c},
{0x0008, 0x0008, 0x0009, 0x000a, 0x000b, 0x000c, 0x000d, 0x000e},
{0x0009, 0x000a, 0x000a, 0x000c, 0x000d, 0x000e, 0x000f, 0x0010},
{0x000a, 0x000b, 0x000c, 0x000d, 0x000e, 0x000f, 0x0010, 0x0011},
{0x000b, 0x000c, 0x000d, 0x000e, 0x000f, 0x0011, 0x0012, 0x0013},
{0x000c, 0x000d, 0x000e, 0x000f, 0x0011, 0x0012, 0x0013, 0x0015},
{0x000d, 0x000e, 0x000f, 0x0011, 0x0012, 0x0014, 0x0015, 0x0016},
{0x000e, 0x000f, 0x0011, 0x0012, 0x0013, 0x0015, 0x0017, 0x0018},
{0x000f, 0x0010, 0x0012, 0x0013, 0x0015, 0x0017, 0x0018, 0x001a},
{0x0010, 0x0011, 0x0013, 0x0015, 0x0016, 0x0018, 0x001a, 0x001b},
{0x0011, 0x0012, 0x0014, 0x0016, 0x0018, 0x001a, 0x001b, 0x001d},
{0x0012, 0x0013, 0x0015, 0x0017, 0x0019, 0x001b, 0x001d, 0x001f},
{0x0013, 0x0015, 0x0017, 0x0019, 0x001a, 0x001d, 0x001f, 0x0021},
{0x0014, 0x0016, 0x0018, 0x001a, 0x001c, 0x001e, 0x0020, 0x0022},
{0x0015, 0x0017, 0x0019, 0x001b, 0x001d, 0x0020, 0x0022, 0x0024},
{0x0016, 0x0018, 0x001a, 0x001c, 0x001f, 0x0021, 0x0023, 0x0026},
{0x0017, 0x0019, 0x001b, 0x001e, 0x0020, 0x0023, 0x0025, 0x0027},
{0x0018, 0x001a, 0x001c, 0x001f, 0x0021, 0x0024, 0x0027, 0x0029},
{0x0019, 0x001b, 0x001e, 0x0020, 0x0023, 0x0026, 0x0028, 0x002b},
{0x001a, 0x001c, 0x001f, 0x0022, 0x0024, 0x0027, 0x002a, 0x002c},
{0x001b, 0x001d, 0x0020, 0x0023, 0x0026, 0x0029, 0x002b, 0x002e},
{0x001c, 0x001e, 0x0021, 0x0024, 0x0027, 0x002a, 0x002d, 0x0030},
{0x001d, 0x0020, 0x0023, 0x0026, 0x0028, 0x002c, 0x002f, 0x0032},
{0x001e, 0x0021, 0x0024, 0x0027, 0x002a, 0x002d, 0x0030, 0x0033},
{0x001f, 0x0022, 0x0025, 0x0028, 0x002b, 0x002f, 0x0032, 0x0035},
{0x0020, 0x0023, 0x0026, 0x0029, 0x002d, 0x0030, 0x0033, 0x0037},
{0x0021, 0x0024, 0x0027, 0x002b, 0x002e, 0x0032, 0x0035, 0x0038},
{0x0022, 0x0025, 0x0029, 0x002c, 0x002f, 0x0033, 0x0037, 0x003a},
{0x0023, 0x0026, 0x002a, 0x002d, 0x0031, 0x0035, 0x0038, 0x003c},
{0x0024, 0x0027, 0x002b, 0x002f, 0x0032, 0x0036, 0x003a, 0x003d},
{0x0025, 0x0028, 0x002c, 0x0030, 0x0034, 0x0038, 0x003b, 0x003f},
{0x0026, 0x0029, 0x002d, 0x0031, 0x0035, 0x0039, 0x003d, 0x0041},
{0x0027, 0x002b, 0x002f, 0x0033, 0x0036, 0x003b, 0x003f, 0x0043},
{0x0028, 0x002c, 0x0030, 0x0034, 0x0038, 0x003c, 0x0040, 0x0044},
{0x0029, 0x002d, 0x0031, 0x0035, 0x0039, 0x003e, 0x0042, 0x0046},
{0x002a, 0x002e, 0x0032, 0x0036, 0x003b, 0x003f, 0x0043, 0x0048},
{0x002b, 0x002f, 0x0033, 0x0038, 0x003c, 0x0041, 0x0045, 0x0049},
{0x002c, 0x0030, 0x0035, 0x0039, 0x003d, 0x0042, 0x0047, 0x004b},
{0x002d, 0x0031, 0x0036, 0x003a, 0x003f, 0x0044, 0x0048, 0x004d},
{0x002e, 0x0032, 0x0037, 0x003c, 0x0040, 0x0045, 0x004a, 0x004e},
{0x002f, 0x0033, 0x0038, 0x003d, 0x0042, 0x0047, 0x004b, 0x0050},
{0x0030, 0x0034, 0x0039, 0x003e, 0x0043, 0x0048, 0x004d, 0x0052},
{0x0031, 0x0036, 0x003b, 0x0040, 0x0045, 0x004a, 0x004f, 0x0054},
{0x0032, 0x0037, 0x003c, 0x0041, 0x0046, 0x004b, 0x0050, 0x0055},
{0x0033, 0x0038, 0x003d, 0x0042, 0x0047, 0x004d, 0x0052, 0x0057},
{0x0034, 0x0039, 0x003e, 0x0043, 0x0049, 0x004e, 0x0053, 0x0059},
{0x0035, 0x003a, 0x003f, 0x0045, 0x004a, 0x0050, 0x0055, 0x005a},
{0x0036, 0x003b, 0x0041, 0x0046, 0x004c, 0x0051, 0x0057, 0x005c},
{0x0037, 0x003c, 0x0042, 0x0047, 0x004d, 0x0053, 0x0058, 0x005e},
{0x0038, 0x003d, 0x0043, 0x0049, 0x004e, 0x0054, 0x005a, 0x005f},
{0x0039, 0x003e, 0x0044, 0x004a, 0x0050, 0x0056, 0x005b, 0x0061},
{0x003a, 0x003f, 0x0045, 0x004b, 0x0051, 0x0057, 0x005d, 0x0063},
{0x003b, 0x0041, 0x0047, 0x004d, 0x0053, 0x0059, 0x005f, 0x0065},
{0x003c, 0x0042, 0x0048, 0x004e, 0x0054, 0x005a, 0x0060, 0x0066},
{0x003d, 0x0043, 0x0049, 0x004f, 0x0055, 0x005c, 0x0062, 0x0068},
{0x003e, 0x0044, 0x004a, 0x0050, 0x0057, 0x005d, 0x0063, 0x006a},
{0x003f, 0x0045, 0x004b, 0x0052, 0x0058, 0x005f, 0x0065, 0x006b},
{0x0040, 0x0046, 0x004d, 0x0053, 0x005a, 0x0060, 0x0067, 0x006d},
{0x0041, 0x0047, 0x004e, 0x0054, 0x005b, 0x0062, 0x0068, 0x006f},
{0x0042, 0x0048, 0x004f, 0x0056, 0x005c, 0x0063, 0x006a, 0x0070},
{0x0043, 0x0049, 0x0050, 0x0057, 0x005e, 0x0065, 0x006b, 0x0072},
{0x0044, 0x004a, 0x0051, 0x0058, 0x005f, 0x0066, 0x006d, 0x0074},
{0x0045, 0x004c, 0x0053, 0x005a, 0x0061, 0x0068, 0x006f, 0x0076},
{0x0046, 0x004d, 0x0054, 0x005b, 0x0062, 0x0069, 0x0070, 0x0077},
{0x0047, 0x004e, 0x0055, 0x005c, 0x0063, 0x006b, 0x0072, 0x0079},
{0x0048, 0x004f, 0x0056, 0x005d, 0x0065, 0x006c, 0x0073, 0x007b},
{0x0049, 0x0050, 0x0057, 0x005f, 0x0066, 0x006e, 0x0075, 0x007c},
{0x004a, 0x0051, 0x0059, 0x0060, 0x0068, 0x006f, 0x0077, 0x007e},
{0x004b, 0x0052, 0x005a, 0x0061, 0x0069, 0x0071, 0x0078, 0x0080},
{0x004c, 0x0053, 0x005b, 0x0063, 0x006a, 0x0072, 0x007a, 0x0081},
{0x004d, 0x0054, 0x005c, 0x0064, 0x006c, 0x0074, 0x007b, 0x0083},
{0x004e, 0x0055, 0x005d, 0x0065, 0x006d, 0x0075, 0x007d, 0x0085},
{0x004f, 0x0057, 0x005f, 0x0067, 0x006f, 0x0077, 0x007f, 0x0087},
{0x0050, 0x0058, 0x0060, 0x0068, 0x0070, 0x0078, 0x0080, 0x0088},
{0x0051, 0x0059, 0x0061, 0x0069, 0x0071, 0x007a, 0x0082, 0x008a},
{0x0052, 0x005a, 0x0062, 0x006a, 0x0073, 0x007b, 0x0083, 0x008c},
{0x0053, 0x005b, 0x0063, 0x006c, 0x0074, 0x007d, 0x0085, 0x008d},
{0x0054, 0x005c, 0x0065, 0x006d, 0x0076, 0x007e, 0x0087, 0x008f},
{0x0055, 0x005d, 0x0066, 0x006e, 0x0077, 0x0080, 0x0088, 0x0091},
{0x0056, 0x005e, 0x0067, 0x0070, 0x0078, 0x0081, 0x008a, 0x0092},
{0x0057, 0x005f, 0x0068, 0x0071, 0x007a, 0x0083, 0x008b, 0x0094},
{0x0058, 0x0060, 0x0069, 0x0072, 0x007b, 0x0084, 0x008d, 0x0096},
{0x0059, 0x0062, 0x006b, 0x0074, 0x007d, 0x0086, 0x008f, 0x0098},
{0x005a, 0x0063, 0x006c, 0x0075, 0x007e, 0x0087, 0x0090, 0x0099},
{0x005b, 0x0064, 0x006d, 0x0076, 0x007f, 0x0089, 0x0092, 0x009b},
{0x005c, 0x0065, 0x006e, 0x0077, 0x0081, 0x008a, 0x0093, 0x009d},
{0x005d, 0x0066, 0x006f, 0x0079, 0x0082, 0x008c, 0x0095, 0x009e},
{0x005e, 0x0067, 0x0071, 0x007a, 0x0084, 0x008d, 0x0097, 0x00a0},
{0x005f, 0x0068, 0x0072, 0x007b, 0x0085, 0x008f, 0x0098, 0x00a2},
{0x0060, 0x0069, 0x0073, 0x007d, 0x0086, 0x0090, 0x009a, 0x00a3},
{0x0061, 0x006a, 0x0074, 0x007e, 0x0088, 0x0092, 0x009b, 0x00a5},
{0x0062, 0x006b, 0x0075, 0x007f, 0x0089, 0x0093, 0x009d, 0x00a7},
{0x0063, 0x006d, 0x0077, 0x0081, 0x008b, 0x0095, 0x009f, 0x00a9},
{0x0064, 0x006e, 0x0078, 0x0082, 0x008c, 0x0096, 0x00a0, 0x00aa},
{0x0065, 0x006f, 0x0079, 0x0083, 0x008d, 0x0098, 0x00a2, 0x00ac},
{0x0066, 0x0070, 0x007a, 0x0084, 0x008f, 0x0099, 0x00a3, 0x00ae},
{0x0067, 0x0071, 0x007b, 0x0086, 0x0090, 0x009b, 0x00a5, 0x00af},
{0x0068, 0x0072, 0x007d, 0x0087, 0x0092, 0x009c, 0x00a7, 0x00b1},
{0x0069, 0x0073, 0x007e, 0x0088, 0x0093, 0x009e, 0x00a8, 0x00b3},
{0x006a, 0x0074, 0x007f, 0x008a, 0x0094, 0x009f, 0x00aa, 0x00b4},
{0x006b, 0x0075, 0x0080, 0x008b, 0x0096, 0x00a1, 0x00ab, 0x00b6},
{0x006c, 0x0076, 0x0081, 0x008c, 0x0097, 0x00a2, 0x00ad, 0x00b8},
{0x006d, 0x0078, 0x0082, 0x008e, 0x0099, 0x00a4, 0x00af, 0x00ba},
{0x006e, 0x0079, 0x0084, 0x008f, 0x009a, 0x00a5, 0x00b0, 0x00bb},
{0x006f, 0x007a, 0x0085, 0x0090, 0x009b, 0x00a7, 0x00b2, 0x00bd},
{0x0070, 0x007b, 0x0086, 0x0091, 0x009d, 0x00a8, 0x00b3, 0x00bf},
{0x0071, 0x007c, 0x0087, 0x0093, 0x009e, 0x00aa, 0x00b5, 0x00c0},
{0x0072, 0x007d, 0x0088, 0x0094, 0x00a0, 0x00ab, 0x00b7, 0x00c2},
{0x0073, 0x007e, 0x008a, 0x0095, 0x00a1, 0x00ad, 0x00b8, 0x00c4},
{0x0074, 0x007f, 0x008b, 0x0097, 0x00a2, 0x00ae, 0x00ba, 0x00c5},
{0x0075, 0x0080, 0x008c, 0x0098, 0x00a4, 0x00b0, 0x00bb, 0x00c7},
{0x0076, 0x0081, 0x008d, 0x0099, 0x00a5, 0x00b1, 0x00bd, 0x00c9},
{0x0077, 0x0083, 0x008e, 0x009b, 0x00a7, 0x00b3, 0x00bf, 0x00cb},
{0x0078, 0x0084, 0x0090, 0x009c, 0x00a8, 0x00b4, 0x00c0, 0x00cc},
{0x0079, 0x0085, 0x0091, 0x009d, 0x00a9, 0x00b6, 0x00c2, 0x00ce},
{0x007a, 0x0086, 0x0092, 0x009e, 0x00ab, 0x00b7, 0x00c3, 0x00d0},
{0x007b, 0x0087, 0x0093, 0x00a0, 0x00ac, 0x00b9, 0x00c5, 0x00d1},
{0x007c, 0x0088, 0x0094, 0x00a1, 0x00ae, 0x00ba, 0x00c7, 0x00d3},
{0x007d, 0x0089, 0x0096, 0x00a2, 0x00af, 0x00bc, 0x00c8, 0x00d5},
{0x007e, 0x008a, 0x0097, 0x00a4, 0x00b0, 0x00bd, 0x00ca, 0x00d6},
{0x007f, 0x008b, 0x0098, 0x00a5, 0x00b2, 0x00bf, 0x00cb, 0x00d8},
{0x0080, 0x008c, 0x0099, 0x00a6, 0x00b3, 0x00c0, 0x00cd, 0x00da},
{0x0081, 0x008e, 0x009a, 0x00a8, 0x00b5, 0x00c2, 0x00cf, 0x00dc},
{0x0082, 0x008f, 0x009c, 0x00a9, 0x00b6, 0x00c3, 0x00d0, 0x00dd},
{0x0083, 0x0090, 0x009d, 0x00aa, 0x00b7, 0x00c5, 0x00d2, 0x00df},
{0x0084, 0x0091, 0x009e, 0x00ab, 0x00b9, 0x00c6, 0x00d3, 0x00e1},
{0x0085, 0x0092, 0x009f, 0x00ad, 0x00ba, 0x00c8, 0x00d5, 0x00e2},
{0x0086, 0x0093, 0x00a0, 0x00ae, 0x00bc, 0x00c9, 0x00d7, 0x00e4},
{0x0087, 0x0094, 0x00a2, 0x00af, 0x00bd, 0x00cb, 0x00d8, 0x00e6},
{0x0088, 0x0095, 0x00a3, 0x00b1, 0x00be, 0x00cc, 0x00da, 0x00e7},
{0x0089, 0x0096, 0x00a4, 0x00b2, 0x00c0, 0x00ce, 0x00db, 0x00e9},
{0x008a, 0x0097, 0x00a5, 0x00b3, 0x00c1, 0x00cf, 0x00dd, 0x00eb},
{0x008b, 0x0099, 0x00a6, 0x00b5, 0x00c3, 0x00d1, 0x00df, 0x00ed},
{0x008c, 0x009a, 0x00a8, 0x00b6, 0x00c4, 0x00d2, 0x00e0, 0x00ee},
{0x008d, 0x009b, 0x00a9, 0x00b7, 0x00c5, 0x00d4, 0x00e2, 0x00f0},
{0x008e, 0x009c, 0x00aa, 0x00b8, 0x00c7, 0x00d5, 0x00e3, 0x00f2},
{0x008f, 0x009d, 0x00ab, 0x00ba, 0x00c8, 0x00d7, 0x00e5, 0x00f3},
{0x0090, 0x009e, 0x00ac, 0x00bb, 0x00ca, 0x00d8, 0x00e7, 0x00f5},
{0x0091, 0x009f, 0x00ae, 0x00bc, 0x00cb, 0x00da, 0x00e8, 0x00f7},
{0x0092, 0x00a0, 0x00af, 0x00be, 0x00cc, 0x00db, 0x00ea, 0x00f8},
{0x0093, 0x00a1, 0x00b0, 0x00bf, 0x00ce, 0x00dd, 0x00eb, 0x00fa},
{0x0094, 0x00a2, 0x00b1, 0x00c0, 0x00cf, 0x00de, 0x00ed, 0x00fc},
{0x0095, 0x00a4, 0x00b2, 0x00c2, 0x00d1, 0x00e0, 0x00ef, 0x00fe},
{0x0096, 0x00a5, 0x00b4, 0x00c3, 0x00d2, 0x00e1, 0x00f0, 0x00ff},
{0x0097, 0x00a6, 0x00b5, 0x00c4, 0x00d3, 0x00e3, 0x00f2, 0x0101},
{0x0098, 0x00a7, 0x00b6, 0x00c5, 0x00d5, 0x00e4, 0x00f3, 0x0103},
{0x0099, 0x00a8, 0x00b7, 0x00c7, 0x00d6, 0x00e6, 0x00f5, 0x0104},
{0x009a, 0x00a9, 0x00b8, 0x00c8, 0x00d8, 0x00e7, 0x00f7, 0x0106},
{0x009b, 0x00aa, 0x00ba, 0x00c9, 0x00d9, 0x00e9, 0x00f8, 0x0108},
{0x009c, 0x00ab, 0x00bb, 0x00cb, 0x00da, 0x00ea, 0x00fa, 0x0109},
{0x009d, 0x00ac, 0x00bc, 0x00cc, 0x00dc, 0x00ec, 0x00fb, 0x010b},
{0x009e, 0x00ad, 0x00bd, 0x00cd, 0x00dd, 0x00ed, 0x00fd, 0x010d},
{0x009f, 0x00af, 0x00be, 0x00cf, 0x00df, 0x00ef, 0x00ff, 0x010f},
{0x00a0, 0x00b0, 0x00c0, 0x00d0, 0x00e0, 0x00f0, 0x0100, 0x0110},
{0x00a1, 0x00b1, 0x00c1, 0x00d1, 0x00e1, 0x00f2, 0x0102, 0x0112},
{0x00a2, 0x00b2, 0x00c2, 0x00d2, 0x00e3, 0x00f3, 0x0103, 0x0114},
{0x00a3, 0x00b3, 0x00c3, 0x00d4, 0x00e4, 0x00f5, 0x0105, 0x0115},
{0x00a4, 0x00b4, 0x00c4, 0x00d5, 0x00e6, 0x00f6, 0x0107, 0x0117},
{0x00a5, 0x00b5, 0x00c6, 0x00d6, 0x00e7, 0x00f8, 0x0108, 0x0119},
{0x00a6, 0x00b6, 0x00c7, 0x00d8, 0x00e8, 0x00f9, 0x010a, 0x011a},
{0x00a7, 0x00b7, 0x00c8, 0x00d9, 0x00ea, 0x00fb, 0x010b, 0x011c},
{0x00a8, 0x00b8, 0x00c9, 0x00da, 0x00eb, 0x00fc, 0x010d, 0x011e},
{0x00a9, 0x00ba, 0x00ca, 0x00dc, 0x00ed, 0x00fe, 0x010f, 0x0120},
{0x00aa, 0x00bb, 0x00cc, 0x00dd, 0x00ee, 0x00ff, 0x0110, 0x0121},
{0x00ab, 0x00bc, 0x00cd, 0x00de, 0x00ef, 0x0101, 0x0112, 0x0123},
{0x00ac, 0x00bd, 0x00ce, 0x00df, 0x00f1, 0x0102, 0x0113, 0x0125},
{0x00ad, 0x00be, 0x00cf, 0x00e1, 0x00f2, 0x0104, 0x0115, 0x0126},
{0x00ae, 0x00bf, 0x00d0, 0x00e2, 0x00f4, 0x0105, 0x0117, 0x0128},
{0x00af, 0x00c0, 0x00d2, 0x00e3, 0x00f5, 0x0107, 0x0118, 0x012a},
{0x00b0, 0x00c1, 0x00d3, 0x00e5, 0x00f6, 0x0108, 0x011a, 0x012b},
{0x00b1, 0x00c2, 0x00d4, 0x00e6, 0x00f8, 0x010a, 0x011b, 0x012d},
{0x00b2, 0x00c3, 0x00d5, 0x00e7, 0x00f9, 0x010b, 0x011d, 0x012f},
{0x00b3, 0x00c5, 0x00d6, 0x00e9, 0x00fb, 0x010d, 0x011f, 0x0131},
{0x00b4, 0x00c6, 0x00d8, 0x00ea, 0x00fc, 0x010e, 0x0120, 0x0132},
{0x00b5, 0x00c7, 0x00d9, 0x00eb, 0x00fd, 0x0110, 0x0122, 0x0134},
{0x00b6, 0x00c8, 0x00da, 0x00ec, 0x00ff, 0x0111, 0x0123, 0x0136},
{0x00b7, 0x00c9, 0x00db, 0x00ee, 0x0100, 0x0113, 0x0125, 0x0137},
{0x00b8, 0x00ca, 0x00dc, 0x00ef, 0x0101, 0x0114, 0x0127, 0x0139},
{0x00b9, 0x00cb, 0x00de, 0x00f0, 0x0103, 0x0116, 0x0128, 0x013b},
{0x00ba, 0x00cc, 0x00df, 0x00f2, 0x0104, 0x0117, 0x012a, 0x013c},
{0x00bb, 0x00cd, 0x00e0, 0x00f3, 0x0106, 0x0119, 0x012b, 0x013e},
{0x00bc, 0x00ce, 0x00e1, 0x00f4, 0x0107, 0x011a, 0x012d, 0x0140},
{0x00bd, 0x00d0, 0x00e2, 0x00f6, 0x0108, 0x011c, 0x012f, 0x0142},
{0x00be, 0x00d1, 0x00e4, 0x00f7, 0x010a, 0x011d, 0x0130, 0x0143},
{0x00bf, 0x00d2, 0x00e5, 0x00f8, 0x010b, 0x011f, 0x0132, 0x0145},
{0x00c0, 0x00d3, 0x00e6, 0x00f9, 0x010d, 0x0120, 0x0133, 0x0147},
{0x00c1, 0x00d4, 0x00e7, 0x00fb, 0x010e, 0x0122, 0x0135, 0x0148},
{0x00c2, 0x00d5, 0x00e8, 0x00fc, 0x010f, 0x0123, 0x0137, 0x014a},
{0x00c3, 0x00d6, 0x00ea, 0x00fd, 0x0111, 0x0125, 0x0138, 0x014c},
{0x00c4, 0x00d7, 0x00eb, 0x00ff, 0x0112, 0x0126, 0x013a, 0x014d},
{0x00c5, 0x00d8, 0x00ec, 0x0100, 0x0114, 0x0128, 0x013b, 0x014f},
{0x00c6, 0x00d9, 0x00ed, 0x0101, 0x0115, 0x0129, 0x013d, 0x0151},
{0x00c7, 0x00db, 0x00ee, 0x0103, 0x0116, 0x012b, 0x013f, 0x0153},
{0x00c8, 0x00dc, 0x00f0, 0x0104, 0x0118, 0x012c, 0x0140, 0x0154},
{0x00c9, 0x00dd, 0x00f1, 0x0105, 0x0119, 0x012e, 0x0142, 0x0156},
{0x00ca, 0x00de, 0x00f2, 0x0106, 0x011b, 0x012f, 0x0143, 0x0158},
{0x00cb, 0x00df, 0x00f3, 0x0108, 0x011c, 0x0131, 0x0145, 0x0159},
{0x00cc, 0x00e0, 0x00f4, 0x0109, 0x011d, 0x0132, 0x0147, 0x015b},
{0x00cd, 0x00e1, 0x00f6, 0x010a, 0x011f, 0x0134, 0x0148, 0x015d},
{0x00ce, 0x00e2, 0x00f7, 0x010c, 0x0120, 0x0135, 0x014a, 0x015e},
{0x00cf, 0x00e3, 0x00f8, 0x010d, 0x0122, 0x0137, 0x014b, 0x0160},
{0x00d0, 0x00e4, 0x00f9, 0x010e, 0x0123, 0x0138, 0x014d, 0x0162},
{0x00d1, 0x00e6, 0x00fa, 0x0110, 0x0124, 0x013a, 0x014f, 0x0164},
{0x00d2, 0x00e7, 0x00fc, 0x0111, 0x0126, 0x013b, 0x0150, 0x0165},
{0x00d3, 0x00e8, 0x00fd, 0x0112, 0x0127, 0x013d, 0x0152, 0x0167},
{0x00d4, 0x00e9, 0x00fe, 0x0113, 0x0129, 0x013e, 0x0153, 0x0169},
{0x00d5, 0x00ea, 0x00ff, 0x0115, 0x012a, 0x0140, 0x0155, 0x016a},
{0x00d6, 0x00eb, 0x0101, 0x0116, 0x012b, 0x0141, 0x0157, 0x016c},
{0x00d7, 0x00ec, 0x0102, 0x0117, 0x012d, 0x0143, 0x0158, 0x016e},
{0x00d8, 0x00ed, 0x0103, 0x0119, 0x012e, 0x0144, 0x015a, 0x016f},
{0x00d9, 0x00ee, 0x0104, 0x011a, 0x0130, 0x0146, 0x015b, 0x0171},
{0x00da, 0x00ef, 0x0105, 0x011b, 0x0131, 0x0147, 0x015d, 0x0173},
{0x00db, 0x00f1, 0x0107, 0x011d, 0x0132, 0x0149, 0x015f, 0x0175},
{0x00dc, 0x00f2, 0x0108, 0x011e, 0x0134, 0x014a, 0x0160, 0x0176},
{0x00dd, 0x00f3, 0x0109, 0x011f, 0x0135, 0x014c, 0x0162, 0x0178},
{0x00de, 0x00f4, 0x010a, 0x0120, 0x0137, 0x014d, 0x0163, 0x017a},
{0x00df, 0x00f5, 0x010b, 0x0122, 0x0138, 0x014f, 0x0165, 0x017b},
{0x00e0, 0x00f6, 0x010d, 0x0123, 0x0139, 0x0150, 0x0167, 0x017d},
{0x00e1, 0x00f7, 0x010e, 0x0124, 0x013b, 0x0152, 0x0168, 0x017f},
{0x00e2, 0x00f8, 0x010f, 0x0126, 0x013c, 0x0153, 0x016a, 0x0180},
{0x00e3, 0x00f9, 0x0110, 0x0127, 0x013e, 0x0155, 0x016b, 0x0182},
{0x00e4, 0x00fa, 0x0111, 0x0128, 0x013f, 0x0156, 0x016d, 0x0184},
{0x00e5, 0x00fc, 0x0113, 0x012a, 0x0140, 0x0158, 0x016f, 0x0186},
{0x00e6, 0x00fd, 0x0114, 0x012b, 0x0142, 0x0159, 0x0170, 0x0187},
{0x00e7, 0x00fe, 0x0115, 0x012c, 0x0143, 0x015b, 0x0172, 0x0189},
{0x00e8, 0x00ff, 0x0116, 0x012d, 0x0145, 0x015c, 0x0173, 0x018b},
{0x00e9, 0x0100, 0x0117, 0x012f, 0x0146, 0x015e, 0x0175, 0x018c},
{0x00ea, 0x0101, 0x0119, 0x0130, 0x0147, 0x015f, 0x0177, 0x018e},
{0x00eb, 0x0102, 0x011a, 0x0131, 0x0149, 0x0161, 0x0178, 0x0190},
{0x00ec, 0x0103, 0x011b, 0x0133, 0x014a, 0x0162, 0x017a, 0x0191},
{0x00ed, 0x0104, 0x011c, 0x0134, 0x014c, 0x0164, 0x017b, 0x0193},
{0x00ee, 0x0105, 0x011d, 0x0135, 0x014d, 0x0165, 0x017d, 0x0195},
{0x00ef, 0x0107, 0x011f, 0x0137, 0x014e, 0x0167, 0x017f, 0x0197},
{0x00f0, 0x0108, 0x0120, 0x0138, 0x0150, 0x0168, 0x0180, 0x0198},
{0x00f1, 0x0109, 0x0121, 0x0139, 0x0151, 0x016a, 0x0182, 0x019a},
{0x00f2, 0x010a, 0x0122, 0x013a, 0x0153, 0x016b, 0x0183, 0x019c},
{0x00f3, 0x010b, 0x0123, 0x013c, 0x0154, 0x016d, 0x0185, 0x019d},
{0x00f4, 0x010c, 0x0125, 0x013d, 0x0155, 0x016e, 0x0187, 0x019f},
{0x00f5, 0x010d, 0x0126, 0x013e, 0x0157, 0x0170, 0x0188, 0x01a1},
{0x00f6, 0x010e, 0x0127, 0x0140, 0x0158, 0x0171, 0x018a, 0x01a2},
{0x00f7, 0x010f, 0x0128, 0x0141, 0x015a, 0x0173, 0x018b, 0x01a4},
{0x00f8, 0x0110, 0x0129, 0x0142, 0x015b, 0x0174, 0x018d, 0x01a6},
{0x00f9, 0x0112, 0x012b, 0x0144, 0x015c, 0x0176, 0x018f, 0x01a8},
{0x00fa, 0x0113, 0x012c, 0x0145, 0x015e, 0x0177, 0x0190, 0x01a9},
{0x00fb, 0x0114, 0x012d, 0x0146, 0x015f, 0x0179, 0x0192, 0x01ab},
{0x00fc, 0x0115, 0x012e, 0x0147, 0x0161, 0x017a, 0x0193, 0x01ad},
{0x00fd, 0x0116, 0x012f, 0x0149, 0x0162, 0x017c, 0x0195, 0x01ae},
{0x00fe, 0x0117, 0x0131, 0x014a, 0x0163, 0x017d, 0x0197, 0x01b0},
{0x00ff, 0x0118, 0x0132, 0x014b, 0x0165, 0x017f, 0x0198, 0x01b2},
{0x0100, 0x0119, 0x0133, 0x014d, 0x0166, 0x0180, 0x019a, 0x01b3},
{0x0101, 0x011a, 0x0134, 0x014e, 0x0168, 0x0182, 0x019b, 0x01b5},
{0x0102, 0x011b, 0x0135, 0x014f, 0x0169, 0x0183, 0x019d, 0x01b7},
{0x0103, 0x011d, 0x0137, 0x0151, 0x016a, 0x0185, 0x019f, 0x01b9},
{0x0104, 0x011e, 0x0138, 0x0152, 0x016c, 0x0186, 0x01a0, 0x01ba},
{0x0105, 0x011f, 0x0139, 0x0153, 0x016d, 0x0188, 0x01a2, 0x01bc},
{0x0106, 0x0120, 0x013a, 0x0154, 0x016f, 0x0189, 0x01a3, 0x01be},
{0x0107, 0x0121, 0x013b, 0x0156, 0x0170, 0x018b, 0x01a5, 0x01bf},
{0x0108, 0x0122, 0x013d, 0x0157, 0x0171, 0x018c, 0x01a7, 0x01c1},
{0x0109, 0x0123, 0x013e, 0x0158, 0x0173, 0x018e, 0x01a8, 0x01c3},
{0x010a, 0x0124, 0x013f, 0x015a, 0x0174, 0x018f, 0x01aa, 0x01c4},
{0x010b, 0x0125, 0x0140, 0x015b, 0x0176, 0x0191, 0x01ab, 0x01c6},
{0x010c, 0x0126, 0x0141, 0x015c, 0x0177, 0x0192, 0x01ad, 0x01c8},
{0x010d, 0x0128, 0x0143, 0x015e, 0x0178, 0x0194, 0x01af, 0x01ca},
{0x010e, 0x0129, 0x0144, 0x015f, 0x017a, 0x0195, 0x01b0, 0x01cb},
{0x010f, 0x012a, 0x0145, 0x0160, 0x017b, 0x0197, 0x01b2, 0x01cd},
{0x0110, 0x012b, 0x0146, 0x0161, 0x017d, 0x0198, 0x01b3, 0x01cf},
{0x0111, 0x012c, 0x0147, 0x0163, 0x017e, 0x019a, 0x01b5, 0x01d0},
{0x0112, 0x012d, 0x0149, 0x0164, 0x017f, 0x019b, 0x01b7, 0x01d2},
{0x0113, 0x012e, 0x014a, 0x0165, 0x0181, 0x019d, 0x01b8, 0x01d4},
{0x0114, 0x012f, 0x014b, 0x0167, 0x0182, 0x019e, 0x01ba, 0x01d5},
{0x0115, 0x0130, 0x014c, 0x0168, 0x0184, 0x01a0, 0x01bb, 0x01d7},
{0x0116, 0x0131, 0x014d, 0x0169, 0x0185, 0x01a1, 0x01bd, 0x01d9},
{0x0117, 0x0133, 0x014f, 0x016b, 0x0186, 0x01a3, 0x01bf, 0x01db},
{0x0118, 0x0134, 0x0150, 0x016c, 0x0188, 0x01a4, 0x01c0, 0x01dc},
{0x0119, 0x0135, 0x0151, 0x016d, 0x0189, 0x01a6, 0x01c2, 0x01de},
{0x011a, 0x0136, 0x0152, 0x016e, 0x018b, 0x01a7, 0x01c3, 0x01e0},
{0x011b, 0x0137, 0x0153, 0x0170, 0x018c, 0x01a9, 0x01c5, 0x01e1},
{0x011c, 0x0138, 0x0155, 0x0171, 0x018d, 0x01aa, 0x01c7, 0x01e3},
{0x011d, 0x0139, 0x0156, 0x0172, 0x018f, 0x01ac, 0x01c8, 0x01e5},
{0x011e, 0x013a, 0x0157, 0x0174, 0x0190, 0x01ad, 0x01ca, 0x01e6},
{0x011f, 0x013b, 0x0158, 0x0175, 0x0192, 0x01af, 0x01cb, 0x01e8},
{0x0120, 0x013c, 0x0159, 0x0176, 0x0193, 0x01b0, 0x01cd, 0x01ea},
{0x0121, 0x013e, 0x015b, 0x0178, 0x0194, 0x01b2, 0x01cf, 0x01ec},
{0x0122, 0x013f, 0x015c, 0x0179, 0x0196, 0x01b3, 0x01d0, 0x01ed},
{0x0123, 0x0140, 0x015d, 0x017a, 0x0197, 0x01b5, 0x01d2, 0x01ef},
{0x0124, 0x0141, 0x015e, 0x017b, 0x0199, 0x01b6, 0x01d3, 0x01f1},
{0x0125, 0x0142, 0x015f, 0x017d, 0x019a, 0x01b8, 0x01d5, 0x01f2},
{0x0126, 0x0143, 0x0161, 0x017e, 0x019b, 0x01b9, 0x01d7, 0x01f4},
{0x0127, 0x0144, 0x0162, 0x017f, 0x019d, 0x01bb, 0x01d8, 0x01f6},
{0x0128, 0x0145, 0x0163, 0x0181, 0x019e, 0x01bc, 0x01da, 0x01f7},
{0x0129, 0x0146, 0x0164, 0x0182, 0x01a0, 0x01be, 0x01db, 0x01f9},
{0x012a, 0x0147, 0x0165, 0x0183, 0x01a1, 0x01bf, 0x01dd, 0x01fb},
{0x012b, 0x0149, 0x0167, 0x0185, 0x01a2, 0x01c1, 0x01df, 0x01fd},
{0x012c, 0x014a, 0x0168, 0x0186, 0x01a4, 0x01c2, 0x01e0, 0x01fe},
{0x012d, 0x014b, 0x0169, 0x0187, 0x01a5, 0x01c4, 0x01e2, 0x0200},
{0x012e, 0x014c, 0x016a, 0x0188, 0x01a7, 0x01c5, 0x01e3, 0x0202},
{0x012f, 0x014d, 0x016b, 0x018a, 0x01a8, 0x01c7, 0x01e5, 0x0203},
{0x0130, 0x014e, 0x016d, 0x018b, 0x01a9, 0x01c8, 0x01e7, 0x0205},
{0x0131, 0x014f, 0x016e, 0x018c, 0x01ab, 0x01ca, 0x01e8, 0x0207},
{0x0132, 0x0150, 0x016f, 0x018e, 0x01ac, 0x01cb, 0x01ea, 0x0208},
{0x0133, 0x0151, 0x0170, 0x018f, 0x01ae, 0x01cd, 0x01eb, 0x020a},
{0x0134, 0x0152, 0x0171, 0x0190, 0x01af, 0x01ce, 0x01ed, 0x020c},
{0x0135, 0x0154, 0x0173, 0x0192, 0x01b0, 0x01d0, 0x01ef, 0x020e},
{0x0136, 0x0155, 0x0174, 0x0193, 0x01b2, 0x01d1, 0x01f0, 0x020f},
{0x0137, 0x0156, 0x0175, 0x0194, 0x01b3, 0x01d3, 0x01f2, 0x0211},
{0x0138, 0x0157, 0x0176, 0x0195, 0x01b5, 0x01d4, 0x01f3, 0x0213},
{0x0139, 0x0158, 0x0177, 0x0197, 0x01b6, 0x01d6, 0x01f5, 0x0214},
{0x013a, 0x0159, 0x0179, 0x0198, 0x01b7, 0x01d7, 0x01f7, 0x0216},
{0x013b, 0x015a, 0x017a, 0x0199, 0x01b9, 0x01d9, 0x01f8, 0x0218},
{0x013c, 0x015b, 0x017b, 0x019b, 0x01ba, 0x01da, 0x01fa, 0x0219},
{0x013d, 0x015c, 0x017c, 0x019c, 0x01bc, 0x01dc, 0x01fb, 0x021b},
{0x013e, 0x015d, 0x017d, 0x019d, 0x01bd, 0x01dd, 0x01fd, 0x021d},
{0x013f, 0x015f, 0x017f, 0x019f, 0x01be, 0x01df, 0x01ff, 0x021f},
{0x0140, 0x0160, 0x0180, 0x01a0, 0x01c0, 0x01e0, 0x0200, 0x0220},
{0x0141, 0x0161, 0x0181, 0x01a1, 0x01c1, 0x01e2, 0x0202, 0x0222},
{0x0142, 0x0162, 0x0182, 0x01a2, 0x01c3, 0x01e3, 0x0203, 0x0224},
{0x0143, 0x0163, 0x0183, 0x01a4, 0x01c4, 0x01e5, 0x0205, 0x0225},
{0x0144, 0x0164, 0x0185, 0x01a5, 0x01c5, 0x01e6, 0x0207, 0x0227},
{0x0145, 0x0165, 0x0186, 0x01a6, 0x01c7, 0x01e8, 0x0208, 0x0229},
{0x0146, 0x0166, 0x0187, 0x01a8, 0x01c8, 0x01e9, 0x020a, 0x022a},
{0x0147, 0x0167, 0x0188, 0x01a9, 0x01ca, 0x01eb, 0x020b, 0x022c},
{0x0148, 0x0168, 0x0189, 0x01aa, 0x01cb, 0x01ec, 0x020d, 0x022e},
{0x0149, 0x016a, 0x018b, 0x01ac, 0x01cc, 0x01ee, 0x020f, 0x0230},
{0x014a, 0x016b, 0x018c, 0x01ad, 0x01ce, 0x01ef, 0x0210, 0x0231},
{0x014b, 0x016c, 0x018d, 0x01ae, 0x01cf, 0x01f1, 0x0212, 0x0233},
{0x014c, 0x016d, 0x018e, 0x01af, 0x01d1, 0x01f2, 0x0213, 0x0235},
{0x014d, 0x016e, 0x018f, 0x01b1, 0x01d2, 0x01f4, 0x0215, 0x0236},
{0x014e, 0x016f, 0x0191, 0x01b2, 0x01d3, 0x01f5, 0x0217, 0x0238},
{0x014f, 0x0170, 0x0192, 0x01b3, 0x01d5, 0x01f7, 0x0218, 0x023a},
{0x0150, 0x0171, 0x0193, 0x01b5, 0x01d6, 0x01f8, 0x021a, 0x023b},
{0x0151, 0x0172, 0x0194, 0x01b6, 0x01d8, 0x01fa, 0x021b, 0x023d},
{0x0152, 0x0173, 0x0195, 0x01b7, 0x01d9, 0x01fb, 0x021d, 0x023f},
{0x0153, 0x0175, 0x0197, 0x01b9, 0x01da, 0x01fd, 0x021f, 0x0241},
{0x0154, 0x0176, 0x0198, 0x01ba, 0x01dc, 0x01fe, 0x0220, 0x0242},
{0x0155, 0x0177, 0x0199, 0x01bb, 0x01dd, 0x0200, 0x0222, 0x0244},
{0x0156, 0x0178, 0x019a, 0x01bc, 0x01df, 0x0201, 0x0223, 0x0246},
{0x0157, 0x0179, 0x019b, 0x01be, 0x01e0, 0x0203, 0x0225, 0x0247},
{0x0158, 0x017a, 0x019d, 0x01bf, 0x01e1, 0x0204, 0x0227, 0x0249},
{0x0159, 0x017b, 0x019e, 0x01c0, 0x01e3, 0x0206, 0x0228, 0x024b},
{0x015a, 0x017c, 0x019f, 0x01c2, 0x01e4, 0x0207, 0x022a, 0x024c},
{0x015b, 0x017d, 0x01a0, 0x01c3, 0x01e6, 0x0209, 0x022b, 0x024e},
{0x015c, 0x017e, 0x01a1, 0x01c4, 0x01e7, 0x020a, 0x022d, 0x0250},
{0x015d, 0x0180, 0x01a3, 0x01c6, 0x01e8, 0x020c, 0x022f, 0x0252},
{0x015e, 0x0181, 0x01a4, 0x01c7, 0x01ea, 0x020d, 0x0230, 0x0253},
{0x015f, 0x0182, 0x01a5, 0x01c8, 0x01eb, 0x020f, 0x0232, 0x0255},
{0x0160, 0x0183, 0x01a6, 0x01c9, 0x01ed, 0x0210, 0x0233, 0x0257},
{0x0161, 0x0184, 0x01a7, 0x01cb, 0x01ee, 0x0212, 0x0235, 0x0258},
{0x0162, 0x0185, 0x01a9, 0x01cc, 0x01ef, 0x0213, 0x0237, 0x025a},
{0x0163, 0x0186, 0x01aa, 0x01cd, 0x01f1, 0x0215, 0x0238, 0x025c},
{0x0164, 0x0187, 0x01ab, 0x01cf, 0x01f2, 0x0216, 0x023a, 0x025d},
{0x0165, 0x0188, 0x01ac, 0x01d0, 0x01f4, 0x0218, 0x023b, 0x025f},
{0x0166, 0x0189, 0x01ad, 0x01d1, 0x01f5, 0x0219, 0x023d, 0x0261},
{0x0167, 0x018b, 0x01af, 0x01d3, 0x01f6, 0x021b, 0x023f, 0x0263},
{0x0168, 0x018c, 0x01b0, 0x01d4, 0x01f8, 0x021c, 0x0240, 0x0264},
{0x0169, 0x018d, 0x01b1, 0x01d5, 0x01f9, 0x021e, 0x0242, 0x0266},
{0x016a, 0x018e, 0x01b2, 0x01d6, 0x01fb, 0x021f, 0x0243, 0x0268},
{0x016b, 0x018f, 0x01b3, 0x01d8, 0x01fc, 0x0221, 0x0245, 0x0269},
{0x016c, 0x0190, 0x01b5, 0x01d9, 0x01fd, 0x0222, 0x0247, 0x026b},
{0x016d, 0x0191, 0x01b6, 0x01da, 0x01ff, 0x0224, 0x0248, 0x026d},
{0x016e, 0x0192, 0x01b7, 0x01dc, 0x0200, 0x0225, 0x024a, 0x026e},
{0x016f, 0x0193, 0x01b8, 0x01dd, 0x0202, 0x0227, 0x024b, 0x0270},
{0x0170, 0x0194, 0x01b9, 0x01de, 0x0203, 0x0228, 0x024d, 0x0272},
{0x0171, 0x0196, 0x01bb, 0x01e0, 0x0205, 0x022a, 0x024f, 0x0274},
{0x0172, 0x0197, 0x01bc, 0x01e1, 0x0206, 0x022b, 0x0250, 0x0275},
{0x0173, 0x0198, 0x01bd, 0x01e2, 0x0207, 0x022d, 0x0252, 0x0277},
{0x0174, 0x0199, 0x01be, 0x01e3, 0x0209, 0x022e, 0x0253, 0x0279},
{0x0175, 0x019a, 0x01bf, 0x01e5, 0x020a, 0x0230, 0x0255, 0x027a},
{0x0176, 0x019b, 0x01c1, 0x01e6, 0x020c, 0x0231, 0x0257, 0x027c},
{0x0177, 0x019c, 0x01c2, 0x01e7, 0x020d, 0x0233, 0x0258, 0x027e},
{0x0178, 0x019d, 0x01c3, 0x01e9, 0x020e, 0x0234, 0x025a, 0x027f},
{0x0179, 0x019e, 0x01c4, 0x01ea, 0x0210, 0x0236, 0x025b, 0x0281},
{0x017a, 0x019f, 0x01c5, 0x01eb, 0x0211, 0x0237, 0x025d, 0x0283},
{0x017b, 0x01a1, 0x01c7, 0x01ed, 0x0213, 0x0239, 0x025f, 0x0285},
{0x017c, 0x01a2, 0x01c8, 0x01ee, 0x0214, 0x023a, 0x0260, 0x0286},
{0x017d, 0x01a3, 0x01c9, 0x01ef, 0x0215, 0x023c, 0x0262, 0x0288},
{0x017e, 0x01a4, 0x01ca, 0x01f0, 0x0217, 0x023d, 0x0263, 0x028a},
{0x017f, 0x01a5, 0x01cb, 0x01f2, 0x0218, 0x023f, 0x0265, 0x028b},
{0x0180, 0x01a6, 0x01cc, 0x01f3, 0x0219, 0x0240, 0x0267, 0x028d},
{0x0181, 0x01a7, 0x01ce, 0x01f4, 0x021b, 0x0242, 0x0268, 0x028f},
{0x0182, 0x01a8, 0x01cf, 0x01f6, 0x021c, 0x0243, 0x026a, 0x0290},
{0x0183, 0x01a9, 0x01d0, 0x01f7, 0x021e, 0x0245, 0x026b, 0x0292},
{0x0184, 0x01aa, 0x01d1, 0x01f8, 0x021f, 0x0246, 0x026d, 0x0294},
{0x0185, 0x01ac, 0x01d2, 0x01fa, 0x0220, 0x0248, 0x026f, 0x0296},
{0x0186, 0x01ad, 0x01d4, 0x01fb, 0x0222, 0x0249, 0x0270, 0x0297},
{0x0187, 0x01ae, 0x01d5, 0x01fc, 0x0223, 0x024b, 0x0272, 0x0299},
{0x0188, 0x01af, 0x01d6, 0x01fd, 0x0225, 0x024c, 0x0273, 0x029b},
{0x0189, 0x01b0, 0x01d7, 0x01ff, 0x0226, 0x024e, 0x0275, 0x029c},
{0x018a, 0x01b1, 0x01d8, 0x0200, 0x0227, 0x024f, 0x0277, 0x029e},
{0x018b, 0x01b2, 0x01da, 0x0201, 0x0229, 0x0251, 0x0278, 0x02a0},
{0x018c, 0x01b3, 0x01db, 0x0203, 0x022a, 0x0252, 0x027a, 0x02a1},
{0x018d, 0x01b4, 0x01dc, 0x0204, 0x022c, 0x0254, 0x027b, 0x02a3},
{0x018e, 0x01b5, 0x01dd, 0x0205, 0x022d, 0x0255, 0x027d, 0x02a5},
{0x018f, 0x01b7, 0x01de, 0x0207, 0x022e, 0x0257, 0x027f, 0x02a7},
{0x0190, 0x01b8, 0x01e0, 0x0208, 0x0230, 0x0258, 0x0280, 0x02a8},
{0x0191, 0x01b9, 0x01e1, 0x0209, 0x0231, 0x025a, 0x0282, 0x02aa},
{0x0192, 0x01ba, 0x01e2, 0x020a, 0x0233, 0x025b, 0x0283, 0x02ac},
{0x0193, 0x01bb, 0x01e3, 0x020c, 0x0234, 0x025d, 0x0285, 0x02ad},
{0x0194, 0x01bc, 0x01e4, 0x020d, 0x0235, 0x025e, 0x0287, 0x02af},
{0x0195, 0x01bd, 0x01e6, 0x020e, 0x0237, 0x0260, 0x0288, 0x02b1},
{0x0196, 0x01be, 0x01e7, 0x0210, 0x0238, 0x0261, 0x028a, 0x02b2},
{0x0197, 0x01bf, 0x01e8, 0x0211, 0x023a, 0x0263, 0x028b, 0x02b4},
{0x0198, 0x01c0, 0x01e9, 0x0212, 0x023b, 0x0264, 0x028d, 0x02b6},
{0x0199, 0x01c2, 0x01ea, 0x0214, 0x023c, 0x0266, 0x028f, 0x02b8},
{0x019a, 0x01c3, 0x01ec, 0x0215, 0x023e, 0x0267, 0x0290, 0x02b9},
{0x019b, 0x01c4, 0x01ed, 0x0216, 0x023f, 0x0269, 0x0292, 0x02bb},
{0x019c, 0x01c5, 0x01ee, 0x0217, 0x0241, 0x026a, 0x0293, 0x02bd},
{0x019d, 0x01c6, 0x01ef, 0x0219, 0x0242, 0x026c, 0x0295, 0x02be},
{0x019e, 0x01c7, 0x01f0, 0x021a, 0x0243, 0x026d, 0x0297, 0x02c0},
{0x019f, 0x01c8, 0x01f2, 0x021b, 0x0245, 0x026f, 0x0298, 0x02c2},
{0x01a0, 0x01c9, 0x01f3, 0x021d, 0x0246, 0x0270, 0x029a, 0x02c3},
{0x01a1, 0x01ca, 0x01f4, 0x021e, 0x0248, 0x0272, 0x029b, 0x02c5},
{0x01a2, 0x01cb, 0x01f5, 0x021f, 0x0249, 0x0273, 0x029d, 0x02c7},
{0x01a3, 0x01cd, 0x01f6, 0x0221, 0x024a, 0x0275, 0x029f, 0x02c9},
{0x01a4, 0x01ce, 0x01f8, 0x0222, 0x024c, 0x0276, 0x02a0, 0x02ca},
{0x01a5, 0x01cf, 0x01f9, 0x0223, 0x024d, 0x0278, 0x02a2, 0x02cc},
{0x01a6, 0x01d0, 0x01fa, 0x0224, 0x024f, 0x0279, 0x02a3, 0x02ce},
{0x01a7, 0x01d1, 0x01fb, 0x0226, 0x0250, 0x027b, 0x02a5, 0x02cf},
{0x01a8, 0x01d2, 0x01fc, 0x0227, 0x0251, 0x027c, 0x02a7, 0x02d1},
{0x01a9, 0x01d3, 0x01fe, 0x0228, 0x0253, 0x027e, 0x02a8, 0x02d3},
{0x01aa, 0x01d4, 0x01ff, 0x022a, 0x0254, 0x027f, 0x02aa, 0x02d4},
{0x01ab, 0x01d5, 0x0200, 0x022b, 0x0256, 0x0281, 0x02ab, 0x02d6},
{0x01ac, 0x01d6, 0x0201, 0x022c, 0x0257, 0x0282, 0x02ad, 0x02d8},
{0x01ad, 0x01d8, 0x0203, 0x022e, 0x0258, 0x0284, 0x02af, 0x02da},
{0x01ae, 0x01d9, 0x0204, 0x022f, 0x025a, 0x0285, 0x02b0, 0x02db},
{0x01af, 0x01da, 0x0205, 0x0230, 0x025b, 0x0287, 0x02b2, 0x02dd},
{0x01b0, 0x01db, 0x0206, 0x0231, 0x025d, 0x0288, 0x02b3, 0x02df},
{0x01b1, 0x01dc, 0x0207, 0x0233, 0x025e, 0x028a, 0x02b5, 0x02e0},
{0x01b2, 0x01dd, 0x0209, 0x0234, 0x025f, 0x028b, 0x02b7, 0x02e2},
{0x01b3, 0x01de, 0x020a, 0x0235, 0x0261, 0x028d, 0x02b8, 0x02e4},
{0x01b4, 0x01df, 0x020b, 0x0237, 0x0262, 0x028e, 0x02ba, 0x02e5},
{0x01b5, 0x01e0, 0x020c, 0x0238, 0x0264, 0x0290, 0x02bb, 0x02e7},
{0x01b6, 0x01e1, 0x020d, 0x0239, 0x0265, 0x0291, 0x02bd, 0x02e9},
{0x01b7, 0x01e3, 0x020f, 0x023b, 0x0266, 0x0293, 0x02bf, 0x02eb},
{0x01b8, 0x01e4, 0x0210, 0x023c, 0x0268, 0x0294, 0x02c0, 0x02ec},
{0x01b9, 0x01e5, 0x0211, 0x023d, 0x0269, 0x0296, 0x02c2, 0x02ee},
{0x01ba, 0x01e6, 0x0212, 0x023e, 0x026b, 0x0297, 0x02c3, 0x02f0},
{0x01bb, 0x01e7, 0x0213, 0x0240, 0x026c, 0x0299, 0x02c5, 0x02f1},
{0x01bc, 0x01e8, 0x0215, 0x0241, 0x026d, 0x029a, 0x02c7, 0x02f3},
{0x01bd, 0x01e9, 0x0216, 0x0242, 0x026f, 0x029c, 0x02c8, 0x02f5},
{0x01be, 0x01ea, 0x0217, 0x0244, 0x0270, 0x029d, 0x02ca, 0x02f6},
{0x01bf, 0x01eb, 0x0218, 0x0245, 0x0272, 0x029f, 0x02cb, 0x02f8},
{0x01c0, 0x01ec, 0x0219, 0x0246, 0x0273, 0x02a0, 0x02cd, 0x02fa},
{0x01c1, 0x01ee, 0x021b, 0x0248, 0x0274, 0x02a2, 0x02cf, 0x02fc},
{0x01c2, 0x01ef, 0x021c, 0x0249, 0x0276, 0x02a3, 0x02d0, 0x02fd},
{0x01c3, 0x01f0, 0x021d, 0x024a, 0x0277, 0x02a5, 0x02d2, 0x02ff},
{0x01c4, 0x01f1, 0x021e, 0x024b, 0x0279, 0x02a6, 0x02d3, 0x0301},
{0x01c5, 0x01f2, 0x021f, 0x024d, 0x027a, 0x02a8, 0x02d5, 0x0302},
{0x01c6, 0x01f3, 0x0221, 0x024e, 0x027b, 0x02a9, 0x02d7, 0x0304},
{0x01c7, 0x01f4, 0x0222, 0x024f, 0x027d, 0x02ab, 0x02d8, 0x0306},
{0x01c8, 0x01f5, 0x0223, 0x0251, 0x027e, 0x02ac, 0x02da, 0x0307},
{0x01c9, 0x01f6, 0x0224, 0x0252, 0x0280, 0x02ae, 0x02db, 0x0309},
{0x01ca, 0x01f7, 0x0225, 0x0253, 0x0281, 0x02af, 0x02dd, 0x030b},
{0x01cb, 0x01f9, 0x0227, 0x0255, 0x0282, 0x02b1, 0x02df, 0x030d},
{0x01cc, 0x01fa, 0x0228, 0x0256, 0x0284, 0x02b2, 0x02e0, 0x030e},
{0x01cd, 0x01fb, 0x0229, 0x0257, 0x0285, 0x02b4, 0x02e2, 0x0310},
{0x01ce, 0x01fc, 0x022a, 0x0258, 0x0287, 0x02b5, 0x02e3, 0x0312},
{0x01cf, 0x01fd, 0x022b, 0x025a, 0x0288, 0x02b7, 0x02e5, 0x0313},
{0x01d0, 0x01fe, 0x022d, 0x025b, 0x0289, 0x02b8, 0x02e7, 0x0315},
{0x01d1, 0x01ff, 0x022e, 0x025c, 0x028b, 0x02ba, 0x02e8, 0x0317},
{0x01d2, 0x0200, 0x022f, 0x025e, 0x028c, 0x02bb, 0x02ea, 0x0318},
{0x01d3, 0x0201, 0x0230, 0x025f, 0x028e, 0x02bd, 0x02eb, 0x031a},
{0x01d4, 0x0202, 0x0231, 0x0260, 0x028f, 0x02be, 0x02ed, 0x031c},
{0x01d5, 0x0204, 0x0233, 0x0262, 0x0290, 0x02c0, 0x02ef, 0x031e},
{0x01d6, 0x0205, 0x0234, 0x0263, 0x0292, 0x02c1, 0x02f0, 0x031f},
{0x01d7, 0x0206, 0x0235, 0x0264, 0x0293, 0x02c3, 0x02f2, 0x0321},
{0x01d8, 0x0207, 0x0236, 0x0265, 0x0295, 0x02c4, 0x02f3, 0x0323},
{0x01d9, 0x0208, 0x0237, 0x0267, 0x0296, 0x02c6, 0x02f5, 0x0324},
{0x01da, 0x0209, 0x0239, 0x0268, 0x0297, 0x02c7, 0x02f7, 0x0326},
{0x01db, 0x020a, 0x023a, 0x0269, 0x0299, 0x02c9, 0x02f8, 0x0328},
{0x01dc, 0x020b, 0x023b, 0x026b, 0x029a, 0x02ca, 0x02fa, 0x0329},
{0x01dd, 0x020c, 0x023c, 0x026c, 0x029c, 0x02cc, 0x02fb, 0x032b},
{0x01de, 0x020d, 0x023d, 0x026d, 0x029d, 0x02cd, 0x02fd, 0x032d},
{0x01df, 0x020f, 0x023f, 0x026f, 0x029e, 0x02cf, 0x02ff, 0x032f},
{0x01e0, 0x0210, 0x0240, 0x0270, 0x02a0, 0x02d0, 0x0300, 0x0330},
{0x01e1, 0x0211, 0x0241, 0x0271, 0x02a1, 0x02d2, 0x0302, 0x0332},
{0x01e2, 0x0212, 0x0242, 0x0272, 0x02a3, 0x02d3, 0x0303, 0x0334},
{0x01e3, 0x0213, 0x0243, 0x0274, 0x02a4, 0x02d5, 0x0305, 0x0335},
{0x01e4, 0x0214, 0x0245, 0x0275, 0x02a5, 0x02d6, 0x0307, 0x0337},
{0x01e5, 0x0215, 0x0246, 0x0276, 0x02a7, 0x02d8, 0x0308, 0x0339},
{0x01e6, 0x0216, 0x0247, 0x0278, 0x02a8, 0x02d9, 0x030a, 0x033a},
{0x01e7, 0x0217, 0x0248, 0x0279, 0x02aa, 0x02db, 0x030b, 0x033c},
{0x01e8, 0x0218, 0x0249, 0x027a, 0x02ab, 0x02dc, 0x030d, 0x033e},
{0x01e9, 0x021a, 0x024b, 0x027c, 0x02ac, 0x02de, 0x030f, 0x0340},
{0x01ea, 0x021b, 0x024c, 0x027d, 0x02ae, 0x02df, 0x0310, 0x0341},
{0x01eb, 0x021c, 0x024d, 0x027e, 0x02af, 0x02e1, 0x0312, 0x0343},
{0x01ec, 0x021d, 0x024e, 0x027f, 0x02b1, 0x02e2, 0x0313, 0x0345},
{0x01ed, 0x021e, 0x024f, 0x0281, 0x02b2, 0x02e4, 0x0315, 0x0346},
{0x01ee, 0x021f, 0x0251, 0x0282, 0x02b3, 0x02e5, 0x0317, 0x0348},
{0x01ef, 0x0220, 0x0252, 0x0283, 0x02b5, 0x02e7, 0x0318, 0x034a},
{0x01f0, 0x0221, 0x0253, 0x0285, 0x02b6, 0x02e8, 0x031a, 0x034b},
{0x01f1, 0x0222, 0x0254, 0x0286, 0x02b8, 0x02ea, 0x031b, 0x034d},
{0x01f2, 0x0223, 0x0255, 0x0287, 0x02b9, 0x02eb, 0x031d, 0x034f},
{0x01f3, 0x0225, 0x0257, 0x0289, 0x02ba, 0x02ed, 0x031f, 0x0351},
{0x01f4, 0x0226, 0x0258, 0x028a, 0x02bc, 0x02ee, 0x0320, 0x0352},
{0x01f5, 0x0227, 0x0259, 0x028b, 0x02bd, 0x02f0, 0x0322, 0x0354},
{0x01f6, 0x0228, 0x025a, 0x028c, 0x02bf, 0x02f1, 0x0323, 0x0356},
{0x01f7, 0x0229, 0x025b, 0x028e, 0x02c0, 0x02f3, 0x0325, 0x0357},
{0x01f8, 0x022a, 0x025d, 0x028f, 0x02c1, 0x02f4, 0x0327, 0x0359},
{0x01f9, 0x022b, 0x025e, 0x0290, 0x02c3, 0x02f6, 0x0328, 0x035b},
{0x01fa, 0x022c, 0x025f, 0x0292, 0x02c4, 0x02f7, 0x032a, 0x035c},
{0x01fb, 0x022d, 0x0260, 0x0293, 0x02c6, 0x02f9, 0x032b, 0x035e},
{0x01fc, 0x022e, 0x0261, 0x0294, 0x02c7, 0x02fa, 0x032d, 0x0360},
{0x01fd, 0x0230, 0x0263, 0x0296, 0x02c8, 0x02fc, 0x032f, 0x0362},
{0x01fe, 0x0231, 0x0264, 0x0297, 0x02ca, 0x02fd, 0x0330, 0x0363},
{0x01ff, 0x0232, 0x0265, 0x0298, 0x02cb, 0x02ff, 0x0332, 0x0365},
{0x0200, 0x0233, 0x0266, 0x0299, 0x02cd, 0x0300, 0x0333, 0x0367},
{0x0201, 0x0234, 0x0267, 0x029b, 0x02ce, 0x0302, 0x0335, 0x0368},
{0x0202, 0x0235, 0x0269, 0x029c, 0x02cf, 0x0303, 0x0337, 0x036a},
{0x0203, 0x0236, 0x026a, 0x029d, 0x02d1, 0x0305, 0x0338, 0x036c},
{0x0204, 0x0237, 0x026b, 0x029f, 0x02d2, 0x0306, 0x033a, 0x036d},
{0x0205, 0x0238, 0x026c, 0x02a0, 0x02d4, 0x0308, 0x033b, 0x036f},
{0x0206, 0x0239, 0x026d, 0x02a1, 0x02d5, 0x0309, 0x033d, 0x0371},
{0x0207, 0x023b, 0x026f, 0x02a3, 0x02d6, 0x030b, 0x033f, 0x0373},
{0x0208, 0x023c, 0x0270, 0x02a4, 0x02d8, 0x030c, 0x0340, 0x0374},
{0x0209, 0x023d, 0x0271, 0x02a5, 0x02d9, 0x030e, 0x0342, 0x0376},
{0x020a, 0x023e, 0x0272, 0x02a6, 0x02db, 0x030f, 0x0343, 0x0378},
{0x020b, 0x023f, 0x0273, 0x02a8, 0x02dc, 0x0311, 0x0345, 0x0379},
{0x020c, 0x0240, 0x0275, 0x02a9, 0x02dd, 0x0312, 0x0347, 0x037b},
{0x020d, 0x0241, 0x0276, 0x02aa, 0x02df, 0x0314, 0x0348, 0x037d},
{0x020e, 0x0242, 0x0277, 0x02ac, 0x02e0, 0x0315, 0x034a, 0x037e},
{0x020f, 0x0243, 0x0278, 0x02ad, 0x02e2, 0x0317, 0x034b, 0x0380},
{0x0210, 0x0244, 0x0279, 0x02ae, 0x02e3, 0x0318, 0x034d, 0x0382},
{0x0211, 0x0246, 0x027b, 0x02b0, 0x02e4, 0x031a, 0x034f, 0x0384},
{0x0212, 0x0247, 0x027c, 0x02b1, 0x02e6, 0x031b, 0x0350, 0x0385},
{0x0213, 0x0248, 0x027d, 0x02b2, 0x02e7, 0x031d, 0x0352, 0x0387},
{0x0214, 0x0249, 0x027e, 0x02b3, 0x02e9, 0x031e, 0x0353, 0x0389},
{0x0215, 0x024a, 0x027f, 0x02b5, 0x02ea, 0x0320, 0x0355, 0x038a},
{0x0216, 0x024b, 0x0281, 0x02b6, 0x02eb, 0x0321, 0x0357, 0x038c},
{0x0217, 0x024c, 0x0282, 0x02b7, 0x02ed, 0x0323, 0x0358, 0x038e},
{0x0218, 0x024d, 0x0283, 0x02b9, 0x02ee, 0x0324, 0x035a, 0x038f},
{0x0219, 0x024e, 0x0284, 0x02ba, 0x02f0, 0x0326, 0x035b, 0x0391},
{0x021a, 0x024f, 0x0285, 0x02bb, 0x02f1, 0x0327, 0x035d, 0x0393},
{0x021b, 0x0251, 0x0287, 0x02bd, 0x02f2, 0x0329, 0x035f, 0x0395},
{0x021c, 0x0252, 0x0288, 0x02be, 0x02f4, 0x032a, 0x0360, 0x0396},
{0x021d, 0x0253, 0x0289, 0x02bf, 0x02f5, 0x032c, 0x0362, 0x0398},
{0x021e, 0x0254, 0x028a, 0x02c0, 0x02f7, 0x032d, 0x0363, 0x039a},
{0x021f, 0x0255, 0x028b, 0x02c2, 0x02f8, 0x032f, 0x0365, 0x039b},
{0x0220, 0x0256, 0x028d, 0x02c3, 0x02f9, 0x0330, 0x0367, 0x039d},
{0x0221, 0x0257, 0x028e, 0x02c4, 0x02fb, 0x0332, 0x0368, 0x039f},
{0x0222, 0x0258, 0x028f, 0x02c6, 0x02fc, 0x0333, 0x036a, 0x03a0},
{0x0223, 0x0259, 0x0290, 0x02c7, 0x02fe, 0x0335, 0x036b, 0x03a2},
{0x0224, 0x025a, 0x0291, 0x02c8, 0x02ff, 0x0336, 0x036d, 0x03a4},
{0x0225, 0x025c, 0x0293, 0x02ca, 0x0300, 0x0338, 0x036f, 0x03a6},
{0x0226, 0x025d, 0x0294, 0x02cb, 0x0302, 0x0339, 0x0370, 0x03a7},
{0x0227, 0x025e, 0x0295, 0x02cc, 0x0303, 0x033b, 0x0372, 0x03a9},
{0x0228, 0x025f, 0x0296, 0x02cd, 0x0305, 0x033c, 0x0373, 0x03ab},
{0x0229, 0x0260, 0x0297, 0x02cf, 0x0306, 0x033e, 0x0375, 0x03ac},
{0x022a, 0x0261, 0x0299, 0x02d0, 0x0307, 0x033f, 0x0377, 0x03ae},
{0x022b, 0x0262, 0x029a, 0x02d1, 0x0309, 0x0341, 0x0378, 0x03b0},
{0x022c, 0x0263, 0x029b, 0x02d3, 0x030a, 0x0342, 0x037a, 0x03b1},
{0x022d, 0x0264, 0x029c, 0x02d4, 0x030c, 0x0344, 0x037b, 0x03b3},
{0x022e, 0x0265, 0x029d, 0x02d5, 0x030d, 0x0345, 0x037d, 0x03b5},
{0x022f, 0x0267, 0x029f, 0x02d7, 0x030e, 0x0347, 0x037f, 0x03b7},
{0x0230, 0x0268, 0x02a0, 0x02d8, 0x0310, 0x0348, 0x0380, 0x03b8},
{0x0231, 0x0269, 0x02a1, 0x02d9, 0x0311, 0x034a, 0x0382, 0x03ba},
{0x0232, 0x026a, 0x02a2, 0x02da, 0x0313, 0x034b, 0x0383, 0x03bc},
{0x0233, 0x026b, 0x02a3, 0x02dc, 0x0314, 0x034d, 0x0385, 0x03bd},
{0x0234, 0x026c, 0x02a5, 0x02dd, 0x0315, 0x034e, 0x0387, 0x03bf},
{0x0235, 0x026d, 0x02a6, 0x02de, 0x0317, 0x0350, 0x0388, 0x03c1},
{0x0236, 0x026e, 0x02a7, 0x02e0, 0x0318, 0x0351, 0x038a, 0x03c2},
{0x0237, 0x026f, 0x02a8, 0x02e1, 0x031a, 0x0353, 0x038b, 0x03c4},
{0x0238, 0x0270, 0x02a9, 0x02e2, 0x031b, 0x0354, 0x038d, 0x03c6},
{0x0239, 0x0272, 0x02ab, 0x02e4, 0x031c, 0x0356, 0x038f, 0x03c8},
{0x023a, 0x0273, 0x02ac, 0x02e5, 0x031e, 0x0357, 0x0390, 0x03c9},
{0x023b, 0x0274, 0x02ad, 0x02e6, 0x031f, 0x0359, 0x0392, 0x03cb},
{0x023c, 0x0275, 0x02ae, 0x02e7, 0x0321, 0x035a, 0x0393, 0x03cd},
{0x023d, 0x0276, 0x02af, 0x02e9, 0x0322, 0x035c, 0x0395, 0x03ce},
{0x023e, 0x0277, 0x02b1, 0x02ea, 0x0323, 0x035d, 0x0397, 0x03d0},
{0x023f, 0x0278, 0x02b2, 0x02eb, 0x0325, 0x035f, 0x0398, 0x03d2},
{0x0240, 0x0279, 0x02b3, 0x02ed, 0x0326, 0x0360, 0x039a, 0x03d3},
{0x0241, 0x027a, 0x02b4, 0x02ee, 0x0328, 0x0362, 0x039b, 0x03d5},
{0x0242, 0x027b, 0x02b5, 0x02ef, 0x0329, 0x0363, 0x039d, 0x03d7},
{0x0243, 0x027d, 0x02b7, 0x02f1, 0x032a, 0x0365, 0x039f, 0x03d9},
{0x0244, 0x027e, 0x02b8, 0x02f2, 0x032c, 0x0366, 0x03a0, 0x03da},
{0x0245, 0x027f, 0x02b9, 0x02f3, 0x032d, 0x0368, 0x03a2, 0x03dc},
{0x0246, 0x0280, 0x02ba, 0x02f4, 0x032f, 0x0369, 0x03a3, 0x03de},
{0x0247, 0x0281, 0x02bb, 0x02f6, 0x0330, 0x036b, 0x03a5, 0x03df},
{0x0248, 0x0282, 0x02bd, 0x02f7, 0x0331, 0x036c, 0x03a7, 0x03e1},
{0x0249, 0x0283, 0x02be, 0x02f8, 0x0333, 0x036e, 0x03a8, 0x03e3},
{0x024a, 0x0284, 0x02bf, 0x02fa, 0x0334, 0x036f, 0x03aa, 0x03e4},
{0x024b, 0x0285, 0x02c0, 0x02fb, 0x0336, 0x0371, 0x03ab, 0x03e6},
{0x024c, 0x0286, 0x02c1, 0x02fc, 0x0337, 0x0372, 0x03ad, 0x03e8},
{0x024d, 0x0288, 0x02c3, 0x02fe, 0x0338, 0x0374, 0x03af, 0x03ea},
{0x024e, 0x0289, 0x02c4, 0x02ff, 0x033a, 0x0375, 0x03b0, 0x03eb},
{0x024f, 0x028a, 0x02c5, 0x0300, 0x033b, 0x0377, 0x03b2, 0x03ed},
{0x0250, 0x028b, 0x02c6, 0x0301, 0x033d, 0x0378, 0x03b3, 0x03ef},
{0x0251, 0x028c, 0x02c7, 0x0303, 0x033e, 0x037a, 0x03b5, 0x03f0},
{0x0252, 0x028d, 0x02c9, 0x0304, 0x033f, 0x037b, 0x03b7, 0x03f2},
{0x0253, 0x028e, 0x02ca, 0x0305, 0x0341, 0x037d, 0x03b8, 0x03f4},
{0x0254, 0x028f, 0x02cb, 0x0307, 0x0342, 0x037e, 0x03ba, 0x03f5},
{0x0255, 0x0290, 0x02cc, 0x0308, 0x0344, 0x0380, 0x03bb, 0x03f7},
{0x0256, 0x0291, 0x02cd, 0x0309, 0x0345, 0x0381, 0x03bd, 0x03f9},
{0x0257, 0x0293, 0x02cf, 0x030b, 0x0346, 0x0383, 0x03bf, 0x03fb},
{0x0258, 0x0294, 0x02d0, 0x030c, 0x0348, 0x0384, 0x03c0, 0x03fc},
{0x0259, 0x0295, 0x02d1, 0x030d, 0x0349, 0x0386, 0x03c2, 0x03fe},
{0x025a, 0x0296, 0x02d2, 0x030e, 0x034b, 0x0387, 0x03c3, 0x03ff},
{0x025b, 0x0297, 0x02d3, 0x0310, 0x034c, 0x0389, 0x03c5, 0x03ff},
{0x025c, 0x0298, 0x02d5, 0x0311, 0x034d, 0x038a, 0x03c7, 0x03ff},
{0x025d, 0x0299, 0x02d6, 0x0312, 0x034f, 0x038c, 0x03c8, 0x03ff},
{0x025e, 0x029a, 0x02d7, 0x0314, 0x0350, 0x038d, 0x03ca, 0x03ff},
{0x025f, 0x029b, 0x02d8, 0x0315, 0x0352, 0x038f, 0x03cb, 0x03ff},
{0x0260, 0x029c, 0x02d9, 0x0316, 0x0353, 0x0390, 0x03cd, 0x03ff},
{0x0261, 0x029e, 0x02db, 0x0318, 0x0354, 0x0392, 0x03cf, 0x03ff},
{0x0262, 0x029f, 0x02dc, 0x0319, 0x0356, 0x0393, 0x03d0, 0x03ff},
{0x0263, 0x02a0, 0x02dd, 0x031a, 0x0357, 0x0395, 0x03d2, 0x03ff},
{0x0264, 0x02a1, 0x02de, 0x031b, 0x0359, 0x0396, 0x03d3, 0x03ff},
{0x0265, 0x02a2, 0x02df, 0x031d, 0x035a, 0x0398, 0x03d5, 0x03ff},
{0x0266, 0x02a3, 0x02e1, 0x031e, 0x035b, 0x0399, 0x03d7, 0x03ff},
{0x0267, 0x02a4, 0x02e2, 0x031f, 0x035d, 0x039b, 0x03d8, 0x03ff},
{0x0268, 0x02a5, 0x02e3, 0x0321, 0x035e, 0x039c, 0x03da, 0x03ff},
{0x0269, 0x02a6, 0x02e4, 0x0322, 0x0360, 0x039e, 0x03db, 0x03ff},
{0x026a, 0x02a7, 0x02e5, 0x0323, 0x0361, 0x039f, 0x03dd, 0x03ff},
{0x026b, 0x02a9, 0x02e7, 0x0325, 0x0362, 0x03a1, 0x03df, 0x03ff},
{0x026c, 0x02aa, 0x02e8, 0x0326, 0x0364, 0x03a2, 0x03e0, 0x03ff},
{0x026d, 0x02ab, 0x02e9, 0x0327, 0x0365, 0x03a4, 0x03e2, 0x03ff},
{0x026e, 0x02ac, 0x02ea, 0x0328, 0x0367, 0x03a5, 0x03e3, 0x03ff},
{0x026f, 0x02ad, 0x02eb, 0x032a, 0x0368, 0x03a7, 0x03e5, 0x03ff},
{0x0270, 0x02ae, 0x02ed, 0x032b, 0x0369, 0x03a8, 0x03e7, 0x03ff},
{0x0271, 0x02af, 0x02ee, 0x032c, 0x036b, 0x03aa, 0x03e8, 0x03ff},
{0x0272, 0x02b0, 0x02ef, 0x032e, 0x036c, 0x03ab, 0x03ea, 0x03ff},
{0x0273, 0x02b1, 0x02f0, 0x032f, 0x036e, 0x03ad, 0x03eb, 0x03ff},
{0x0274, 0x02b2, 0x02f1, 0x0330, 0x036f, 0x03ae, 0x03ed, 0x03ff},
{0x0275, 0x02b4, 0x02f3, 0x0332, 0x0370, 0x03b0, 0x03ef, 0x03ff},
{0x0276, 0x02b5, 0x02f4, 0x0333, 0x0372, 0x03b1, 0x03f0, 0x03ff},
{0x0277, 0x02b6, 0x02f5, 0x0334, 0x0373, 0x03b3, 0x03f2, 0x03ff},
{0x0278, 0x02b7, 0x02f6, 0x0335, 0x0375, 0x03b4, 0x03f3, 0x03ff},
{0x0279, 0x02b8, 0x02f7, 0x0337, 0x0376, 0x03b6, 0x03f5, 0x03ff},
{0x027a, 0x02b9, 0x02f9, 0x0338, 0x0377, 0x03b7, 0x03f7, 0x03ff},
{0x027b, 0x02ba, 0x02fa, 0x0339, 0x0379, 0x03b9, 0x03f8, 0x03ff},
{0x027c, 0x02bb, 0x02fb, 0x033b, 0x037a, 0x03ba, 0x03fa, 0x03ff},
{0x027d, 0x02bc, 0x02fc, 0x033c, 0x037c, 0x03bc, 0x03fb, 0x03ff},
{0x027e, 0x02bd, 0x02fd, 0x033d, 0x037d, 0x03bd, 0x03fd, 0x03ff},
{0x027f, 0x02bf, 0x02ff, 0x033f, 0x037e, 0x03bf, 0x03ff, 0x03ff},
{0x0280, 0x02c0, 0x0300, 0x0340, 0x0380, 0x03c0, 0x03ff, 0x03ff},
{0x0281, 0x02c1, 0x0301, 0x0341, 0x0381, 0x03c2, 0x03ff, 0x03ff},
{0x0282, 0x02c2, 0x0302, 0x0342, 0x0383, 0x03c3, 0x03ff, 0x03ff},
{0x0283, 0x02c3, 0x0303, 0x0344, 0x0384, 0x03c5, 0x03ff, 0x03ff},
{0x0284, 0x02c4, 0x0305, 0x0345, 0x0385, 0x03c6, 0x03ff, 0x03ff},
{0x0285, 0x02c5, 0x0306, 0x0346, 0x0387, 0x03c8, 0x03ff, 0x03ff},
{0x0286, 0x02c6, 0x0307, 0x0348, 0x0388, 0x03c9, 0x03ff, 0x03ff},
{0x0287, 0x02c7, 0x0308, 0x0349, 0x038a, 0x03cb, 0x03ff, 0x03ff},
{0x0288, 0x02c8, 0x0309, 0x034a, 0x038b, 0x03cc, 0x03ff, 0x03ff},
{0x0289, 0x02ca, 0x030b, 0x034c, 0x038c, 0x03ce, 0x03ff, 0x03ff},
{0x028a, 0x02cb, 0x030c, 0x034d, 0x038e, 0x03cf, 0x03ff, 0x03ff},
{0x028b, 0x02cc, 0x030d, 0x034e, 0x038f, 0x03d1, 0x03ff, 0x03ff},
{0x028c, 0x02cd, 0x030e, 0x034f, 0x0391, 0x03d2, 0x03ff, 0x03ff},
{0x028d, 0x02ce, 0x030f, 0x0351, 0x0392, 0x03d4, 0x03ff, 0x03ff},
{0x028e, 0x02cf, 0x0311, 0x0352, 0x0393, 0x03d5, 0x03ff, 0x03ff},
{0x028f, 0x02d0, 0x0312, 0x0353, 0x0395, 0x03d7, 0x03ff, 0x03ff},
{0x0290, 0x02d1, 0x0313, 0x0355, 0x0396, 0x03d8, 0x03ff, 0x03ff},
{0x0291, 0x02d2, 0x0314, 0x0356, 0x0398, 0x03da, 0x03ff, 0x03ff},
{0x0292, 0x02d3, 0x0315, 0x0357, 0x0399, 0x03db, 0x03ff, 0x03ff},
{0x0293, 0x02d5, 0x0317, 0x0359, 0x039a, 0x03dd, 0x03ff, 0x03ff},
{0x0294, 0x02d6, 0x0318, 0x035a, 0x039c, 0x03de, 0x03ff, 0x03ff},
{0x0295, 0x02d7, 0x0319, 0x035b, 0x039d, 0x03e0, 0x03ff, 0x03ff},
{0x0296, 0x02d8, 0x031a, 0x035c, 0x039f, 0x03e1, 0x03ff, 0x03ff},
{0x0297, 0x02d9, 0x031b, 0x035e, 0x03a0, 0x03e3, 0x03ff, 0x03ff},
{0x0298, 0x02da, 0x031d, 0x035f, 0x03a1, 0x03e4, 0x03ff, 0x03ff},
{0x0299, 0x02db, 0x031e, 0x0360, 0x03a3, 0x03e6, 0x03ff, 0x03ff},
{0x029a, 0x02dc, 0x031f, 0x0362, 0x03a4, 0x03e7, 0x03ff, 0x03ff},
{0x029b, 0x02dd, 0x0320, 0x0363, 0x03a6, 0x03e9, 0x03ff, 0x03ff},
{0x029c, 0x02de, 0x0321, 0x0364, 0x03a7, 0x03ea, 0x03ff, 0x03ff},
{0x029d, 0x02e0, 0x0323, 0x0366, 0x03a8, 0x03ec, 0x03ff, 0x03ff},
{0x029e, 0x02e1, 0x0324, 0x0367, 0x03aa, 0x03ed, 0x03ff, 0x03ff},
{0x029f, 0x02e2, 0x0325, 0x0368, 0x03ab, 0x03ef, 0x03ff, 0x03ff},
{0x02a0, 0x02e3, 0x0326, 0x0369, 0x03ad, 0x03f0, 0x03ff, 0x03ff},
{0x02a1, 0x02e4, 0x0327, 0x036b, 0x03ae, 0x03f2, 0x03ff, 0x03ff},
{0x02a2, 0x02e5, 0x0329, 0x036c, 0x03af, 0x03f3, 0x03ff, 0x03ff},
{0x02a3, 0x02e6, 0x032a, 0x036d, 0x03b1, 0x03f5, 0x03ff, 0x03ff},
{0x02a4, 0x02e7, 0x032b, 0x036f, 0x03b2, 0x03f6, 0x03ff, 0x03ff},
{0x02a5, 0x02e8, 0x032c, 0x0370, 0x03b4, 0x03f8, 0x03ff, 0x03ff},
{0x02a6, 0x02e9, 0x032d, 0x0371, 0x03b5, 0x03f9, 0x03ff, 0x03ff},
{0x02a7, 0x02eb, 0x032f, 0x0373, 0x03b6, 0x03fb, 0x03ff, 0x03ff},
{0x02a8, 0x02ec, 0x0330, 0x0374, 0x03b8, 0x03fc, 0x03ff, 0x03ff},
{0x02a9, 0x02ed, 0x0331, 0x0375, 0x03b9, 0x03fe, 0x03ff, 0x03ff},
{0x02aa, 0x02ee, 0x0332, 0x0376, 0x03bb, 0x03ff, 0x03ff, 0x03ff},
{0x02ab, 0x02ef, 0x0333, 0x0378, 0x03bc, 0x03ff, 0x03ff, 0x03ff},
{0x02ac, 0x02f0, 0x0335, 0x0379, 0x03bd, 0x03ff, 0x03ff, 0x03ff},
{0x02ad, 0x02f1, 0x0336, 0x037a, 0x03bf, 0x03ff, 0x03ff, 0x03ff},
{0x02ae, 0x02f2, 0x0337, 0x037c, 0x03c0, 0x03ff, 0x03ff, 0x03ff},
{0x02af, 0x02f3, 0x0338, 0x037d, 0x03c2, 0x03ff, 0x03ff, 0x03ff},
{0x02b0, 0x02f4, 0x0339, 0x037e, 0x03c3, 0x03ff, 0x03ff, 0x03ff},
{0x02b1, 0x02f6, 0x033b, 0x0380, 0x03c4, 0x03ff, 0x03ff, 0x03ff},
{0x02b2, 0x02f7, 0x033c, 0x0381, 0x03c6, 0x03ff, 0x03ff, 0x03ff},
{0x02b3, 0x02f8, 0x033d, 0x0382, 0x03c7, 0x03ff, 0x03ff, 0x03ff},
{0x02b4, 0x02f9, 0x033e, 0x0383, 0x03c9, 0x03ff, 0x03ff, 0x03ff},
{0x02b5, 0x02fa, 0x033f, 0x0385, 0x03ca, 0x03ff, 0x03ff, 0x03ff},
{0x02b6, 0x02fb, 0x0341, 0x0386, 0x03cb, 0x03ff, 0x03ff, 0x03ff},
{0x02b7, 0x02fc, 0x0342, 0x0387, 0x03cd, 0x03ff, 0x03ff, 0x03ff},
{0x02b8, 0x02fd, 0x0343, 0x0389, 0x03ce, 0x03ff, 0x03ff, 0x03ff},
{0x02b9, 0x02fe, 0x0344, 0x038a, 0x03d0, 0x03ff, 0x03ff, 0x03ff},
{0x02ba, 0x02ff, 0x0345, 0x038b, 0x03d1, 0x03ff, 0x03ff, 0x03ff},
{0x02bb, 0x0301, 0x0347, 0x038d, 0x03d2, 0x03ff, 0x03ff, 0x03ff},
{0x02bc, 0x0302, 0x0348, 0x038e, 0x03d4, 0x03ff, 0x03ff, 0x03ff},
{0x02bd, 0x0303, 0x0349, 0x038f, 0x03d5, 0x03ff, 0x03ff, 0x03ff},
{0x02be, 0x0304, 0x034a, 0x0390, 0x03d7, 0x03ff, 0x03ff, 0x03ff},
{0x02bf, 0x0305, 0x034b, 0x0392, 0x03d8, 0x03ff, 0x03ff, 0x03ff},
{0x02c0, 0x0306, 0x034d, 0x0393, 0x03d9, 0x03ff, 0x03ff, 0x03ff},
{0x02c1, 0x0307, 0x034e, 0x0394, 0x03db, 0x03ff, 0x03ff, 0x03ff},
{0x02c2, 0x0308, 0x034f, 0x0396, 0x03dc, 0x03ff, 0x03ff, 0x03ff},
{0x02c3, 0x0309, 0x0350, 0x0397, 0x03de, 0x03ff, 0x03ff, 0x03ff},
{0x02c4, 0x030a, 0x0351, 0x0398, 0x03df, 0x03ff, 0x03ff, 0x03ff},
{0x02c5, 0x030c, 0x0353, 0x039a, 0x03e0, 0x03ff, 0x03ff, 0x03ff},
{0x02c6, 0x030d, 0x0354, 0x039b, 0x03e2, 0x03ff, 0x03ff, 0x03ff},
{0x02c7, 0x030e, 0x0355, 0x039c, 0x03e3, 0x03ff, 0x03ff, 0x03ff},
{0x02c8, 0x030f, 0x0356, 0x039d, 0x03e5, 0x03ff, 0x03ff, 0x03ff},
{0x02c9, 0x0310, 0x0357, 0x039f, 0x03e6, 0x03ff, 0x03ff, 0x03ff},
{0x02ca, 0x0311, 0x0359, 0x03a0, 0x03e7, 0x03ff, 0x03ff, 0x03ff},
{0x02cb, 0x0312, 0x035a, 0x03a1, 0x03e9, 0x03ff, 0x03ff, 0x03ff},
{0x02cc, 0x0313, 0x035b, 0x03a3, 0x03ea, 0x03ff, 0x03ff, 0x03ff},
{0x02cd, 0x0314, 0x035c, 0x03a4, 0x03ec, 0x03ff, 0x03ff, 0x03ff},
{0x02ce, 0x0315, 0x035d, 0x03a5, 0x03ed, 0x03ff, 0x03ff, 0x03ff},
{0x02cf, 0x0317, 0x035f, 0x03a7, 0x03ee, 0x03ff, 0x03ff, 0x03ff},
{0x02d0, 0x0318, 0x0360, 0x03a8, 0x03f0, 0x03ff, 0x03ff, 0x03ff},
{0x02d1, 0x0319, 0x0361, 0x03a9, 0x03f1, 0x03ff, 0x03ff, 0x03ff},
{0x02d2, 0x031a, 0x0362, 0x03aa, 0x03f3, 0x03ff, 0x03ff, 0x03ff},
{0x02d3, 0x031b, 0x0363, 0x03ac, 0x03f4, 0x03ff, 0x03ff, 0x03ff},
{0x02d4, 0x031c, 0x0365, 0x03ad, 0x03f5, 0x03ff, 0x03ff, 0x03ff},
{0x02d5, 0x031d, 0x0366, 0x03ae, 0x03f7, 0x03ff, 0x03ff, 0x03ff},
{0x02d6, 0x031e, 0x0367, 0x03b0, 0x03f8, 0x03ff, 0x03ff, 0x03ff},
{0x02d7, 0x031f, 0x0368, 0x03b1, 0x03fa, 0x03ff, 0x03ff, 0x03ff},
{0x02d8, 0x0320, 0x0369, 0x03b2, 0x03fb, 0x03ff, 0x03ff, 0x03ff},
{0x02d9, 0x0322, 0x036b, 0x03b4, 0x03fc, 0x03ff, 0x03ff, 0x03ff},
{0x02da, 0x0323, 0x036c, 0x03b5, 0x03fe, 0x03ff, 0x03ff, 0x03ff},
{0x02db, 0x0324, 0x036d, 0x03b6, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x02dc, 0x0325, 0x036e, 0x03b7, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x02dd, 0x0326, 0x036f, 0x03b9, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x02de, 0x0327, 0x0371, 0x03ba, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x02df, 0x0328, 0x0372, 0x03bb, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x02e0, 0x0329, 0x0373, 0x03bd, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x02e1, 0x032a, 0x0374, 0x03be, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x02e2, 0x032b, 0x0375, 0x03bf, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x02e3, 0x032d, 0x0377, 0x03c1, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x02e4, 0x032e, 0x0378, 0x03c2, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x02e5, 0x032f, 0x0379, 0x03c3, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x02e6, 0x0330, 0x037a, 0x03c4, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x02e7, 0x0331, 0x037b, 0x03c6, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x02e8, 0x0332, 0x037d, 0x03c7, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x02e9, 0x0333, 0x037e, 0x03c8, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x02ea, 0x0334, 0x037f, 0x03ca, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x02eb, 0x0335, 0x0380, 0x03cb, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x02ec, 0x0336, 0x0381, 0x03cc, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x02ed, 0x0338, 0x0383, 0x03ce, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x02ee, 0x0339, 0x0384, 0x03cf, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x02ef, 0x033a, 0x0385, 0x03d0, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x02f0, 0x033b, 0x0386, 0x03d1, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x02f1, 0x033c, 0x0387, 0x03d3, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x02f2, 0x033d, 0x0389, 0x03d4, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x02f3, 0x033e, 0x038a, 0x03d5, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x02f4, 0x033f, 0x038b, 0x03d7, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x02f5, 0x0340, 0x038c, 0x03d8, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x02f6, 0x0341, 0x038d, 0x03d9, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x02f7, 0x0343, 0x038f, 0x03db, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x02f8, 0x0344, 0x0390, 0x03dc, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x02f9, 0x0345, 0x0391, 0x03dd, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x02fa, 0x0346, 0x0392, 0x03de, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x02fb, 0x0347, 0x0393, 0x03e0, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x02fc, 0x0348, 0x0395, 0x03e1, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x02fd, 0x0349, 0x0396, 0x03e2, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x02fe, 0x034a, 0x0397, 0x03e4, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x02ff, 0x034b, 0x0398, 0x03e5, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0300, 0x034c, 0x0399, 0x03e6, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0301, 0x034e, 0x039b, 0x03e8, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0302, 0x034f, 0x039c, 0x03e9, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0303, 0x0350, 0x039d, 0x03ea, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0304, 0x0351, 0x039e, 0x03eb, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0305, 0x0352, 0x039f, 0x03ed, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0306, 0x0353, 0x03a1, 0x03ee, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0307, 0x0354, 0x03a2, 0x03ef, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0308, 0x0355, 0x03a3, 0x03f1, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0309, 0x0356, 0x03a4, 0x03f2, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x030a, 0x0357, 0x03a5, 0x03f3, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x030b, 0x0359, 0x03a7, 0x03f5, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x030c, 0x035a, 0x03a8, 0x03f6, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x030d, 0x035b, 0x03a9, 0x03f7, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x030e, 0x035c, 0x03aa, 0x03f8, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x030f, 0x035d, 0x03ab, 0x03fa, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0310, 0x035e, 0x03ad, 0x03fb, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0311, 0x035f, 0x03ae, 0x03fc, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0312, 0x0360, 0x03af, 0x03fe, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0313, 0x0361, 0x03b0, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0314, 0x0362, 0x03b1, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0315, 0x0364, 0x03b3, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0316, 0x0365, 0x03b4, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0317, 0x0366, 0x03b5, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0318, 0x0367, 0x03b6, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0319, 0x0368, 0x03b7, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x031a, 0x0369, 0x03b9, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x031b, 0x036a, 0x03ba, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x031c, 0x036b, 0x03bb, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x031d, 0x036c, 0x03bc, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x031e, 0x036d, 0x03bd, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x031f, 0x036f, 0x03bf, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0320, 0x0370, 0x03c0, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0321, 0x0371, 0x03c1, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0322, 0x0372, 0x03c2, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0323, 0x0373, 0x03c3, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0324, 0x0374, 0x03c5, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0325, 0x0375, 0x03c6, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0326, 0x0376, 0x03c7, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0327, 0x0377, 0x03c8, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0328, 0x0378, 0x03c9, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0329, 0x037a, 0x03cb, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x032a, 0x037b, 0x03cc, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x032b, 0x037c, 0x03cd, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x032c, 0x037d, 0x03ce, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x032d, 0x037e, 0x03cf, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x032e, 0x037f, 0x03d1, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x032f, 0x0380, 0x03d2, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0330, 0x0381, 0x03d3, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0331, 0x0382, 0x03d4, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0332, 0x0383, 0x03d5, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0333, 0x0385, 0x03d7, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0334, 0x0386, 0x03d8, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0335, 0x0387, 0x03d9, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0336, 0x0388, 0x03da, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0337, 0x0389, 0x03db, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0338, 0x038a, 0x03dd, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0339, 0x038b, 0x03de, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x033a, 0x038c, 0x03df, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x033b, 0x038d, 0x03e0, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x033c, 0x038e, 0x03e1, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x033d, 0x0390, 0x03e3, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x033e, 0x0391, 0x03e4, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x033f, 0x0392, 0x03e5, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0340, 0x0393, 0x03e6, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0341, 0x0394, 0x03e7, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0342, 0x0395, 0x03e9, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0343, 0x0396, 0x03ea, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0344, 0x0397, 0x03eb, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0345, 0x0398, 0x03ec, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0346, 0x0399, 0x03ed, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0347, 0x039b, 0x03ef, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0348, 0x039c, 0x03f0, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0349, 0x039d, 0x03f1, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x034a, 0x039e, 0x03f2, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x034b, 0x039f, 0x03f3, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x034c, 0x03a0, 0x03f5, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x034d, 0x03a1, 0x03f6, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x034e, 0x03a2, 0x03f7, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x034f, 0x03a3, 0x03f8, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0350, 0x03a4, 0x03f9, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0351, 0x03a6, 0x03fb, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0352, 0x03a7, 0x03fc, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0353, 0x03a8, 0x03fd, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0354, 0x03a9, 0x03fe, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0355, 0x03aa, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0356, 0x03ab, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0357, 0x03ac, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0358, 0x03ad, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0359, 0x03ae, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x035a, 0x03af, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x035b, 0x03b1, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x035c, 0x03b2, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x035d, 0x03b3, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x035e, 0x03b4, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x035f, 0x03b5, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0360, 0x03b6, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0361, 0x03b7, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0362, 0x03b8, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0363, 0x03b9, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0364, 0x03ba, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0365, 0x03bc, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0366, 0x03bd, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0367, 0x03be, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0368, 0x03bf, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0369, 0x03c0, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x036a, 0x03c1, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x036b, 0x03c2, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x036c, 0x03c3, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x036d, 0x03c4, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x036e, 0x03c5, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x036f, 0x03c7, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0370, 0x03c8, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0371, 0x03c9, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0372, 0x03ca, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0373, 0x03cb, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0374, 0x03cc, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0375, 0x03cd, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0376, 0x03ce, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0377, 0x03cf, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0378, 0x03d0, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0379, 0x03d2, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x037a, 0x03d3, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x037b, 0x03d4, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x037c, 0x03d5, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x037d, 0x03d6, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x037e, 0x03d7, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x037f, 0x03d8, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0380, 0x03d9, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0381, 0x03da, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0382, 0x03db, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0383, 0x03dd, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0384, 0x03de, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0385, 0x03df, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0386, 0x03e0, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0387, 0x03e1, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0388, 0x03e2, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0389, 0x03e3, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x038a, 0x03e4, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x038b, 0x03e5, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x038c, 0x03e6, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x038d, 0x03e8, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x038e, 0x03e9, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x038f, 0x03ea, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0390, 0x03eb, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0391, 0x03ec, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0392, 0x03ed, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0393, 0x03ee, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0394, 0x03ef, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0395, 0x03f0, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0396, 0x03f1, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0397, 0x03f3, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0398, 0x03f4, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x0399, 0x03f5, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x039a, 0x03f6, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x039b, 0x03f7, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x039c, 0x03f8, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x039d, 0x03f9, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x039e, 0x03fa, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x039f, 0x03fb, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03a0, 0x03fc, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03a1, 0x03fe, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03a2, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03a3, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03a4, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03a5, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03a6, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03a7, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03a8, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03a9, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03aa, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03ab, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03ac, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03ad, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03ae, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03af, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03b0, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03b1, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03b2, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03b3, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03b4, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03b5, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03b6, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03b7, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03b8, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03b9, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03ba, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03bb, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03bc, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03bd, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03be, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03bf, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03c0, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03c1, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03c2, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03c3, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03c4, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03c5, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03c6, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03c7, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03c8, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03c9, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03ca, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03cb, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03cc, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03cd, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03ce, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03cf, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03d0, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03d1, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03d2, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03d3, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03d4, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03d5, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03d6, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03d7, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03d8, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03d9, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03da, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03db, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03dc, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03dd, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03de, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03df, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03e0, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03e1, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03e2, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03e3, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03e4, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03e5, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03e6, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03e7, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03e8, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03e9, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03ea, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03eb, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03ec, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03ed, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03ee, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03ef, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03f0, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03f1, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03f2, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03f3, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03f4, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03f5, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03f6, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03f7, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03f8, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03f9, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03fa, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03fb, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03fc, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03fd, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03fe, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff},
{0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff, 0x03ff}
};
#pragma line 21 "/afs/cern.ch/user/p/psiddire/CMSSW_10_2_2/src/VivadoHLSProjects/HT/MakeHT.h" 2
#pragma empty_line
void MakeHT(uint16_t rgnET[18*7*2], uint16_t hfET[18*8], uint16_t HT[1]);
#pragma line 7 "/afs/cern.ch/user/p/psiddire/CMSSW_10_2_2/src/VivadoHLSProjects/HT/TestMakeHT.cpp" 2
#pragma empty_line
bool writeLinkMapHT(uint16_t rgnET[18*7*2], uint16_t hfET[18*8], uint16_t HT[3]) {
#pragma empty_line
#pragma empty_line
  int iRgn, iHFRgn, link, loBit, hiBit;
  static FILE *f1;
  f1 = fopen("link_data_map.txt","w");
  for(iRgn = 0; iRgn < 18*7*2; iRgn++) {
    fprintf(f1, "rgnET_%d : IN STD_LOGIC_VECTOR (15 downto 0);\n", iRgn);
  }
  for(iHFRgn = 0; iHFRgn < 18 * 8; iHFRgn++) {
    fprintf(f1, "hfET_%d : IN STD_LOGIC_VECTOR (15 downto 0);\n", iHFRgn);
  }
  fprintf(f1, "HT_0 : OUT STD_LOGIC_VECTOR (15 downto 0);\n");
  fprintf(f1, "HT_1 : OUT STD_LOGIC_VECTOR (15 downto 0);\n");
  fprintf(f1, "HT_2 : OUT STD_LOGIC_VECTOR (15 downto 0);\n\n\n");
#pragma empty_line
  for(iRgn = 0; iRgn < 18*7*2; iRgn++) {
    fprintf(f1, "signal rgnET_%d : STD_LOGIC_VECTOR(15 DOWNTO 0);\n", iRgn);
  }
  for(iHFRgn = 0; iHFRgn < 18 * 8; iHFRgn++) {
    fprintf(f1, "signal hfET_%d : STD_LOGIC_VECTOR(15 DOWNTO 0);\n", iHFRgn);
  }
  fprintf(f1, "signal HT_0 : STD_LOGIC_VECTOR (15 downto 0);\n");
  fprintf(f1, "signal HT_1 : STD_LOGIC_VECTOR (15 downto 0);\n");
  fprintf(f1, "signal HT_2 : STD_LOGIC_VECTOR (15 downto 0);\n\n\n");
#pragma empty_line
  for(iRgn = 0; iRgn < 18*7*2; iRgn++) {
    fprintf(f1, "rgnET_%d => rgnET_%d,\n", iRgn, iRgn);
  }
  for(iHFRgn = 0; iHFRgn < 18 * 8; iHFRgn++) {
    fprintf(f1, "hfET_%d => hfET_%d,\n", iHFRgn, iHFRgn);
  }
  fprintf(f1, "HT_0 => HT_0,\n");
  fprintf(f1, "HT_1 => HT_1,\n");
  fprintf(f1, "HT_2 => HT_2,\n\n\n");
#pragma empty_line
  for(iRgn = 0; iRgn < 18*7*2; iRgn++) {
#pragma empty_line
#pragma empty_line
    link = (iRgn / 12);
    loBit = (iRgn % 12) * 16;
    hiBit = loBit + 15;
    fprintf(f1, "rgnET_%d <= s_INPUT_LINK_ARR( %d )(%d downto %d);\n", iRgn, link, hiBit, loBit);
  }
  for(iHFRgn = 0; iHFRgn < 18 * 8; iHFRgn++) {
#pragma empty_line
#pragma empty_line
    link = (iHFRgn / 12) + 21;
    loBit = (iHFRgn % 12) * 16;
    hiBit = loBit + 15;
    fprintf(f1, "hfET_%d <= s_INPUT_LINK_ARR( %d )(%d downto %d);\n", iHFRgn, link, hiBit, loBit);
  }
  fprintf(f1, "s_OUTPUT_LINK_ARR( 0 )(15 downto 0) <= HT_0;\n");
  fprintf(f1, "s_OUTPUT_LINK_ARR( 0 )(31 downto 16) <= HT_1;\n");
  fprintf(f1, "s_OUTPUT_LINK_ARR( 0 )(47 downto 32) <= HT_2;\n");
  return true;
}
#pragma empty_line
bool writeInputFile(uint16_t rgnET[18*7*2], uint16_t hfET[18*8], bool last = false) {
  static bool first = true;
  static int count = 0;
  static FILE *f1;
  int i,j;
  int iRgn, iHFRgn;
  uint16_t item0 = 0;
  uint16_t item1 = 0;
  if(first) {
    first = false;
    f1 = fopen("input_link_data.txt","w");
    if( f1 == __null){
      fprintf(stderr, "\n Error opening input file");
      return false;
    }
#pragma empty_line
    for (i=0; i < 945; i++)fprintf(f1,"=");
    fprintf(f1,"\nInput ");
    for (i=0; i < 67; i++) fprintf(f1,"       LINK_%02d",i);
    fprintf(f1,"\n");
    for (i=0; i < 945; i++) fprintf(f1,"=");
  }
  for(j = 0; j < 6 && count < 1024; j++, count++) {
    fprintf(f1,"\n0x%05X", count);
    for(i=0; i< 67; i++) {
      item0 = 0;
      item1 = 0;
      if(i < 21) {
 iRgn = i * 12 + j * 2;
 if(iRgn < 18 * 7 * 2) {
   item0 = rgnET[iRgn];
   item1 = rgnET[iRgn + 1];
 }
      }
      else if(i < 33) {
 iHFRgn = i * 12 + j * 2;
 if(iHFRgn < 18 * 8) {
   item0 = hfET[iHFRgn];
   item1 = hfET[iHFRgn + 1];
 }
      }
      fprintf(f1,"    0x%04X%04X", item1, item0);
    }
  }
  if(last || count > 1017) {
    for(; count < 1024; count++) {
      fprintf(f1,"\n0x%05X", count);
      for(i=0; i< 67; i++) {
 fprintf(f1,"    0x00000000");
      }
    }
  }
  return true;
}
#pragma empty_line
bool writeOutputFile(uint16_t HT[3], bool last = false) {
#pragma empty_line
  static bool first = true;
  static int count = 0;
  static FILE *f1;
#pragma empty_line
  int i,j;
#pragma empty_line
  if(first) {
    first = false;
    f1 = fopen("output_link_data.txt","w");
    if( f1 == __null){
      fprintf(stderr, "\n Error opening output file");
      return false;
    }
#pragma empty_line
    for (i=0; i < 679; i++) fprintf(f1,"=");
    fprintf(f1,"\nOutput ");
    for (i=0; i < 48; i++) fprintf(f1,"       LINK_%02d",i);
    fprintf(f1,"\n");
    for (i=0; i < 679; i++) fprintf(f1,"=");
  }
#pragma empty_line
#pragma empty_line
  for(j = 0; j < 6 && count < 1024; j++, count++) {
    fprintf(f1,"\n0x%05X", count);
    for(i=0; i< 48; i++)
      {
 if(j == 0 && i == 0)
   fprintf(f1,"    0x%04X%04X", HT[1], HT[0]);
 if(j == 1 && i == 0)
   fprintf(f1,"    0x%08X", HT[2]);
 else
   fprintf(f1,"    0x00000000");
      }
  }
#pragma empty_line
#pragma empty_line
  if(last || count > 1017) {
    for(; count < 1024; count++) {
      fprintf(f1,"\n0x%05X", count);
      for(i=0; i< 48; i++) {
 fprintf(f1,"    0x00000000");
      }
    }
  }
#pragma empty_line
  return true;
#pragma empty_line
}
#pragma empty_line
bool makeTestData(int argc, char** argv, uint16_t rgnET[18*7*2], uint16_t hfET[18*8]) {
  static FILE *f1;
  static bool first = true;
  uint32_t count;
  int i,j;
  int iRgn, iHFRgn;
  uint16_t item0 = 0;
  uint16_t item1 = 0;
  uint32_t value = 0;
  char junk[1024];
  char pattern[64];
  if(argc >= 2) {
    strncpy(pattern, argv[1], 64);
  }
  else {
    strcpy(pattern, "--default");
  }
  if(strncmp(pattern, "--random", strlen(pattern)) == 0) {
    for(iRgn = 0; iRgn < 18 * 7 * 2; iRgn++) {
      rgnET[iRgn] = rand() & 0x7F;
    }
    for(iHFRgn = 0; iHFRgn < 18 * 8; iHFRgn++) {
      hfET[iHFRgn] = rand() & 0x7F;
    }
  }
  else if(strncmp(pattern, "--increasing", strlen(pattern)) == 0) {
    value = 0;
    for(iRgn = 0; iRgn < 18 * 7 * 2; iRgn++) {
      rgnET[iRgn] = value++;
    }
    value = 0;
    for(iHFRgn = 0; iHFRgn < 18 * 8; iHFRgn++) {
      hfET[iHFRgn] = value++;
    }
  }
  else if(strncmp(pattern, "--decreasing", strlen(pattern)) == 0) {
    value = 18 * 7 * 2;
    for(iRgn = 0; iRgn < 18 * 7 * 2; iRgn++) {
      rgnET[iRgn] = value--;
    }
    value = 18 * 8;
    for(iHFRgn = 0; iHFRgn < 18 * 8; iHFRgn++) {
      hfET[iHFRgn] = value--;
    }
  }
  else if(strncmp(pattern, "--constant", strlen(pattern)) == 0) {
    value = 0;
    if(argc == 3) value = atoi(argv[2]);
    for(iRgn = 0; iRgn < 18 * 7 * 2; iRgn++) {
      rgnET[iRgn] = value;
    }
    for(iHFRgn = 0; iHFRgn < 18 * 8; iHFRgn++) {
      hfET[iHFRgn] = value;
    }
  }
  else if(strncmp(pattern, "--fileinput", strlen(pattern)) == 0) {
    if(first) {
      first = false;
#pragma empty_line
      if(argc == 3) f1 = fopen(argv[2], "r");
      else f1 = fopen("fileinput.txt", "r");
#pragma empty_line
      for(i = 0; i < 3; i++) {
 if(fgets(junk, sizeof(junk), f1) == __null) {
   fprintf(stderr, "Aborting due to bad format of the input file header\n");
   return false;
 }
      }
    }
    for(j = 0; j < 6; j++) {
      if(fscanf(f1, "%X", &count) == 1) {
 if(j != (count % 6)) {
   fprintf(stderr, "Read error~?!\n");
   return false;
 }
 for(i = 0; i < 67; i++) {
   if(fscanf(f1, "%X", &value) == 1) {
     item0 = value & 0xFFFF;
     item1 = value >> 16;
     if(i < 21) {
       iRgn = i * 12 + j * 2;
       if(iRgn < 18 * 7 * 2) {
  rgnET[iRgn] = item0;
  rgnET[iRgn + 1] = item1;
       }
     }
     else if(i < 33) {
       iHFRgn = i * 12 + j * 2;
       if(iHFRgn < 18 * 8) {
  hfET[iHFRgn] = item0;
  hfET[iHFRgn + 1] = item1;
       }
     }
   }
   else {
     fprintf(stderr, "Error reading value\n");
     return false;
   }
 }
      }
      else {
 fprintf(stderr, "Error reading count\n");
 return false;
      }
    }
  }
  else {
#pragma empty_line
    for(iRgn = 0; iRgn < 18 * 7 * 2; iRgn++) {
      rgnET[iRgn] = iRgn / 2;
    }
    for(iHFRgn = 0; iHFRgn < 18 * 8; iHFRgn++) {
      hfET[iHFRgn] = iHFRgn;
    }
  }
  return true;
}
#pragma empty_line

#ifndef HLS_FASTSIM
#pragma line 290 "/afs/cern.ch/user/p/psiddire/CMSSW_10_2_2/src/VivadoHLSProjects/HT/TestMakeHT.cpp"

#ifndef HLS_FASTSIM
#include "apatb_MakeHT.h"
#endif

#pragma line 290 "/afs/cern.ch/user/p/psiddire/CMSSW_10_2_2/src/VivadoHLSProjects/HT/TestMakeHT.cpp"
int main(int argc, char **argv) {
#pragma empty_line
  uint16_t rgnET[18*7*2];
  uint16_t hfET[18*8];
  uint16_t et;
  uint16_t HT[3] = {0, 0, 0};
  uint16_t hlsHT[3] = {0, 0, 0};
#pragma empty_line
  uint32_t rgnHT = 0;
  uint32_t hfHT = 0;
  uint32_t sum = 0;
#pragma empty_line
  int iCrt;
  int iCrd;
  int iRgn;
  int i;
  int j;
  int iHFRgn;
  int event = 0;
#pragma empty_line
  bool last = false;
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
  printf("Using: #define uint10_t uint16_t\n");
#pragma empty_line
#pragma empty_line
#pragma empty_line
#pragma empty_line
  for(event = 0; event < 170; event++) {
#pragma empty_line
#pragma empty_line
    if(event == 169) last = true;
#pragma empty_line
#pragma empty_line
#pragma empty_line
    if(!makeTestData(argc, argv, rgnET, hfET)) return 999;
#pragma empty_line
#pragma empty_line
#pragma empty_line
    rgnHT = 0;
    for(iRgn = 0; iRgn < 18 * 7 * 2; iRgn++) {
      j = (iRgn % (7*2));
      et = rgnETLUT[rgnET[iRgn]][j];
      if(et > 10) rgnHT += et;
      if(rgnHT > 0xFFFF) rgnHT = 0xFFFF;
    }
    hfHT = 0;
    for(iHFRgn = 0; iHFRgn < 18 * 8; iHFRgn++) {
      j = (iHFRgn % (8));
      et = hfETLUT[hfET[iHFRgn]][j];
      if(et > 10) hfHT += et;
      if(hfHT > 0xFFFF) hfHT = 0xFFFF;
    }
    sum = rgnHT + hfHT;
    if(sum > 0xFFFF) sum = 0xFFFF;
    HT[0] = (uint16_t) sum;
    HT[1] = (uint16_t) rgnHT;
    HT[2] = (uint16_t) hfHT;
#pragma empty_line
#pragma empty_line
#pragma empty_line
    
#ifndef HLS_FASTSIM
#define MakeHT AESL_WRAP_MakeHT
#endif

#pragma line 353 "/afs/cern.ch/user/p/psiddire/CMSSW_10_2_2/src/VivadoHLSProjects/HT/TestMakeHT.cpp"

#ifndef HLS_FASTSIM
#define MakeHT AESL_WRAP_MakeHT
#endif

#pragma line 353 "/afs/cern.ch/user/p/psiddire/CMSSW_10_2_2/src/VivadoHLSProjects/HT/TestMakeHT.cpp"
MakeHT
#undef MakeHT
#pragma line 353 "/afs/cern.ch/user/p/psiddire/CMSSW_10_2_2/src/VivadoHLSProjects/HT/TestMakeHT.cpp"

#undef MakeHT
#pragma line 353 "/afs/cern.ch/user/p/psiddire/CMSSW_10_2_2/src/VivadoHLSProjects/HT/TestMakeHT.cpp"
(rgnET, hfET, hlsHT);
#pragma empty_line
#pragma empty_line
#pragma empty_line
    if(HT[0] != hlsHT[0]) {
      fprintf(stderr, "C says: HT = %d; HLS says: HT = %d\n", HT[0], hlsHT[0]);
      fprintf(stderr, "C says: rgnHT = %d; HLS says: rgnHT = %d\n", HT[1], hlsHT[1]);
      fprintf(stderr, "C says: hfHT = %d; HLS says: hfHT = %d\n", HT[2], hlsHT[2]);
      fprintf(stderr, "Test failed\n");
      return 1;
    }
#pragma empty_line
#pragma empty_line
    if(!writeInputFile(rgnET, hfET, last)) return 2;
    if(!writeOutputFile(hlsHT, last)) return 3;
#pragma empty_line
  }
#pragma empty_line
  if(!writeLinkMapHT(rgnET, hfET, hlsHT)) return 4;
#pragma empty_line
  printf("Test succeeded\n");
  return 0;
#pragma empty_line
}
#endif
#pragma line 376 "/afs/cern.ch/user/p/psiddire/CMSSW_10_2_2/src/VivadoHLSProjects/HT/TestMakeHT.cpp"
