-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.4
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.std_logic_unsigned.all;
use IEEE.std_logic_arith.all;
use IEEE.numeric_std.all;
use ieee.std_logic_textio.all;
use std.textio.all;


entity apatb_MakeHT_top is
  generic (
       AUTOTB_CLOCK_PERIOD_DIV2 :   TIME := 5.00 ns;
       AUTOTB_TVIN_rgnET_0 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_0.dat";
       AUTOTB_TVIN_rgnET_1 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_1.dat";
       AUTOTB_TVIN_rgnET_2 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_2.dat";
       AUTOTB_TVIN_rgnET_3 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_3.dat";
       AUTOTB_TVIN_rgnET_4 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_4.dat";
       AUTOTB_TVIN_rgnET_5 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_5.dat";
       AUTOTB_TVIN_rgnET_6 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_6.dat";
       AUTOTB_TVIN_rgnET_7 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_7.dat";
       AUTOTB_TVIN_rgnET_8 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_8.dat";
       AUTOTB_TVIN_rgnET_9 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_9.dat";
       AUTOTB_TVIN_rgnET_10 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_10.dat";
       AUTOTB_TVIN_rgnET_11 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_11.dat";
       AUTOTB_TVIN_rgnET_12 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_12.dat";
       AUTOTB_TVIN_rgnET_13 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_13.dat";
       AUTOTB_TVIN_rgnET_14 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_14.dat";
       AUTOTB_TVIN_rgnET_15 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_15.dat";
       AUTOTB_TVIN_rgnET_16 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_16.dat";
       AUTOTB_TVIN_rgnET_17 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_17.dat";
       AUTOTB_TVIN_rgnET_18 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_18.dat";
       AUTOTB_TVIN_rgnET_19 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_19.dat";
       AUTOTB_TVIN_rgnET_20 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_20.dat";
       AUTOTB_TVIN_rgnET_21 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_21.dat";
       AUTOTB_TVIN_rgnET_22 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_22.dat";
       AUTOTB_TVIN_rgnET_23 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_23.dat";
       AUTOTB_TVIN_rgnET_24 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_24.dat";
       AUTOTB_TVIN_rgnET_25 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_25.dat";
       AUTOTB_TVIN_rgnET_26 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_26.dat";
       AUTOTB_TVIN_rgnET_27 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_27.dat";
       AUTOTB_TVIN_rgnET_28 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_28.dat";
       AUTOTB_TVIN_rgnET_29 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_29.dat";
       AUTOTB_TVIN_rgnET_30 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_30.dat";
       AUTOTB_TVIN_rgnET_31 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_31.dat";
       AUTOTB_TVIN_rgnET_32 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_32.dat";
       AUTOTB_TVIN_rgnET_33 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_33.dat";
       AUTOTB_TVIN_rgnET_34 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_34.dat";
       AUTOTB_TVIN_rgnET_35 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_35.dat";
       AUTOTB_TVIN_rgnET_36 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_36.dat";
       AUTOTB_TVIN_rgnET_37 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_37.dat";
       AUTOTB_TVIN_rgnET_38 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_38.dat";
       AUTOTB_TVIN_rgnET_39 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_39.dat";
       AUTOTB_TVIN_rgnET_40 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_40.dat";
       AUTOTB_TVIN_rgnET_41 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_41.dat";
       AUTOTB_TVIN_rgnET_42 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_42.dat";
       AUTOTB_TVIN_rgnET_43 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_43.dat";
       AUTOTB_TVIN_rgnET_44 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_44.dat";
       AUTOTB_TVIN_rgnET_45 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_45.dat";
       AUTOTB_TVIN_rgnET_46 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_46.dat";
       AUTOTB_TVIN_rgnET_47 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_47.dat";
       AUTOTB_TVIN_rgnET_48 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_48.dat";
       AUTOTB_TVIN_rgnET_49 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_49.dat";
       AUTOTB_TVIN_rgnET_50 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_50.dat";
       AUTOTB_TVIN_rgnET_51 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_51.dat";
       AUTOTB_TVIN_rgnET_52 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_52.dat";
       AUTOTB_TVIN_rgnET_53 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_53.dat";
       AUTOTB_TVIN_rgnET_54 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_54.dat";
       AUTOTB_TVIN_rgnET_55 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_55.dat";
       AUTOTB_TVIN_rgnET_56 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_56.dat";
       AUTOTB_TVIN_rgnET_57 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_57.dat";
       AUTOTB_TVIN_rgnET_58 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_58.dat";
       AUTOTB_TVIN_rgnET_59 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_59.dat";
       AUTOTB_TVIN_rgnET_60 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_60.dat";
       AUTOTB_TVIN_rgnET_61 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_61.dat";
       AUTOTB_TVIN_rgnET_62 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_62.dat";
       AUTOTB_TVIN_rgnET_63 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_63.dat";
       AUTOTB_TVIN_rgnET_64 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_64.dat";
       AUTOTB_TVIN_rgnET_65 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_65.dat";
       AUTOTB_TVIN_rgnET_66 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_66.dat";
       AUTOTB_TVIN_rgnET_67 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_67.dat";
       AUTOTB_TVIN_rgnET_68 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_68.dat";
       AUTOTB_TVIN_rgnET_69 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_69.dat";
       AUTOTB_TVIN_rgnET_70 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_70.dat";
       AUTOTB_TVIN_rgnET_71 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_71.dat";
       AUTOTB_TVIN_rgnET_72 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_72.dat";
       AUTOTB_TVIN_rgnET_73 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_73.dat";
       AUTOTB_TVIN_rgnET_74 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_74.dat";
       AUTOTB_TVIN_rgnET_75 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_75.dat";
       AUTOTB_TVIN_rgnET_76 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_76.dat";
       AUTOTB_TVIN_rgnET_77 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_77.dat";
       AUTOTB_TVIN_rgnET_78 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_78.dat";
       AUTOTB_TVIN_rgnET_79 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_79.dat";
       AUTOTB_TVIN_rgnET_80 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_80.dat";
       AUTOTB_TVIN_rgnET_81 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_81.dat";
       AUTOTB_TVIN_rgnET_82 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_82.dat";
       AUTOTB_TVIN_rgnET_83 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_83.dat";
       AUTOTB_TVIN_rgnET_84 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_84.dat";
       AUTOTB_TVIN_rgnET_85 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_85.dat";
       AUTOTB_TVIN_rgnET_86 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_86.dat";
       AUTOTB_TVIN_rgnET_87 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_87.dat";
       AUTOTB_TVIN_rgnET_88 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_88.dat";
       AUTOTB_TVIN_rgnET_89 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_89.dat";
       AUTOTB_TVIN_rgnET_90 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_90.dat";
       AUTOTB_TVIN_rgnET_91 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_91.dat";
       AUTOTB_TVIN_rgnET_92 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_92.dat";
       AUTOTB_TVIN_rgnET_93 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_93.dat";
       AUTOTB_TVIN_rgnET_94 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_94.dat";
       AUTOTB_TVIN_rgnET_95 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_95.dat";
       AUTOTB_TVIN_rgnET_96 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_96.dat";
       AUTOTB_TVIN_rgnET_97 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_97.dat";
       AUTOTB_TVIN_rgnET_98 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_98.dat";
       AUTOTB_TVIN_rgnET_99 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_99.dat";
       AUTOTB_TVIN_rgnET_100 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_100.dat";
       AUTOTB_TVIN_rgnET_101 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_101.dat";
       AUTOTB_TVIN_rgnET_102 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_102.dat";
       AUTOTB_TVIN_rgnET_103 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_103.dat";
       AUTOTB_TVIN_rgnET_104 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_104.dat";
       AUTOTB_TVIN_rgnET_105 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_105.dat";
       AUTOTB_TVIN_rgnET_106 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_106.dat";
       AUTOTB_TVIN_rgnET_107 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_107.dat";
       AUTOTB_TVIN_rgnET_108 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_108.dat";
       AUTOTB_TVIN_rgnET_109 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_109.dat";
       AUTOTB_TVIN_rgnET_110 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_110.dat";
       AUTOTB_TVIN_rgnET_111 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_111.dat";
       AUTOTB_TVIN_rgnET_112 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_112.dat";
       AUTOTB_TVIN_rgnET_113 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_113.dat";
       AUTOTB_TVIN_rgnET_114 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_114.dat";
       AUTOTB_TVIN_rgnET_115 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_115.dat";
       AUTOTB_TVIN_rgnET_116 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_116.dat";
       AUTOTB_TVIN_rgnET_117 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_117.dat";
       AUTOTB_TVIN_rgnET_118 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_118.dat";
       AUTOTB_TVIN_rgnET_119 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_119.dat";
       AUTOTB_TVIN_rgnET_120 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_120.dat";
       AUTOTB_TVIN_rgnET_121 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_121.dat";
       AUTOTB_TVIN_rgnET_122 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_122.dat";
       AUTOTB_TVIN_rgnET_123 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_123.dat";
       AUTOTB_TVIN_rgnET_124 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_124.dat";
       AUTOTB_TVIN_rgnET_125 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_125.dat";
       AUTOTB_TVIN_rgnET_126 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_126.dat";
       AUTOTB_TVIN_rgnET_127 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_127.dat";
       AUTOTB_TVIN_rgnET_128 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_128.dat";
       AUTOTB_TVIN_rgnET_129 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_129.dat";
       AUTOTB_TVIN_rgnET_130 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_130.dat";
       AUTOTB_TVIN_rgnET_131 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_131.dat";
       AUTOTB_TVIN_rgnET_132 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_132.dat";
       AUTOTB_TVIN_rgnET_133 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_133.dat";
       AUTOTB_TVIN_rgnET_134 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_134.dat";
       AUTOTB_TVIN_rgnET_135 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_135.dat";
       AUTOTB_TVIN_rgnET_136 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_136.dat";
       AUTOTB_TVIN_rgnET_137 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_137.dat";
       AUTOTB_TVIN_rgnET_138 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_138.dat";
       AUTOTB_TVIN_rgnET_139 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_139.dat";
       AUTOTB_TVIN_rgnET_140 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_140.dat";
       AUTOTB_TVIN_rgnET_141 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_141.dat";
       AUTOTB_TVIN_rgnET_142 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_142.dat";
       AUTOTB_TVIN_rgnET_143 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_143.dat";
       AUTOTB_TVIN_rgnET_144 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_144.dat";
       AUTOTB_TVIN_rgnET_145 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_145.dat";
       AUTOTB_TVIN_rgnET_146 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_146.dat";
       AUTOTB_TVIN_rgnET_147 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_147.dat";
       AUTOTB_TVIN_rgnET_148 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_148.dat";
       AUTOTB_TVIN_rgnET_149 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_149.dat";
       AUTOTB_TVIN_rgnET_150 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_150.dat";
       AUTOTB_TVIN_rgnET_151 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_151.dat";
       AUTOTB_TVIN_rgnET_152 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_152.dat";
       AUTOTB_TVIN_rgnET_153 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_153.dat";
       AUTOTB_TVIN_rgnET_154 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_154.dat";
       AUTOTB_TVIN_rgnET_155 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_155.dat";
       AUTOTB_TVIN_rgnET_156 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_156.dat";
       AUTOTB_TVIN_rgnET_157 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_157.dat";
       AUTOTB_TVIN_rgnET_158 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_158.dat";
       AUTOTB_TVIN_rgnET_159 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_159.dat";
       AUTOTB_TVIN_rgnET_160 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_160.dat";
       AUTOTB_TVIN_rgnET_161 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_161.dat";
       AUTOTB_TVIN_rgnET_162 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_162.dat";
       AUTOTB_TVIN_rgnET_163 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_163.dat";
       AUTOTB_TVIN_rgnET_164 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_164.dat";
       AUTOTB_TVIN_rgnET_165 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_165.dat";
       AUTOTB_TVIN_rgnET_166 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_166.dat";
       AUTOTB_TVIN_rgnET_167 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_167.dat";
       AUTOTB_TVIN_rgnET_168 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_168.dat";
       AUTOTB_TVIN_rgnET_169 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_169.dat";
       AUTOTB_TVIN_rgnET_170 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_170.dat";
       AUTOTB_TVIN_rgnET_171 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_171.dat";
       AUTOTB_TVIN_rgnET_172 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_172.dat";
       AUTOTB_TVIN_rgnET_173 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_173.dat";
       AUTOTB_TVIN_rgnET_174 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_174.dat";
       AUTOTB_TVIN_rgnET_175 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_175.dat";
       AUTOTB_TVIN_rgnET_176 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_176.dat";
       AUTOTB_TVIN_rgnET_177 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_177.dat";
       AUTOTB_TVIN_rgnET_178 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_178.dat";
       AUTOTB_TVIN_rgnET_179 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_179.dat";
       AUTOTB_TVIN_rgnET_180 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_180.dat";
       AUTOTB_TVIN_rgnET_181 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_181.dat";
       AUTOTB_TVIN_rgnET_182 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_182.dat";
       AUTOTB_TVIN_rgnET_183 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_183.dat";
       AUTOTB_TVIN_rgnET_184 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_184.dat";
       AUTOTB_TVIN_rgnET_185 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_185.dat";
       AUTOTB_TVIN_rgnET_186 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_186.dat";
       AUTOTB_TVIN_rgnET_187 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_187.dat";
       AUTOTB_TVIN_rgnET_188 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_188.dat";
       AUTOTB_TVIN_rgnET_189 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_189.dat";
       AUTOTB_TVIN_rgnET_190 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_190.dat";
       AUTOTB_TVIN_rgnET_191 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_191.dat";
       AUTOTB_TVIN_rgnET_192 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_192.dat";
       AUTOTB_TVIN_rgnET_193 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_193.dat";
       AUTOTB_TVIN_rgnET_194 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_194.dat";
       AUTOTB_TVIN_rgnET_195 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_195.dat";
       AUTOTB_TVIN_rgnET_196 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_196.dat";
       AUTOTB_TVIN_rgnET_197 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_197.dat";
       AUTOTB_TVIN_rgnET_198 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_198.dat";
       AUTOTB_TVIN_rgnET_199 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_199.dat";
       AUTOTB_TVIN_rgnET_200 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_200.dat";
       AUTOTB_TVIN_rgnET_201 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_201.dat";
       AUTOTB_TVIN_rgnET_202 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_202.dat";
       AUTOTB_TVIN_rgnET_203 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_203.dat";
       AUTOTB_TVIN_rgnET_204 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_204.dat";
       AUTOTB_TVIN_rgnET_205 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_205.dat";
       AUTOTB_TVIN_rgnET_206 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_206.dat";
       AUTOTB_TVIN_rgnET_207 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_207.dat";
       AUTOTB_TVIN_rgnET_208 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_208.dat";
       AUTOTB_TVIN_rgnET_209 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_209.dat";
       AUTOTB_TVIN_rgnET_210 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_210.dat";
       AUTOTB_TVIN_rgnET_211 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_211.dat";
       AUTOTB_TVIN_rgnET_212 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_212.dat";
       AUTOTB_TVIN_rgnET_213 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_213.dat";
       AUTOTB_TVIN_rgnET_214 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_214.dat";
       AUTOTB_TVIN_rgnET_215 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_215.dat";
       AUTOTB_TVIN_rgnET_216 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_216.dat";
       AUTOTB_TVIN_rgnET_217 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_217.dat";
       AUTOTB_TVIN_rgnET_218 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_218.dat";
       AUTOTB_TVIN_rgnET_219 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_219.dat";
       AUTOTB_TVIN_rgnET_220 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_220.dat";
       AUTOTB_TVIN_rgnET_221 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_221.dat";
       AUTOTB_TVIN_rgnET_222 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_222.dat";
       AUTOTB_TVIN_rgnET_223 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_223.dat";
       AUTOTB_TVIN_rgnET_224 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_224.dat";
       AUTOTB_TVIN_rgnET_225 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_225.dat";
       AUTOTB_TVIN_rgnET_226 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_226.dat";
       AUTOTB_TVIN_rgnET_227 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_227.dat";
       AUTOTB_TVIN_rgnET_228 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_228.dat";
       AUTOTB_TVIN_rgnET_229 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_229.dat";
       AUTOTB_TVIN_rgnET_230 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_230.dat";
       AUTOTB_TVIN_rgnET_231 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_231.dat";
       AUTOTB_TVIN_rgnET_232 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_232.dat";
       AUTOTB_TVIN_rgnET_233 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_233.dat";
       AUTOTB_TVIN_rgnET_234 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_234.dat";
       AUTOTB_TVIN_rgnET_235 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_235.dat";
       AUTOTB_TVIN_rgnET_236 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_236.dat";
       AUTOTB_TVIN_rgnET_237 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_237.dat";
       AUTOTB_TVIN_rgnET_238 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_238.dat";
       AUTOTB_TVIN_rgnET_239 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_239.dat";
       AUTOTB_TVIN_rgnET_240 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_240.dat";
       AUTOTB_TVIN_rgnET_241 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_241.dat";
       AUTOTB_TVIN_rgnET_242 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_242.dat";
       AUTOTB_TVIN_rgnET_243 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_243.dat";
       AUTOTB_TVIN_rgnET_244 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_244.dat";
       AUTOTB_TVIN_rgnET_245 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_245.dat";
       AUTOTB_TVIN_rgnET_246 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_246.dat";
       AUTOTB_TVIN_rgnET_247 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_247.dat";
       AUTOTB_TVIN_rgnET_248 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_248.dat";
       AUTOTB_TVIN_rgnET_249 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_249.dat";
       AUTOTB_TVIN_rgnET_250 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_250.dat";
       AUTOTB_TVIN_rgnET_251 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_rgnET_251.dat";
       AUTOTB_TVIN_hfET_0 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_0.dat";
       AUTOTB_TVIN_hfET_1 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_1.dat";
       AUTOTB_TVIN_hfET_2 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_2.dat";
       AUTOTB_TVIN_hfET_3 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_3.dat";
       AUTOTB_TVIN_hfET_4 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_4.dat";
       AUTOTB_TVIN_hfET_5 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_5.dat";
       AUTOTB_TVIN_hfET_6 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_6.dat";
       AUTOTB_TVIN_hfET_7 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_7.dat";
       AUTOTB_TVIN_hfET_8 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_8.dat";
       AUTOTB_TVIN_hfET_9 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_9.dat";
       AUTOTB_TVIN_hfET_10 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_10.dat";
       AUTOTB_TVIN_hfET_11 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_11.dat";
       AUTOTB_TVIN_hfET_12 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_12.dat";
       AUTOTB_TVIN_hfET_13 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_13.dat";
       AUTOTB_TVIN_hfET_14 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_14.dat";
       AUTOTB_TVIN_hfET_15 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_15.dat";
       AUTOTB_TVIN_hfET_16 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_16.dat";
       AUTOTB_TVIN_hfET_17 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_17.dat";
       AUTOTB_TVIN_hfET_18 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_18.dat";
       AUTOTB_TVIN_hfET_19 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_19.dat";
       AUTOTB_TVIN_hfET_20 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_20.dat";
       AUTOTB_TVIN_hfET_21 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_21.dat";
       AUTOTB_TVIN_hfET_22 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_22.dat";
       AUTOTB_TVIN_hfET_23 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_23.dat";
       AUTOTB_TVIN_hfET_24 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_24.dat";
       AUTOTB_TVIN_hfET_25 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_25.dat";
       AUTOTB_TVIN_hfET_26 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_26.dat";
       AUTOTB_TVIN_hfET_27 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_27.dat";
       AUTOTB_TVIN_hfET_28 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_28.dat";
       AUTOTB_TVIN_hfET_29 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_29.dat";
       AUTOTB_TVIN_hfET_30 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_30.dat";
       AUTOTB_TVIN_hfET_31 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_31.dat";
       AUTOTB_TVIN_hfET_32 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_32.dat";
       AUTOTB_TVIN_hfET_33 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_33.dat";
       AUTOTB_TVIN_hfET_34 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_34.dat";
       AUTOTB_TVIN_hfET_35 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_35.dat";
       AUTOTB_TVIN_hfET_36 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_36.dat";
       AUTOTB_TVIN_hfET_37 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_37.dat";
       AUTOTB_TVIN_hfET_38 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_38.dat";
       AUTOTB_TVIN_hfET_39 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_39.dat";
       AUTOTB_TVIN_hfET_40 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_40.dat";
       AUTOTB_TVIN_hfET_41 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_41.dat";
       AUTOTB_TVIN_hfET_42 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_42.dat";
       AUTOTB_TVIN_hfET_43 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_43.dat";
       AUTOTB_TVIN_hfET_44 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_44.dat";
       AUTOTB_TVIN_hfET_45 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_45.dat";
       AUTOTB_TVIN_hfET_46 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_46.dat";
       AUTOTB_TVIN_hfET_47 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_47.dat";
       AUTOTB_TVIN_hfET_48 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_48.dat";
       AUTOTB_TVIN_hfET_49 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_49.dat";
       AUTOTB_TVIN_hfET_50 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_50.dat";
       AUTOTB_TVIN_hfET_51 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_51.dat";
       AUTOTB_TVIN_hfET_52 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_52.dat";
       AUTOTB_TVIN_hfET_53 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_53.dat";
       AUTOTB_TVIN_hfET_54 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_54.dat";
       AUTOTB_TVIN_hfET_55 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_55.dat";
       AUTOTB_TVIN_hfET_56 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_56.dat";
       AUTOTB_TVIN_hfET_57 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_57.dat";
       AUTOTB_TVIN_hfET_58 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_58.dat";
       AUTOTB_TVIN_hfET_59 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_59.dat";
       AUTOTB_TVIN_hfET_60 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_60.dat";
       AUTOTB_TVIN_hfET_61 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_61.dat";
       AUTOTB_TVIN_hfET_62 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_62.dat";
       AUTOTB_TVIN_hfET_63 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_63.dat";
       AUTOTB_TVIN_hfET_64 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_64.dat";
       AUTOTB_TVIN_hfET_65 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_65.dat";
       AUTOTB_TVIN_hfET_66 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_66.dat";
       AUTOTB_TVIN_hfET_67 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_67.dat";
       AUTOTB_TVIN_hfET_68 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_68.dat";
       AUTOTB_TVIN_hfET_69 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_69.dat";
       AUTOTB_TVIN_hfET_70 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_70.dat";
       AUTOTB_TVIN_hfET_71 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_71.dat";
       AUTOTB_TVIN_hfET_72 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_72.dat";
       AUTOTB_TVIN_hfET_73 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_73.dat";
       AUTOTB_TVIN_hfET_74 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_74.dat";
       AUTOTB_TVIN_hfET_75 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_75.dat";
       AUTOTB_TVIN_hfET_76 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_76.dat";
       AUTOTB_TVIN_hfET_77 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_77.dat";
       AUTOTB_TVIN_hfET_78 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_78.dat";
       AUTOTB_TVIN_hfET_79 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_79.dat";
       AUTOTB_TVIN_hfET_80 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_80.dat";
       AUTOTB_TVIN_hfET_81 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_81.dat";
       AUTOTB_TVIN_hfET_82 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_82.dat";
       AUTOTB_TVIN_hfET_83 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_83.dat";
       AUTOTB_TVIN_hfET_84 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_84.dat";
       AUTOTB_TVIN_hfET_85 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_85.dat";
       AUTOTB_TVIN_hfET_86 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_86.dat";
       AUTOTB_TVIN_hfET_87 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_87.dat";
       AUTOTB_TVIN_hfET_88 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_88.dat";
       AUTOTB_TVIN_hfET_89 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_89.dat";
       AUTOTB_TVIN_hfET_90 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_90.dat";
       AUTOTB_TVIN_hfET_91 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_91.dat";
       AUTOTB_TVIN_hfET_92 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_92.dat";
       AUTOTB_TVIN_hfET_93 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_93.dat";
       AUTOTB_TVIN_hfET_94 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_94.dat";
       AUTOTB_TVIN_hfET_95 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_95.dat";
       AUTOTB_TVIN_hfET_96 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_96.dat";
       AUTOTB_TVIN_hfET_97 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_97.dat";
       AUTOTB_TVIN_hfET_98 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_98.dat";
       AUTOTB_TVIN_hfET_99 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_99.dat";
       AUTOTB_TVIN_hfET_100 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_100.dat";
       AUTOTB_TVIN_hfET_101 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_101.dat";
       AUTOTB_TVIN_hfET_102 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_102.dat";
       AUTOTB_TVIN_hfET_103 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_103.dat";
       AUTOTB_TVIN_hfET_104 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_104.dat";
       AUTOTB_TVIN_hfET_105 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_105.dat";
       AUTOTB_TVIN_hfET_106 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_106.dat";
       AUTOTB_TVIN_hfET_107 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_107.dat";
       AUTOTB_TVIN_hfET_108 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_108.dat";
       AUTOTB_TVIN_hfET_109 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_109.dat";
       AUTOTB_TVIN_hfET_110 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_110.dat";
       AUTOTB_TVIN_hfET_111 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_111.dat";
       AUTOTB_TVIN_hfET_112 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_112.dat";
       AUTOTB_TVIN_hfET_113 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_113.dat";
       AUTOTB_TVIN_hfET_114 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_114.dat";
       AUTOTB_TVIN_hfET_115 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_115.dat";
       AUTOTB_TVIN_hfET_116 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_116.dat";
       AUTOTB_TVIN_hfET_117 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_117.dat";
       AUTOTB_TVIN_hfET_118 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_118.dat";
       AUTOTB_TVIN_hfET_119 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_119.dat";
       AUTOTB_TVIN_hfET_120 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_120.dat";
       AUTOTB_TVIN_hfET_121 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_121.dat";
       AUTOTB_TVIN_hfET_122 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_122.dat";
       AUTOTB_TVIN_hfET_123 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_123.dat";
       AUTOTB_TVIN_hfET_124 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_124.dat";
       AUTOTB_TVIN_hfET_125 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_125.dat";
       AUTOTB_TVIN_hfET_126 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_126.dat";
       AUTOTB_TVIN_hfET_127 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_127.dat";
       AUTOTB_TVIN_hfET_128 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_128.dat";
       AUTOTB_TVIN_hfET_129 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_129.dat";
       AUTOTB_TVIN_hfET_130 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_130.dat";
       AUTOTB_TVIN_hfET_131 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_131.dat";
       AUTOTB_TVIN_hfET_132 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_132.dat";
       AUTOTB_TVIN_hfET_133 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_133.dat";
       AUTOTB_TVIN_hfET_134 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_134.dat";
       AUTOTB_TVIN_hfET_135 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_135.dat";
       AUTOTB_TVIN_hfET_136 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_136.dat";
       AUTOTB_TVIN_hfET_137 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_137.dat";
       AUTOTB_TVIN_hfET_138 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_138.dat";
       AUTOTB_TVIN_hfET_139 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_139.dat";
       AUTOTB_TVIN_hfET_140 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_140.dat";
       AUTOTB_TVIN_hfET_141 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_141.dat";
       AUTOTB_TVIN_hfET_142 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_142.dat";
       AUTOTB_TVIN_hfET_143 : STRING := "../tv/cdatafile/c.MakeHT.autotvin_hfET_143.dat";
       AUTOTB_TVIN_rgnET_0_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_0.dat";
       AUTOTB_TVIN_rgnET_1_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_1.dat";
       AUTOTB_TVIN_rgnET_2_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_2.dat";
       AUTOTB_TVIN_rgnET_3_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_3.dat";
       AUTOTB_TVIN_rgnET_4_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_4.dat";
       AUTOTB_TVIN_rgnET_5_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_5.dat";
       AUTOTB_TVIN_rgnET_6_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_6.dat";
       AUTOTB_TVIN_rgnET_7_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_7.dat";
       AUTOTB_TVIN_rgnET_8_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_8.dat";
       AUTOTB_TVIN_rgnET_9_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_9.dat";
       AUTOTB_TVIN_rgnET_10_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_10.dat";
       AUTOTB_TVIN_rgnET_11_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_11.dat";
       AUTOTB_TVIN_rgnET_12_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_12.dat";
       AUTOTB_TVIN_rgnET_13_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_13.dat";
       AUTOTB_TVIN_rgnET_14_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_14.dat";
       AUTOTB_TVIN_rgnET_15_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_15.dat";
       AUTOTB_TVIN_rgnET_16_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_16.dat";
       AUTOTB_TVIN_rgnET_17_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_17.dat";
       AUTOTB_TVIN_rgnET_18_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_18.dat";
       AUTOTB_TVIN_rgnET_19_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_19.dat";
       AUTOTB_TVIN_rgnET_20_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_20.dat";
       AUTOTB_TVIN_rgnET_21_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_21.dat";
       AUTOTB_TVIN_rgnET_22_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_22.dat";
       AUTOTB_TVIN_rgnET_23_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_23.dat";
       AUTOTB_TVIN_rgnET_24_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_24.dat";
       AUTOTB_TVIN_rgnET_25_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_25.dat";
       AUTOTB_TVIN_rgnET_26_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_26.dat";
       AUTOTB_TVIN_rgnET_27_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_27.dat";
       AUTOTB_TVIN_rgnET_28_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_28.dat";
       AUTOTB_TVIN_rgnET_29_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_29.dat";
       AUTOTB_TVIN_rgnET_30_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_30.dat";
       AUTOTB_TVIN_rgnET_31_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_31.dat";
       AUTOTB_TVIN_rgnET_32_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_32.dat";
       AUTOTB_TVIN_rgnET_33_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_33.dat";
       AUTOTB_TVIN_rgnET_34_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_34.dat";
       AUTOTB_TVIN_rgnET_35_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_35.dat";
       AUTOTB_TVIN_rgnET_36_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_36.dat";
       AUTOTB_TVIN_rgnET_37_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_37.dat";
       AUTOTB_TVIN_rgnET_38_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_38.dat";
       AUTOTB_TVIN_rgnET_39_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_39.dat";
       AUTOTB_TVIN_rgnET_40_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_40.dat";
       AUTOTB_TVIN_rgnET_41_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_41.dat";
       AUTOTB_TVIN_rgnET_42_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_42.dat";
       AUTOTB_TVIN_rgnET_43_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_43.dat";
       AUTOTB_TVIN_rgnET_44_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_44.dat";
       AUTOTB_TVIN_rgnET_45_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_45.dat";
       AUTOTB_TVIN_rgnET_46_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_46.dat";
       AUTOTB_TVIN_rgnET_47_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_47.dat";
       AUTOTB_TVIN_rgnET_48_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_48.dat";
       AUTOTB_TVIN_rgnET_49_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_49.dat";
       AUTOTB_TVIN_rgnET_50_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_50.dat";
       AUTOTB_TVIN_rgnET_51_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_51.dat";
       AUTOTB_TVIN_rgnET_52_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_52.dat";
       AUTOTB_TVIN_rgnET_53_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_53.dat";
       AUTOTB_TVIN_rgnET_54_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_54.dat";
       AUTOTB_TVIN_rgnET_55_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_55.dat";
       AUTOTB_TVIN_rgnET_56_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_56.dat";
       AUTOTB_TVIN_rgnET_57_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_57.dat";
       AUTOTB_TVIN_rgnET_58_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_58.dat";
       AUTOTB_TVIN_rgnET_59_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_59.dat";
       AUTOTB_TVIN_rgnET_60_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_60.dat";
       AUTOTB_TVIN_rgnET_61_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_61.dat";
       AUTOTB_TVIN_rgnET_62_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_62.dat";
       AUTOTB_TVIN_rgnET_63_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_63.dat";
       AUTOTB_TVIN_rgnET_64_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_64.dat";
       AUTOTB_TVIN_rgnET_65_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_65.dat";
       AUTOTB_TVIN_rgnET_66_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_66.dat";
       AUTOTB_TVIN_rgnET_67_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_67.dat";
       AUTOTB_TVIN_rgnET_68_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_68.dat";
       AUTOTB_TVIN_rgnET_69_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_69.dat";
       AUTOTB_TVIN_rgnET_70_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_70.dat";
       AUTOTB_TVIN_rgnET_71_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_71.dat";
       AUTOTB_TVIN_rgnET_72_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_72.dat";
       AUTOTB_TVIN_rgnET_73_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_73.dat";
       AUTOTB_TVIN_rgnET_74_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_74.dat";
       AUTOTB_TVIN_rgnET_75_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_75.dat";
       AUTOTB_TVIN_rgnET_76_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_76.dat";
       AUTOTB_TVIN_rgnET_77_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_77.dat";
       AUTOTB_TVIN_rgnET_78_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_78.dat";
       AUTOTB_TVIN_rgnET_79_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_79.dat";
       AUTOTB_TVIN_rgnET_80_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_80.dat";
       AUTOTB_TVIN_rgnET_81_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_81.dat";
       AUTOTB_TVIN_rgnET_82_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_82.dat";
       AUTOTB_TVIN_rgnET_83_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_83.dat";
       AUTOTB_TVIN_rgnET_84_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_84.dat";
       AUTOTB_TVIN_rgnET_85_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_85.dat";
       AUTOTB_TVIN_rgnET_86_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_86.dat";
       AUTOTB_TVIN_rgnET_87_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_87.dat";
       AUTOTB_TVIN_rgnET_88_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_88.dat";
       AUTOTB_TVIN_rgnET_89_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_89.dat";
       AUTOTB_TVIN_rgnET_90_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_90.dat";
       AUTOTB_TVIN_rgnET_91_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_91.dat";
       AUTOTB_TVIN_rgnET_92_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_92.dat";
       AUTOTB_TVIN_rgnET_93_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_93.dat";
       AUTOTB_TVIN_rgnET_94_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_94.dat";
       AUTOTB_TVIN_rgnET_95_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_95.dat";
       AUTOTB_TVIN_rgnET_96_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_96.dat";
       AUTOTB_TVIN_rgnET_97_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_97.dat";
       AUTOTB_TVIN_rgnET_98_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_98.dat";
       AUTOTB_TVIN_rgnET_99_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_99.dat";
       AUTOTB_TVIN_rgnET_100_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_100.dat";
       AUTOTB_TVIN_rgnET_101_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_101.dat";
       AUTOTB_TVIN_rgnET_102_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_102.dat";
       AUTOTB_TVIN_rgnET_103_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_103.dat";
       AUTOTB_TVIN_rgnET_104_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_104.dat";
       AUTOTB_TVIN_rgnET_105_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_105.dat";
       AUTOTB_TVIN_rgnET_106_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_106.dat";
       AUTOTB_TVIN_rgnET_107_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_107.dat";
       AUTOTB_TVIN_rgnET_108_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_108.dat";
       AUTOTB_TVIN_rgnET_109_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_109.dat";
       AUTOTB_TVIN_rgnET_110_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_110.dat";
       AUTOTB_TVIN_rgnET_111_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_111.dat";
       AUTOTB_TVIN_rgnET_112_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_112.dat";
       AUTOTB_TVIN_rgnET_113_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_113.dat";
       AUTOTB_TVIN_rgnET_114_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_114.dat";
       AUTOTB_TVIN_rgnET_115_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_115.dat";
       AUTOTB_TVIN_rgnET_116_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_116.dat";
       AUTOTB_TVIN_rgnET_117_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_117.dat";
       AUTOTB_TVIN_rgnET_118_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_118.dat";
       AUTOTB_TVIN_rgnET_119_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_119.dat";
       AUTOTB_TVIN_rgnET_120_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_120.dat";
       AUTOTB_TVIN_rgnET_121_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_121.dat";
       AUTOTB_TVIN_rgnET_122_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_122.dat";
       AUTOTB_TVIN_rgnET_123_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_123.dat";
       AUTOTB_TVIN_rgnET_124_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_124.dat";
       AUTOTB_TVIN_rgnET_125_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_125.dat";
       AUTOTB_TVIN_rgnET_126_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_126.dat";
       AUTOTB_TVIN_rgnET_127_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_127.dat";
       AUTOTB_TVIN_rgnET_128_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_128.dat";
       AUTOTB_TVIN_rgnET_129_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_129.dat";
       AUTOTB_TVIN_rgnET_130_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_130.dat";
       AUTOTB_TVIN_rgnET_131_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_131.dat";
       AUTOTB_TVIN_rgnET_132_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_132.dat";
       AUTOTB_TVIN_rgnET_133_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_133.dat";
       AUTOTB_TVIN_rgnET_134_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_134.dat";
       AUTOTB_TVIN_rgnET_135_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_135.dat";
       AUTOTB_TVIN_rgnET_136_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_136.dat";
       AUTOTB_TVIN_rgnET_137_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_137.dat";
       AUTOTB_TVIN_rgnET_138_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_138.dat";
       AUTOTB_TVIN_rgnET_139_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_139.dat";
       AUTOTB_TVIN_rgnET_140_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_140.dat";
       AUTOTB_TVIN_rgnET_141_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_141.dat";
       AUTOTB_TVIN_rgnET_142_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_142.dat";
       AUTOTB_TVIN_rgnET_143_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_143.dat";
       AUTOTB_TVIN_rgnET_144_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_144.dat";
       AUTOTB_TVIN_rgnET_145_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_145.dat";
       AUTOTB_TVIN_rgnET_146_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_146.dat";
       AUTOTB_TVIN_rgnET_147_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_147.dat";
       AUTOTB_TVIN_rgnET_148_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_148.dat";
       AUTOTB_TVIN_rgnET_149_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_149.dat";
       AUTOTB_TVIN_rgnET_150_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_150.dat";
       AUTOTB_TVIN_rgnET_151_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_151.dat";
       AUTOTB_TVIN_rgnET_152_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_152.dat";
       AUTOTB_TVIN_rgnET_153_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_153.dat";
       AUTOTB_TVIN_rgnET_154_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_154.dat";
       AUTOTB_TVIN_rgnET_155_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_155.dat";
       AUTOTB_TVIN_rgnET_156_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_156.dat";
       AUTOTB_TVIN_rgnET_157_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_157.dat";
       AUTOTB_TVIN_rgnET_158_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_158.dat";
       AUTOTB_TVIN_rgnET_159_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_159.dat";
       AUTOTB_TVIN_rgnET_160_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_160.dat";
       AUTOTB_TVIN_rgnET_161_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_161.dat";
       AUTOTB_TVIN_rgnET_162_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_162.dat";
       AUTOTB_TVIN_rgnET_163_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_163.dat";
       AUTOTB_TVIN_rgnET_164_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_164.dat";
       AUTOTB_TVIN_rgnET_165_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_165.dat";
       AUTOTB_TVIN_rgnET_166_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_166.dat";
       AUTOTB_TVIN_rgnET_167_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_167.dat";
       AUTOTB_TVIN_rgnET_168_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_168.dat";
       AUTOTB_TVIN_rgnET_169_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_169.dat";
       AUTOTB_TVIN_rgnET_170_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_170.dat";
       AUTOTB_TVIN_rgnET_171_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_171.dat";
       AUTOTB_TVIN_rgnET_172_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_172.dat";
       AUTOTB_TVIN_rgnET_173_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_173.dat";
       AUTOTB_TVIN_rgnET_174_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_174.dat";
       AUTOTB_TVIN_rgnET_175_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_175.dat";
       AUTOTB_TVIN_rgnET_176_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_176.dat";
       AUTOTB_TVIN_rgnET_177_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_177.dat";
       AUTOTB_TVIN_rgnET_178_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_178.dat";
       AUTOTB_TVIN_rgnET_179_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_179.dat";
       AUTOTB_TVIN_rgnET_180_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_180.dat";
       AUTOTB_TVIN_rgnET_181_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_181.dat";
       AUTOTB_TVIN_rgnET_182_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_182.dat";
       AUTOTB_TVIN_rgnET_183_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_183.dat";
       AUTOTB_TVIN_rgnET_184_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_184.dat";
       AUTOTB_TVIN_rgnET_185_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_185.dat";
       AUTOTB_TVIN_rgnET_186_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_186.dat";
       AUTOTB_TVIN_rgnET_187_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_187.dat";
       AUTOTB_TVIN_rgnET_188_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_188.dat";
       AUTOTB_TVIN_rgnET_189_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_189.dat";
       AUTOTB_TVIN_rgnET_190_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_190.dat";
       AUTOTB_TVIN_rgnET_191_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_191.dat";
       AUTOTB_TVIN_rgnET_192_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_192.dat";
       AUTOTB_TVIN_rgnET_193_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_193.dat";
       AUTOTB_TVIN_rgnET_194_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_194.dat";
       AUTOTB_TVIN_rgnET_195_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_195.dat";
       AUTOTB_TVIN_rgnET_196_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_196.dat";
       AUTOTB_TVIN_rgnET_197_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_197.dat";
       AUTOTB_TVIN_rgnET_198_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_198.dat";
       AUTOTB_TVIN_rgnET_199_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_199.dat";
       AUTOTB_TVIN_rgnET_200_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_200.dat";
       AUTOTB_TVIN_rgnET_201_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_201.dat";
       AUTOTB_TVIN_rgnET_202_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_202.dat";
       AUTOTB_TVIN_rgnET_203_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_203.dat";
       AUTOTB_TVIN_rgnET_204_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_204.dat";
       AUTOTB_TVIN_rgnET_205_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_205.dat";
       AUTOTB_TVIN_rgnET_206_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_206.dat";
       AUTOTB_TVIN_rgnET_207_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_207.dat";
       AUTOTB_TVIN_rgnET_208_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_208.dat";
       AUTOTB_TVIN_rgnET_209_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_209.dat";
       AUTOTB_TVIN_rgnET_210_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_210.dat";
       AUTOTB_TVIN_rgnET_211_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_211.dat";
       AUTOTB_TVIN_rgnET_212_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_212.dat";
       AUTOTB_TVIN_rgnET_213_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_213.dat";
       AUTOTB_TVIN_rgnET_214_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_214.dat";
       AUTOTB_TVIN_rgnET_215_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_215.dat";
       AUTOTB_TVIN_rgnET_216_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_216.dat";
       AUTOTB_TVIN_rgnET_217_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_217.dat";
       AUTOTB_TVIN_rgnET_218_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_218.dat";
       AUTOTB_TVIN_rgnET_219_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_219.dat";
       AUTOTB_TVIN_rgnET_220_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_220.dat";
       AUTOTB_TVIN_rgnET_221_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_221.dat";
       AUTOTB_TVIN_rgnET_222_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_222.dat";
       AUTOTB_TVIN_rgnET_223_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_223.dat";
       AUTOTB_TVIN_rgnET_224_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_224.dat";
       AUTOTB_TVIN_rgnET_225_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_225.dat";
       AUTOTB_TVIN_rgnET_226_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_226.dat";
       AUTOTB_TVIN_rgnET_227_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_227.dat";
       AUTOTB_TVIN_rgnET_228_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_228.dat";
       AUTOTB_TVIN_rgnET_229_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_229.dat";
       AUTOTB_TVIN_rgnET_230_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_230.dat";
       AUTOTB_TVIN_rgnET_231_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_231.dat";
       AUTOTB_TVIN_rgnET_232_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_232.dat";
       AUTOTB_TVIN_rgnET_233_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_233.dat";
       AUTOTB_TVIN_rgnET_234_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_234.dat";
       AUTOTB_TVIN_rgnET_235_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_235.dat";
       AUTOTB_TVIN_rgnET_236_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_236.dat";
       AUTOTB_TVIN_rgnET_237_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_237.dat";
       AUTOTB_TVIN_rgnET_238_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_238.dat";
       AUTOTB_TVIN_rgnET_239_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_239.dat";
       AUTOTB_TVIN_rgnET_240_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_240.dat";
       AUTOTB_TVIN_rgnET_241_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_241.dat";
       AUTOTB_TVIN_rgnET_242_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_242.dat";
       AUTOTB_TVIN_rgnET_243_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_243.dat";
       AUTOTB_TVIN_rgnET_244_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_244.dat";
       AUTOTB_TVIN_rgnET_245_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_245.dat";
       AUTOTB_TVIN_rgnET_246_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_246.dat";
       AUTOTB_TVIN_rgnET_247_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_247.dat";
       AUTOTB_TVIN_rgnET_248_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_248.dat";
       AUTOTB_TVIN_rgnET_249_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_249.dat";
       AUTOTB_TVIN_rgnET_250_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_250.dat";
       AUTOTB_TVIN_rgnET_251_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_rgnET_251.dat";
       AUTOTB_TVIN_hfET_0_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_0.dat";
       AUTOTB_TVIN_hfET_1_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_1.dat";
       AUTOTB_TVIN_hfET_2_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_2.dat";
       AUTOTB_TVIN_hfET_3_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_3.dat";
       AUTOTB_TVIN_hfET_4_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_4.dat";
       AUTOTB_TVIN_hfET_5_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_5.dat";
       AUTOTB_TVIN_hfET_6_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_6.dat";
       AUTOTB_TVIN_hfET_7_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_7.dat";
       AUTOTB_TVIN_hfET_8_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_8.dat";
       AUTOTB_TVIN_hfET_9_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_9.dat";
       AUTOTB_TVIN_hfET_10_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_10.dat";
       AUTOTB_TVIN_hfET_11_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_11.dat";
       AUTOTB_TVIN_hfET_12_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_12.dat";
       AUTOTB_TVIN_hfET_13_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_13.dat";
       AUTOTB_TVIN_hfET_14_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_14.dat";
       AUTOTB_TVIN_hfET_15_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_15.dat";
       AUTOTB_TVIN_hfET_16_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_16.dat";
       AUTOTB_TVIN_hfET_17_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_17.dat";
       AUTOTB_TVIN_hfET_18_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_18.dat";
       AUTOTB_TVIN_hfET_19_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_19.dat";
       AUTOTB_TVIN_hfET_20_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_20.dat";
       AUTOTB_TVIN_hfET_21_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_21.dat";
       AUTOTB_TVIN_hfET_22_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_22.dat";
       AUTOTB_TVIN_hfET_23_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_23.dat";
       AUTOTB_TVIN_hfET_24_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_24.dat";
       AUTOTB_TVIN_hfET_25_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_25.dat";
       AUTOTB_TVIN_hfET_26_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_26.dat";
       AUTOTB_TVIN_hfET_27_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_27.dat";
       AUTOTB_TVIN_hfET_28_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_28.dat";
       AUTOTB_TVIN_hfET_29_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_29.dat";
       AUTOTB_TVIN_hfET_30_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_30.dat";
       AUTOTB_TVIN_hfET_31_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_31.dat";
       AUTOTB_TVIN_hfET_32_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_32.dat";
       AUTOTB_TVIN_hfET_33_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_33.dat";
       AUTOTB_TVIN_hfET_34_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_34.dat";
       AUTOTB_TVIN_hfET_35_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_35.dat";
       AUTOTB_TVIN_hfET_36_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_36.dat";
       AUTOTB_TVIN_hfET_37_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_37.dat";
       AUTOTB_TVIN_hfET_38_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_38.dat";
       AUTOTB_TVIN_hfET_39_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_39.dat";
       AUTOTB_TVIN_hfET_40_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_40.dat";
       AUTOTB_TVIN_hfET_41_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_41.dat";
       AUTOTB_TVIN_hfET_42_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_42.dat";
       AUTOTB_TVIN_hfET_43_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_43.dat";
       AUTOTB_TVIN_hfET_44_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_44.dat";
       AUTOTB_TVIN_hfET_45_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_45.dat";
       AUTOTB_TVIN_hfET_46_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_46.dat";
       AUTOTB_TVIN_hfET_47_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_47.dat";
       AUTOTB_TVIN_hfET_48_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_48.dat";
       AUTOTB_TVIN_hfET_49_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_49.dat";
       AUTOTB_TVIN_hfET_50_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_50.dat";
       AUTOTB_TVIN_hfET_51_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_51.dat";
       AUTOTB_TVIN_hfET_52_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_52.dat";
       AUTOTB_TVIN_hfET_53_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_53.dat";
       AUTOTB_TVIN_hfET_54_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_54.dat";
       AUTOTB_TVIN_hfET_55_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_55.dat";
       AUTOTB_TVIN_hfET_56_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_56.dat";
       AUTOTB_TVIN_hfET_57_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_57.dat";
       AUTOTB_TVIN_hfET_58_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_58.dat";
       AUTOTB_TVIN_hfET_59_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_59.dat";
       AUTOTB_TVIN_hfET_60_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_60.dat";
       AUTOTB_TVIN_hfET_61_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_61.dat";
       AUTOTB_TVIN_hfET_62_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_62.dat";
       AUTOTB_TVIN_hfET_63_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_63.dat";
       AUTOTB_TVIN_hfET_64_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_64.dat";
       AUTOTB_TVIN_hfET_65_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_65.dat";
       AUTOTB_TVIN_hfET_66_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_66.dat";
       AUTOTB_TVIN_hfET_67_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_67.dat";
       AUTOTB_TVIN_hfET_68_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_68.dat";
       AUTOTB_TVIN_hfET_69_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_69.dat";
       AUTOTB_TVIN_hfET_70_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_70.dat";
       AUTOTB_TVIN_hfET_71_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_71.dat";
       AUTOTB_TVIN_hfET_72_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_72.dat";
       AUTOTB_TVIN_hfET_73_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_73.dat";
       AUTOTB_TVIN_hfET_74_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_74.dat";
       AUTOTB_TVIN_hfET_75_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_75.dat";
       AUTOTB_TVIN_hfET_76_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_76.dat";
       AUTOTB_TVIN_hfET_77_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_77.dat";
       AUTOTB_TVIN_hfET_78_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_78.dat";
       AUTOTB_TVIN_hfET_79_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_79.dat";
       AUTOTB_TVIN_hfET_80_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_80.dat";
       AUTOTB_TVIN_hfET_81_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_81.dat";
       AUTOTB_TVIN_hfET_82_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_82.dat";
       AUTOTB_TVIN_hfET_83_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_83.dat";
       AUTOTB_TVIN_hfET_84_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_84.dat";
       AUTOTB_TVIN_hfET_85_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_85.dat";
       AUTOTB_TVIN_hfET_86_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_86.dat";
       AUTOTB_TVIN_hfET_87_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_87.dat";
       AUTOTB_TVIN_hfET_88_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_88.dat";
       AUTOTB_TVIN_hfET_89_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_89.dat";
       AUTOTB_TVIN_hfET_90_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_90.dat";
       AUTOTB_TVIN_hfET_91_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_91.dat";
       AUTOTB_TVIN_hfET_92_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_92.dat";
       AUTOTB_TVIN_hfET_93_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_93.dat";
       AUTOTB_TVIN_hfET_94_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_94.dat";
       AUTOTB_TVIN_hfET_95_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_95.dat";
       AUTOTB_TVIN_hfET_96_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_96.dat";
       AUTOTB_TVIN_hfET_97_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_97.dat";
       AUTOTB_TVIN_hfET_98_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_98.dat";
       AUTOTB_TVIN_hfET_99_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_99.dat";
       AUTOTB_TVIN_hfET_100_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_100.dat";
       AUTOTB_TVIN_hfET_101_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_101.dat";
       AUTOTB_TVIN_hfET_102_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_102.dat";
       AUTOTB_TVIN_hfET_103_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_103.dat";
       AUTOTB_TVIN_hfET_104_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_104.dat";
       AUTOTB_TVIN_hfET_105_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_105.dat";
       AUTOTB_TVIN_hfET_106_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_106.dat";
       AUTOTB_TVIN_hfET_107_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_107.dat";
       AUTOTB_TVIN_hfET_108_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_108.dat";
       AUTOTB_TVIN_hfET_109_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_109.dat";
       AUTOTB_TVIN_hfET_110_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_110.dat";
       AUTOTB_TVIN_hfET_111_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_111.dat";
       AUTOTB_TVIN_hfET_112_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_112.dat";
       AUTOTB_TVIN_hfET_113_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_113.dat";
       AUTOTB_TVIN_hfET_114_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_114.dat";
       AUTOTB_TVIN_hfET_115_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_115.dat";
       AUTOTB_TVIN_hfET_116_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_116.dat";
       AUTOTB_TVIN_hfET_117_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_117.dat";
       AUTOTB_TVIN_hfET_118_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_118.dat";
       AUTOTB_TVIN_hfET_119_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_119.dat";
       AUTOTB_TVIN_hfET_120_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_120.dat";
       AUTOTB_TVIN_hfET_121_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_121.dat";
       AUTOTB_TVIN_hfET_122_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_122.dat";
       AUTOTB_TVIN_hfET_123_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_123.dat";
       AUTOTB_TVIN_hfET_124_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_124.dat";
       AUTOTB_TVIN_hfET_125_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_125.dat";
       AUTOTB_TVIN_hfET_126_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_126.dat";
       AUTOTB_TVIN_hfET_127_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_127.dat";
       AUTOTB_TVIN_hfET_128_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_128.dat";
       AUTOTB_TVIN_hfET_129_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_129.dat";
       AUTOTB_TVIN_hfET_130_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_130.dat";
       AUTOTB_TVIN_hfET_131_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_131.dat";
       AUTOTB_TVIN_hfET_132_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_132.dat";
       AUTOTB_TVIN_hfET_133_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_133.dat";
       AUTOTB_TVIN_hfET_134_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_134.dat";
       AUTOTB_TVIN_hfET_135_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_135.dat";
       AUTOTB_TVIN_hfET_136_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_136.dat";
       AUTOTB_TVIN_hfET_137_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_137.dat";
       AUTOTB_TVIN_hfET_138_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_138.dat";
       AUTOTB_TVIN_hfET_139_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_139.dat";
       AUTOTB_TVIN_hfET_140_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_140.dat";
       AUTOTB_TVIN_hfET_141_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_141.dat";
       AUTOTB_TVIN_hfET_142_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_142.dat";
       AUTOTB_TVIN_hfET_143_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvin_hfET_143.dat";
       AUTOTB_TVOUT_HT_0 : STRING := "../tv/cdatafile/c.MakeHT.autotvout_HT_0.dat";
       AUTOTB_TVOUT_HT_1 : STRING := "../tv/cdatafile/c.MakeHT.autotvout_HT_1.dat";
       AUTOTB_TVOUT_HT_2 : STRING := "../tv/cdatafile/c.MakeHT.autotvout_HT_2.dat";
       AUTOTB_TVOUT_HT_0_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvout_HT_0.dat";
       AUTOTB_TVOUT_HT_1_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvout_HT_1.dat";
       AUTOTB_TVOUT_HT_2_out_wrapc : STRING := "../tv/rtldatafile/rtl.MakeHT.autotvout_HT_2.dat";
      AUTOTB_LAT_RESULT_FILE    : STRING  := "MakeHT.result.lat.rb";
      AUTOTB_PER_RESULT_TRANS_FILE    : STRING  := "MakeHT.performance.result.transaction.xml";
      LENGTH_rgnET_0     : INTEGER := 1;
      LENGTH_rgnET_1     : INTEGER := 1;
      LENGTH_rgnET_2     : INTEGER := 1;
      LENGTH_rgnET_3     : INTEGER := 1;
      LENGTH_rgnET_4     : INTEGER := 1;
      LENGTH_rgnET_5     : INTEGER := 1;
      LENGTH_rgnET_6     : INTEGER := 1;
      LENGTH_rgnET_7     : INTEGER := 1;
      LENGTH_rgnET_8     : INTEGER := 1;
      LENGTH_rgnET_9     : INTEGER := 1;
      LENGTH_rgnET_10     : INTEGER := 1;
      LENGTH_rgnET_11     : INTEGER := 1;
      LENGTH_rgnET_12     : INTEGER := 1;
      LENGTH_rgnET_13     : INTEGER := 1;
      LENGTH_rgnET_14     : INTEGER := 1;
      LENGTH_rgnET_15     : INTEGER := 1;
      LENGTH_rgnET_16     : INTEGER := 1;
      LENGTH_rgnET_17     : INTEGER := 1;
      LENGTH_rgnET_18     : INTEGER := 1;
      LENGTH_rgnET_19     : INTEGER := 1;
      LENGTH_rgnET_20     : INTEGER := 1;
      LENGTH_rgnET_21     : INTEGER := 1;
      LENGTH_rgnET_22     : INTEGER := 1;
      LENGTH_rgnET_23     : INTEGER := 1;
      LENGTH_rgnET_24     : INTEGER := 1;
      LENGTH_rgnET_25     : INTEGER := 1;
      LENGTH_rgnET_26     : INTEGER := 1;
      LENGTH_rgnET_27     : INTEGER := 1;
      LENGTH_rgnET_28     : INTEGER := 1;
      LENGTH_rgnET_29     : INTEGER := 1;
      LENGTH_rgnET_30     : INTEGER := 1;
      LENGTH_rgnET_31     : INTEGER := 1;
      LENGTH_rgnET_32     : INTEGER := 1;
      LENGTH_rgnET_33     : INTEGER := 1;
      LENGTH_rgnET_34     : INTEGER := 1;
      LENGTH_rgnET_35     : INTEGER := 1;
      LENGTH_rgnET_36     : INTEGER := 1;
      LENGTH_rgnET_37     : INTEGER := 1;
      LENGTH_rgnET_38     : INTEGER := 1;
      LENGTH_rgnET_39     : INTEGER := 1;
      LENGTH_rgnET_40     : INTEGER := 1;
      LENGTH_rgnET_41     : INTEGER := 1;
      LENGTH_rgnET_42     : INTEGER := 1;
      LENGTH_rgnET_43     : INTEGER := 1;
      LENGTH_rgnET_44     : INTEGER := 1;
      LENGTH_rgnET_45     : INTEGER := 1;
      LENGTH_rgnET_46     : INTEGER := 1;
      LENGTH_rgnET_47     : INTEGER := 1;
      LENGTH_rgnET_48     : INTEGER := 1;
      LENGTH_rgnET_49     : INTEGER := 1;
      LENGTH_rgnET_50     : INTEGER := 1;
      LENGTH_rgnET_51     : INTEGER := 1;
      LENGTH_rgnET_52     : INTEGER := 1;
      LENGTH_rgnET_53     : INTEGER := 1;
      LENGTH_rgnET_54     : INTEGER := 1;
      LENGTH_rgnET_55     : INTEGER := 1;
      LENGTH_rgnET_56     : INTEGER := 1;
      LENGTH_rgnET_57     : INTEGER := 1;
      LENGTH_rgnET_58     : INTEGER := 1;
      LENGTH_rgnET_59     : INTEGER := 1;
      LENGTH_rgnET_60     : INTEGER := 1;
      LENGTH_rgnET_61     : INTEGER := 1;
      LENGTH_rgnET_62     : INTEGER := 1;
      LENGTH_rgnET_63     : INTEGER := 1;
      LENGTH_rgnET_64     : INTEGER := 1;
      LENGTH_rgnET_65     : INTEGER := 1;
      LENGTH_rgnET_66     : INTEGER := 1;
      LENGTH_rgnET_67     : INTEGER := 1;
      LENGTH_rgnET_68     : INTEGER := 1;
      LENGTH_rgnET_69     : INTEGER := 1;
      LENGTH_rgnET_70     : INTEGER := 1;
      LENGTH_rgnET_71     : INTEGER := 1;
      LENGTH_rgnET_72     : INTEGER := 1;
      LENGTH_rgnET_73     : INTEGER := 1;
      LENGTH_rgnET_74     : INTEGER := 1;
      LENGTH_rgnET_75     : INTEGER := 1;
      LENGTH_rgnET_76     : INTEGER := 1;
      LENGTH_rgnET_77     : INTEGER := 1;
      LENGTH_rgnET_78     : INTEGER := 1;
      LENGTH_rgnET_79     : INTEGER := 1;
      LENGTH_rgnET_80     : INTEGER := 1;
      LENGTH_rgnET_81     : INTEGER := 1;
      LENGTH_rgnET_82     : INTEGER := 1;
      LENGTH_rgnET_83     : INTEGER := 1;
      LENGTH_rgnET_84     : INTEGER := 1;
      LENGTH_rgnET_85     : INTEGER := 1;
      LENGTH_rgnET_86     : INTEGER := 1;
      LENGTH_rgnET_87     : INTEGER := 1;
      LENGTH_rgnET_88     : INTEGER := 1;
      LENGTH_rgnET_89     : INTEGER := 1;
      LENGTH_rgnET_90     : INTEGER := 1;
      LENGTH_rgnET_91     : INTEGER := 1;
      LENGTH_rgnET_92     : INTEGER := 1;
      LENGTH_rgnET_93     : INTEGER := 1;
      LENGTH_rgnET_94     : INTEGER := 1;
      LENGTH_rgnET_95     : INTEGER := 1;
      LENGTH_rgnET_96     : INTEGER := 1;
      LENGTH_rgnET_97     : INTEGER := 1;
      LENGTH_rgnET_98     : INTEGER := 1;
      LENGTH_rgnET_99     : INTEGER := 1;
      LENGTH_rgnET_100     : INTEGER := 1;
      LENGTH_rgnET_101     : INTEGER := 1;
      LENGTH_rgnET_102     : INTEGER := 1;
      LENGTH_rgnET_103     : INTEGER := 1;
      LENGTH_rgnET_104     : INTEGER := 1;
      LENGTH_rgnET_105     : INTEGER := 1;
      LENGTH_rgnET_106     : INTEGER := 1;
      LENGTH_rgnET_107     : INTEGER := 1;
      LENGTH_rgnET_108     : INTEGER := 1;
      LENGTH_rgnET_109     : INTEGER := 1;
      LENGTH_rgnET_110     : INTEGER := 1;
      LENGTH_rgnET_111     : INTEGER := 1;
      LENGTH_rgnET_112     : INTEGER := 1;
      LENGTH_rgnET_113     : INTEGER := 1;
      LENGTH_rgnET_114     : INTEGER := 1;
      LENGTH_rgnET_115     : INTEGER := 1;
      LENGTH_rgnET_116     : INTEGER := 1;
      LENGTH_rgnET_117     : INTEGER := 1;
      LENGTH_rgnET_118     : INTEGER := 1;
      LENGTH_rgnET_119     : INTEGER := 1;
      LENGTH_rgnET_120     : INTEGER := 1;
      LENGTH_rgnET_121     : INTEGER := 1;
      LENGTH_rgnET_122     : INTEGER := 1;
      LENGTH_rgnET_123     : INTEGER := 1;
      LENGTH_rgnET_124     : INTEGER := 1;
      LENGTH_rgnET_125     : INTEGER := 1;
      LENGTH_rgnET_126     : INTEGER := 1;
      LENGTH_rgnET_127     : INTEGER := 1;
      LENGTH_rgnET_128     : INTEGER := 1;
      LENGTH_rgnET_129     : INTEGER := 1;
      LENGTH_rgnET_130     : INTEGER := 1;
      LENGTH_rgnET_131     : INTEGER := 1;
      LENGTH_rgnET_132     : INTEGER := 1;
      LENGTH_rgnET_133     : INTEGER := 1;
      LENGTH_rgnET_134     : INTEGER := 1;
      LENGTH_rgnET_135     : INTEGER := 1;
      LENGTH_rgnET_136     : INTEGER := 1;
      LENGTH_rgnET_137     : INTEGER := 1;
      LENGTH_rgnET_138     : INTEGER := 1;
      LENGTH_rgnET_139     : INTEGER := 1;
      LENGTH_rgnET_140     : INTEGER := 1;
      LENGTH_rgnET_141     : INTEGER := 1;
      LENGTH_rgnET_142     : INTEGER := 1;
      LENGTH_rgnET_143     : INTEGER := 1;
      LENGTH_rgnET_144     : INTEGER := 1;
      LENGTH_rgnET_145     : INTEGER := 1;
      LENGTH_rgnET_146     : INTEGER := 1;
      LENGTH_rgnET_147     : INTEGER := 1;
      LENGTH_rgnET_148     : INTEGER := 1;
      LENGTH_rgnET_149     : INTEGER := 1;
      LENGTH_rgnET_150     : INTEGER := 1;
      LENGTH_rgnET_151     : INTEGER := 1;
      LENGTH_rgnET_152     : INTEGER := 1;
      LENGTH_rgnET_153     : INTEGER := 1;
      LENGTH_rgnET_154     : INTEGER := 1;
      LENGTH_rgnET_155     : INTEGER := 1;
      LENGTH_rgnET_156     : INTEGER := 1;
      LENGTH_rgnET_157     : INTEGER := 1;
      LENGTH_rgnET_158     : INTEGER := 1;
      LENGTH_rgnET_159     : INTEGER := 1;
      LENGTH_rgnET_160     : INTEGER := 1;
      LENGTH_rgnET_161     : INTEGER := 1;
      LENGTH_rgnET_162     : INTEGER := 1;
      LENGTH_rgnET_163     : INTEGER := 1;
      LENGTH_rgnET_164     : INTEGER := 1;
      LENGTH_rgnET_165     : INTEGER := 1;
      LENGTH_rgnET_166     : INTEGER := 1;
      LENGTH_rgnET_167     : INTEGER := 1;
      LENGTH_rgnET_168     : INTEGER := 1;
      LENGTH_rgnET_169     : INTEGER := 1;
      LENGTH_rgnET_170     : INTEGER := 1;
      LENGTH_rgnET_171     : INTEGER := 1;
      LENGTH_rgnET_172     : INTEGER := 1;
      LENGTH_rgnET_173     : INTEGER := 1;
      LENGTH_rgnET_174     : INTEGER := 1;
      LENGTH_rgnET_175     : INTEGER := 1;
      LENGTH_rgnET_176     : INTEGER := 1;
      LENGTH_rgnET_177     : INTEGER := 1;
      LENGTH_rgnET_178     : INTEGER := 1;
      LENGTH_rgnET_179     : INTEGER := 1;
      LENGTH_rgnET_180     : INTEGER := 1;
      LENGTH_rgnET_181     : INTEGER := 1;
      LENGTH_rgnET_182     : INTEGER := 1;
      LENGTH_rgnET_183     : INTEGER := 1;
      LENGTH_rgnET_184     : INTEGER := 1;
      LENGTH_rgnET_185     : INTEGER := 1;
      LENGTH_rgnET_186     : INTEGER := 1;
      LENGTH_rgnET_187     : INTEGER := 1;
      LENGTH_rgnET_188     : INTEGER := 1;
      LENGTH_rgnET_189     : INTEGER := 1;
      LENGTH_rgnET_190     : INTEGER := 1;
      LENGTH_rgnET_191     : INTEGER := 1;
      LENGTH_rgnET_192     : INTEGER := 1;
      LENGTH_rgnET_193     : INTEGER := 1;
      LENGTH_rgnET_194     : INTEGER := 1;
      LENGTH_rgnET_195     : INTEGER := 1;
      LENGTH_rgnET_196     : INTEGER := 1;
      LENGTH_rgnET_197     : INTEGER := 1;
      LENGTH_rgnET_198     : INTEGER := 1;
      LENGTH_rgnET_199     : INTEGER := 1;
      LENGTH_rgnET_200     : INTEGER := 1;
      LENGTH_rgnET_201     : INTEGER := 1;
      LENGTH_rgnET_202     : INTEGER := 1;
      LENGTH_rgnET_203     : INTEGER := 1;
      LENGTH_rgnET_204     : INTEGER := 1;
      LENGTH_rgnET_205     : INTEGER := 1;
      LENGTH_rgnET_206     : INTEGER := 1;
      LENGTH_rgnET_207     : INTEGER := 1;
      LENGTH_rgnET_208     : INTEGER := 1;
      LENGTH_rgnET_209     : INTEGER := 1;
      LENGTH_rgnET_210     : INTEGER := 1;
      LENGTH_rgnET_211     : INTEGER := 1;
      LENGTH_rgnET_212     : INTEGER := 1;
      LENGTH_rgnET_213     : INTEGER := 1;
      LENGTH_rgnET_214     : INTEGER := 1;
      LENGTH_rgnET_215     : INTEGER := 1;
      LENGTH_rgnET_216     : INTEGER := 1;
      LENGTH_rgnET_217     : INTEGER := 1;
      LENGTH_rgnET_218     : INTEGER := 1;
      LENGTH_rgnET_219     : INTEGER := 1;
      LENGTH_rgnET_220     : INTEGER := 1;
      LENGTH_rgnET_221     : INTEGER := 1;
      LENGTH_rgnET_222     : INTEGER := 1;
      LENGTH_rgnET_223     : INTEGER := 1;
      LENGTH_rgnET_224     : INTEGER := 1;
      LENGTH_rgnET_225     : INTEGER := 1;
      LENGTH_rgnET_226     : INTEGER := 1;
      LENGTH_rgnET_227     : INTEGER := 1;
      LENGTH_rgnET_228     : INTEGER := 1;
      LENGTH_rgnET_229     : INTEGER := 1;
      LENGTH_rgnET_230     : INTEGER := 1;
      LENGTH_rgnET_231     : INTEGER := 1;
      LENGTH_rgnET_232     : INTEGER := 1;
      LENGTH_rgnET_233     : INTEGER := 1;
      LENGTH_rgnET_234     : INTEGER := 1;
      LENGTH_rgnET_235     : INTEGER := 1;
      LENGTH_rgnET_236     : INTEGER := 1;
      LENGTH_rgnET_237     : INTEGER := 1;
      LENGTH_rgnET_238     : INTEGER := 1;
      LENGTH_rgnET_239     : INTEGER := 1;
      LENGTH_rgnET_240     : INTEGER := 1;
      LENGTH_rgnET_241     : INTEGER := 1;
      LENGTH_rgnET_242     : INTEGER := 1;
      LENGTH_rgnET_243     : INTEGER := 1;
      LENGTH_rgnET_244     : INTEGER := 1;
      LENGTH_rgnET_245     : INTEGER := 1;
      LENGTH_rgnET_246     : INTEGER := 1;
      LENGTH_rgnET_247     : INTEGER := 1;
      LENGTH_rgnET_248     : INTEGER := 1;
      LENGTH_rgnET_249     : INTEGER := 1;
      LENGTH_rgnET_250     : INTEGER := 1;
      LENGTH_rgnET_251     : INTEGER := 1;
      LENGTH_hfET_0     : INTEGER := 1;
      LENGTH_hfET_1     : INTEGER := 1;
      LENGTH_hfET_2     : INTEGER := 1;
      LENGTH_hfET_3     : INTEGER := 1;
      LENGTH_hfET_4     : INTEGER := 1;
      LENGTH_hfET_5     : INTEGER := 1;
      LENGTH_hfET_6     : INTEGER := 1;
      LENGTH_hfET_7     : INTEGER := 1;
      LENGTH_hfET_8     : INTEGER := 1;
      LENGTH_hfET_9     : INTEGER := 1;
      LENGTH_hfET_10     : INTEGER := 1;
      LENGTH_hfET_11     : INTEGER := 1;
      LENGTH_hfET_12     : INTEGER := 1;
      LENGTH_hfET_13     : INTEGER := 1;
      LENGTH_hfET_14     : INTEGER := 1;
      LENGTH_hfET_15     : INTEGER := 1;
      LENGTH_hfET_16     : INTEGER := 1;
      LENGTH_hfET_17     : INTEGER := 1;
      LENGTH_hfET_18     : INTEGER := 1;
      LENGTH_hfET_19     : INTEGER := 1;
      LENGTH_hfET_20     : INTEGER := 1;
      LENGTH_hfET_21     : INTEGER := 1;
      LENGTH_hfET_22     : INTEGER := 1;
      LENGTH_hfET_23     : INTEGER := 1;
      LENGTH_hfET_24     : INTEGER := 1;
      LENGTH_hfET_25     : INTEGER := 1;
      LENGTH_hfET_26     : INTEGER := 1;
      LENGTH_hfET_27     : INTEGER := 1;
      LENGTH_hfET_28     : INTEGER := 1;
      LENGTH_hfET_29     : INTEGER := 1;
      LENGTH_hfET_30     : INTEGER := 1;
      LENGTH_hfET_31     : INTEGER := 1;
      LENGTH_hfET_32     : INTEGER := 1;
      LENGTH_hfET_33     : INTEGER := 1;
      LENGTH_hfET_34     : INTEGER := 1;
      LENGTH_hfET_35     : INTEGER := 1;
      LENGTH_hfET_36     : INTEGER := 1;
      LENGTH_hfET_37     : INTEGER := 1;
      LENGTH_hfET_38     : INTEGER := 1;
      LENGTH_hfET_39     : INTEGER := 1;
      LENGTH_hfET_40     : INTEGER := 1;
      LENGTH_hfET_41     : INTEGER := 1;
      LENGTH_hfET_42     : INTEGER := 1;
      LENGTH_hfET_43     : INTEGER := 1;
      LENGTH_hfET_44     : INTEGER := 1;
      LENGTH_hfET_45     : INTEGER := 1;
      LENGTH_hfET_46     : INTEGER := 1;
      LENGTH_hfET_47     : INTEGER := 1;
      LENGTH_hfET_48     : INTEGER := 1;
      LENGTH_hfET_49     : INTEGER := 1;
      LENGTH_hfET_50     : INTEGER := 1;
      LENGTH_hfET_51     : INTEGER := 1;
      LENGTH_hfET_52     : INTEGER := 1;
      LENGTH_hfET_53     : INTEGER := 1;
      LENGTH_hfET_54     : INTEGER := 1;
      LENGTH_hfET_55     : INTEGER := 1;
      LENGTH_hfET_56     : INTEGER := 1;
      LENGTH_hfET_57     : INTEGER := 1;
      LENGTH_hfET_58     : INTEGER := 1;
      LENGTH_hfET_59     : INTEGER := 1;
      LENGTH_hfET_60     : INTEGER := 1;
      LENGTH_hfET_61     : INTEGER := 1;
      LENGTH_hfET_62     : INTEGER := 1;
      LENGTH_hfET_63     : INTEGER := 1;
      LENGTH_hfET_64     : INTEGER := 1;
      LENGTH_hfET_65     : INTEGER := 1;
      LENGTH_hfET_66     : INTEGER := 1;
      LENGTH_hfET_67     : INTEGER := 1;
      LENGTH_hfET_68     : INTEGER := 1;
      LENGTH_hfET_69     : INTEGER := 1;
      LENGTH_hfET_70     : INTEGER := 1;
      LENGTH_hfET_71     : INTEGER := 1;
      LENGTH_hfET_72     : INTEGER := 1;
      LENGTH_hfET_73     : INTEGER := 1;
      LENGTH_hfET_74     : INTEGER := 1;
      LENGTH_hfET_75     : INTEGER := 1;
      LENGTH_hfET_76     : INTEGER := 1;
      LENGTH_hfET_77     : INTEGER := 1;
      LENGTH_hfET_78     : INTEGER := 1;
      LENGTH_hfET_79     : INTEGER := 1;
      LENGTH_hfET_80     : INTEGER := 1;
      LENGTH_hfET_81     : INTEGER := 1;
      LENGTH_hfET_82     : INTEGER := 1;
      LENGTH_hfET_83     : INTEGER := 1;
      LENGTH_hfET_84     : INTEGER := 1;
      LENGTH_hfET_85     : INTEGER := 1;
      LENGTH_hfET_86     : INTEGER := 1;
      LENGTH_hfET_87     : INTEGER := 1;
      LENGTH_hfET_88     : INTEGER := 1;
      LENGTH_hfET_89     : INTEGER := 1;
      LENGTH_hfET_90     : INTEGER := 1;
      LENGTH_hfET_91     : INTEGER := 1;
      LENGTH_hfET_92     : INTEGER := 1;
      LENGTH_hfET_93     : INTEGER := 1;
      LENGTH_hfET_94     : INTEGER := 1;
      LENGTH_hfET_95     : INTEGER := 1;
      LENGTH_hfET_96     : INTEGER := 1;
      LENGTH_hfET_97     : INTEGER := 1;
      LENGTH_hfET_98     : INTEGER := 1;
      LENGTH_hfET_99     : INTEGER := 1;
      LENGTH_hfET_100     : INTEGER := 1;
      LENGTH_hfET_101     : INTEGER := 1;
      LENGTH_hfET_102     : INTEGER := 1;
      LENGTH_hfET_103     : INTEGER := 1;
      LENGTH_hfET_104     : INTEGER := 1;
      LENGTH_hfET_105     : INTEGER := 1;
      LENGTH_hfET_106     : INTEGER := 1;
      LENGTH_hfET_107     : INTEGER := 1;
      LENGTH_hfET_108     : INTEGER := 1;
      LENGTH_hfET_109     : INTEGER := 1;
      LENGTH_hfET_110     : INTEGER := 1;
      LENGTH_hfET_111     : INTEGER := 1;
      LENGTH_hfET_112     : INTEGER := 1;
      LENGTH_hfET_113     : INTEGER := 1;
      LENGTH_hfET_114     : INTEGER := 1;
      LENGTH_hfET_115     : INTEGER := 1;
      LENGTH_hfET_116     : INTEGER := 1;
      LENGTH_hfET_117     : INTEGER := 1;
      LENGTH_hfET_118     : INTEGER := 1;
      LENGTH_hfET_119     : INTEGER := 1;
      LENGTH_hfET_120     : INTEGER := 1;
      LENGTH_hfET_121     : INTEGER := 1;
      LENGTH_hfET_122     : INTEGER := 1;
      LENGTH_hfET_123     : INTEGER := 1;
      LENGTH_hfET_124     : INTEGER := 1;
      LENGTH_hfET_125     : INTEGER := 1;
      LENGTH_hfET_126     : INTEGER := 1;
      LENGTH_hfET_127     : INTEGER := 1;
      LENGTH_hfET_128     : INTEGER := 1;
      LENGTH_hfET_129     : INTEGER := 1;
      LENGTH_hfET_130     : INTEGER := 1;
      LENGTH_hfET_131     : INTEGER := 1;
      LENGTH_hfET_132     : INTEGER := 1;
      LENGTH_hfET_133     : INTEGER := 1;
      LENGTH_hfET_134     : INTEGER := 1;
      LENGTH_hfET_135     : INTEGER := 1;
      LENGTH_hfET_136     : INTEGER := 1;
      LENGTH_hfET_137     : INTEGER := 1;
      LENGTH_hfET_138     : INTEGER := 1;
      LENGTH_hfET_139     : INTEGER := 1;
      LENGTH_hfET_140     : INTEGER := 1;
      LENGTH_hfET_141     : INTEGER := 1;
      LENGTH_hfET_142     : INTEGER := 1;
      LENGTH_hfET_143     : INTEGER := 1;
      LENGTH_HT_0     : INTEGER := 1;
      LENGTH_HT_1     : INTEGER := 1;
      LENGTH_HT_2     : INTEGER := 1;
	    AUTOTB_TRANSACTION_NUM    : INTEGER := 170
);

end apatb_MakeHT_top;

architecture behav of apatb_MakeHT_top is 
  signal AESL_clock	:   STD_LOGIC := '0';
  signal rst  :   STD_LOGIC;
  signal start    :   STD_LOGIC := '0';
  signal ce       :   STD_LOGIC;
  signal continue :   STD_LOGIC := '0';
  signal AESL_reset :   STD_LOGIC := '0';
  signal AESL_start :   STD_LOGIC := '0';
  signal AESL_ce :   STD_LOGIC := '0';
  signal AESL_continue :   STD_LOGIC := '0';
  signal AESL_ready :   STD_LOGIC := '0';
  signal AESL_idle :   STD_LOGIC := '0';
  signal AESL_done :   STD_LOGIC := '0';
  signal AESL_done_delay :   STD_LOGIC := '0';
  signal AESL_done_delay2 :   STD_LOGIC := '0';
  signal AESL_ready_delay :   STD_LOGIC := '0';
  signal ready :   STD_LOGIC := '0';
  signal ready_wire :   STD_LOGIC := '0';

  signal ap_clk :  STD_LOGIC;
  signal ap_rst :  STD_LOGIC;
  signal ap_start :  STD_LOGIC;
  signal ap_done :  STD_LOGIC;
  signal ap_idle :  STD_LOGIC;
  signal ap_ready :  STD_LOGIC;
  signal rgnET_0 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_1 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_2 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_3 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_4 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_5 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_6 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_7 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_8 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_9 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_10 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_11 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_12 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_13 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_14 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_15 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_16 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_17 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_18 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_19 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_20 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_21 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_22 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_23 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_24 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_25 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_26 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_27 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_28 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_29 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_30 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_31 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_32 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_33 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_34 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_35 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_36 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_37 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_38 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_39 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_40 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_41 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_42 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_43 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_44 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_45 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_46 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_47 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_48 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_49 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_50 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_51 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_52 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_53 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_54 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_55 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_56 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_57 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_58 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_59 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_60 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_61 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_62 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_63 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_64 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_65 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_66 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_67 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_68 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_69 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_70 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_71 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_72 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_73 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_74 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_75 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_76 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_77 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_78 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_79 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_80 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_81 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_82 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_83 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_84 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_85 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_86 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_87 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_88 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_89 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_90 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_91 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_92 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_93 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_94 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_95 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_96 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_97 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_98 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_99 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_100 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_101 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_102 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_103 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_104 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_105 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_106 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_107 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_108 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_109 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_110 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_111 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_112 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_113 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_114 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_115 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_116 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_117 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_118 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_119 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_120 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_121 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_122 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_123 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_124 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_125 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_126 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_127 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_128 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_129 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_130 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_131 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_132 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_133 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_134 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_135 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_136 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_137 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_138 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_139 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_140 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_141 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_142 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_143 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_144 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_145 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_146 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_147 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_148 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_149 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_150 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_151 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_152 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_153 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_154 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_155 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_156 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_157 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_158 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_159 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_160 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_161 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_162 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_163 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_164 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_165 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_166 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_167 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_168 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_169 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_170 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_171 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_172 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_173 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_174 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_175 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_176 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_177 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_178 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_179 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_180 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_181 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_182 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_183 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_184 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_185 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_186 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_187 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_188 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_189 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_190 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_191 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_192 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_193 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_194 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_195 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_196 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_197 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_198 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_199 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_200 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_201 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_202 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_203 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_204 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_205 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_206 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_207 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_208 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_209 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_210 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_211 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_212 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_213 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_214 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_215 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_216 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_217 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_218 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_219 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_220 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_221 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_222 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_223 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_224 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_225 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_226 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_227 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_228 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_229 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_230 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_231 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_232 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_233 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_234 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_235 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_236 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_237 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_238 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_239 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_240 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_241 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_242 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_243 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_244 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_245 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_246 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_247 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_248 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_249 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_250 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal rgnET_251 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_0 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_1 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_2 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_3 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_4 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_5 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_6 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_7 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_8 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_9 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_10 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_11 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_12 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_13 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_14 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_15 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_16 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_17 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_18 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_19 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_20 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_21 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_22 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_23 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_24 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_25 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_26 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_27 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_28 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_29 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_30 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_31 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_32 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_33 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_34 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_35 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_36 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_37 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_38 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_39 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_40 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_41 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_42 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_43 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_44 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_45 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_46 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_47 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_48 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_49 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_50 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_51 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_52 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_53 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_54 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_55 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_56 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_57 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_58 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_59 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_60 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_61 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_62 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_63 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_64 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_65 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_66 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_67 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_68 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_69 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_70 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_71 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_72 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_73 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_74 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_75 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_76 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_77 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_78 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_79 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_80 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_81 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_82 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_83 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_84 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_85 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_86 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_87 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_88 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_89 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_90 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_91 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_92 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_93 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_94 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_95 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_96 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_97 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_98 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_99 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_100 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_101 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_102 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_103 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_104 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_105 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_106 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_107 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_108 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_109 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_110 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_111 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_112 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_113 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_114 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_115 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_116 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_117 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_118 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_119 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_120 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_121 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_122 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_123 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_124 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_125 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_126 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_127 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_128 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_129 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_130 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_131 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_132 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_133 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_134 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_135 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_136 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_137 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_138 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_139 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_140 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_141 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_142 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal hfET_143 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal HT_0 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal HT_1 :  STD_LOGIC_VECTOR (15 DOWNTO 0);
  signal HT_2 :  STD_LOGIC_VECTOR (15 DOWNTO 0);

  signal ready_cnt : STD_LOGIC_VECTOR(31 DOWNTO 0);
  signal done_cnt	: STD_LOGIC_VECTOR(31 DOWNTO 0);
  signal ready_initial  :	STD_LOGIC;
  signal ready_initial_n	:   STD_LOGIC;
  signal ready_last_n   :	STD_LOGIC;
  signal ready_delay_last_n	:   STD_LOGIC;
  signal done_delay_last_n	:   STD_LOGIC;
  signal interface_done :	STD_LOGIC := '0';
  -- Subtype for random state number, to prevent confusing it with true integers
  -- Top of range should be (2**31)-1 but this literal calculation causes overflow on 32-bit machines
  subtype T_RANDINT is integer range 1 to integer'high;

  type latency_record is array(0 to AUTOTB_TRANSACTION_NUM + 1) of INTEGER;
  shared variable AESL_mLatCnterIn : latency_record;
  shared variable AESL_mLatCnterOut : latency_record;
  shared variable AESL_mLatCnterIn_addr : INTEGER;
  shared variable AESL_mLatCnterOut_addr : INTEGER;
  shared variable AESL_clk_counter : INTEGER;
  signal reported_stuck : STD_LOGIC   := '0';
  shared variable reported_stuck_cnt : INTEGER := 0;
component MakeHT is
port (
    ap_clk :  IN STD_LOGIC;
    ap_rst :  IN STD_LOGIC;
    ap_start :  IN STD_LOGIC;
    ap_done :  OUT STD_LOGIC;
    ap_idle :  OUT STD_LOGIC;
    ap_ready :  OUT STD_LOGIC;
    rgnET_0 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_1 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_2 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_3 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_4 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_5 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_6 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_7 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_8 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_9 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_10 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_11 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_12 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_13 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_14 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_15 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_16 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_17 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_18 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_19 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_20 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_21 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_22 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_23 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_24 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_25 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_26 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_27 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_28 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_29 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_30 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_31 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_32 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_33 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_34 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_35 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_36 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_37 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_38 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_39 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_40 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_41 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_42 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_43 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_44 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_45 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_46 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_47 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_48 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_49 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_50 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_51 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_52 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_53 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_54 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_55 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_56 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_57 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_58 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_59 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_60 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_61 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_62 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_63 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_64 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_65 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_66 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_67 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_68 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_69 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_70 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_71 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_72 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_73 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_74 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_75 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_76 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_77 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_78 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_79 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_80 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_81 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_82 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_83 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_84 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_85 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_86 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_87 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_88 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_89 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_90 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_91 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_92 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_93 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_94 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_95 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_96 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_97 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_98 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_99 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_100 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_101 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_102 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_103 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_104 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_105 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_106 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_107 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_108 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_109 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_110 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_111 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_112 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_113 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_114 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_115 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_116 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_117 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_118 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_119 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_120 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_121 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_122 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_123 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_124 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_125 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_126 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_127 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_128 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_129 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_130 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_131 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_132 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_133 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_134 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_135 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_136 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_137 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_138 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_139 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_140 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_141 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_142 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_143 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_144 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_145 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_146 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_147 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_148 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_149 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_150 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_151 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_152 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_153 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_154 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_155 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_156 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_157 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_158 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_159 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_160 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_161 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_162 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_163 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_164 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_165 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_166 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_167 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_168 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_169 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_170 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_171 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_172 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_173 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_174 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_175 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_176 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_177 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_178 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_179 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_180 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_181 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_182 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_183 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_184 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_185 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_186 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_187 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_188 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_189 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_190 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_191 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_192 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_193 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_194 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_195 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_196 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_197 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_198 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_199 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_200 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_201 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_202 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_203 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_204 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_205 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_206 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_207 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_208 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_209 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_210 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_211 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_212 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_213 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_214 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_215 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_216 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_217 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_218 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_219 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_220 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_221 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_222 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_223 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_224 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_225 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_226 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_227 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_228 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_229 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_230 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_231 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_232 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_233 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_234 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_235 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_236 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_237 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_238 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_239 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_240 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_241 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_242 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_243 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_244 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_245 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_246 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_247 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_248 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_249 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_250 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    rgnET_251 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_0 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_1 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_2 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_3 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_4 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_5 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_6 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_7 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_8 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_9 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_10 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_11 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_12 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_13 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_14 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_15 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_16 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_17 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_18 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_19 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_20 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_21 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_22 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_23 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_24 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_25 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_26 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_27 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_28 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_29 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_30 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_31 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_32 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_33 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_34 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_35 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_36 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_37 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_38 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_39 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_40 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_41 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_42 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_43 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_44 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_45 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_46 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_47 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_48 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_49 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_50 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_51 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_52 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_53 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_54 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_55 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_56 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_57 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_58 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_59 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_60 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_61 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_62 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_63 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_64 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_65 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_66 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_67 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_68 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_69 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_70 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_71 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_72 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_73 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_74 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_75 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_76 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_77 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_78 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_79 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_80 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_81 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_82 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_83 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_84 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_85 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_86 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_87 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_88 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_89 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_90 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_91 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_92 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_93 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_94 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_95 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_96 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_97 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_98 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_99 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_100 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_101 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_102 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_103 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_104 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_105 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_106 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_107 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_108 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_109 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_110 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_111 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_112 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_113 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_114 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_115 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_116 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_117 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_118 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_119 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_120 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_121 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_122 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_123 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_124 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_125 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_126 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_127 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_128 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_129 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_130 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_131 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_132 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_133 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_134 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_135 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_136 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_137 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_138 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_139 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_140 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_141 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_142 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    hfET_143 :  IN STD_LOGIC_VECTOR (15 DOWNTO 0);
    HT_0 :  OUT STD_LOGIC_VECTOR (15 DOWNTO 0);
    HT_1 :  OUT STD_LOGIC_VECTOR (15 DOWNTO 0);
    HT_2 :  OUT STD_LOGIC_VECTOR (15 DOWNTO 0));
end component;

-- The signal of port rgnET_0
shared variable AESL_REG_rgnET_0 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_1
shared variable AESL_REG_rgnET_1 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_2
shared variable AESL_REG_rgnET_2 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_3
shared variable AESL_REG_rgnET_3 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_4
shared variable AESL_REG_rgnET_4 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_5
shared variable AESL_REG_rgnET_5 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_6
shared variable AESL_REG_rgnET_6 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_7
shared variable AESL_REG_rgnET_7 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_8
shared variable AESL_REG_rgnET_8 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_9
shared variable AESL_REG_rgnET_9 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_10
shared variable AESL_REG_rgnET_10 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_11
shared variable AESL_REG_rgnET_11 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_12
shared variable AESL_REG_rgnET_12 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_13
shared variable AESL_REG_rgnET_13 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_14
shared variable AESL_REG_rgnET_14 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_15
shared variable AESL_REG_rgnET_15 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_16
shared variable AESL_REG_rgnET_16 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_17
shared variable AESL_REG_rgnET_17 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_18
shared variable AESL_REG_rgnET_18 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_19
shared variable AESL_REG_rgnET_19 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_20
shared variable AESL_REG_rgnET_20 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_21
shared variable AESL_REG_rgnET_21 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_22
shared variable AESL_REG_rgnET_22 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_23
shared variable AESL_REG_rgnET_23 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_24
shared variable AESL_REG_rgnET_24 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_25
shared variable AESL_REG_rgnET_25 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_26
shared variable AESL_REG_rgnET_26 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_27
shared variable AESL_REG_rgnET_27 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_28
shared variable AESL_REG_rgnET_28 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_29
shared variable AESL_REG_rgnET_29 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_30
shared variable AESL_REG_rgnET_30 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_31
shared variable AESL_REG_rgnET_31 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_32
shared variable AESL_REG_rgnET_32 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_33
shared variable AESL_REG_rgnET_33 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_34
shared variable AESL_REG_rgnET_34 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_35
shared variable AESL_REG_rgnET_35 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_36
shared variable AESL_REG_rgnET_36 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_37
shared variable AESL_REG_rgnET_37 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_38
shared variable AESL_REG_rgnET_38 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_39
shared variable AESL_REG_rgnET_39 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_40
shared variable AESL_REG_rgnET_40 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_41
shared variable AESL_REG_rgnET_41 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_42
shared variable AESL_REG_rgnET_42 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_43
shared variable AESL_REG_rgnET_43 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_44
shared variable AESL_REG_rgnET_44 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_45
shared variable AESL_REG_rgnET_45 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_46
shared variable AESL_REG_rgnET_46 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_47
shared variable AESL_REG_rgnET_47 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_48
shared variable AESL_REG_rgnET_48 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_49
shared variable AESL_REG_rgnET_49 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_50
shared variable AESL_REG_rgnET_50 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_51
shared variable AESL_REG_rgnET_51 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_52
shared variable AESL_REG_rgnET_52 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_53
shared variable AESL_REG_rgnET_53 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_54
shared variable AESL_REG_rgnET_54 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_55
shared variable AESL_REG_rgnET_55 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_56
shared variable AESL_REG_rgnET_56 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_57
shared variable AESL_REG_rgnET_57 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_58
shared variable AESL_REG_rgnET_58 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_59
shared variable AESL_REG_rgnET_59 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_60
shared variable AESL_REG_rgnET_60 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_61
shared variable AESL_REG_rgnET_61 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_62
shared variable AESL_REG_rgnET_62 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_63
shared variable AESL_REG_rgnET_63 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_64
shared variable AESL_REG_rgnET_64 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_65
shared variable AESL_REG_rgnET_65 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_66
shared variable AESL_REG_rgnET_66 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_67
shared variable AESL_REG_rgnET_67 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_68
shared variable AESL_REG_rgnET_68 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_69
shared variable AESL_REG_rgnET_69 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_70
shared variable AESL_REG_rgnET_70 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_71
shared variable AESL_REG_rgnET_71 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_72
shared variable AESL_REG_rgnET_72 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_73
shared variable AESL_REG_rgnET_73 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_74
shared variable AESL_REG_rgnET_74 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_75
shared variable AESL_REG_rgnET_75 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_76
shared variable AESL_REG_rgnET_76 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_77
shared variable AESL_REG_rgnET_77 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_78
shared variable AESL_REG_rgnET_78 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_79
shared variable AESL_REG_rgnET_79 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_80
shared variable AESL_REG_rgnET_80 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_81
shared variable AESL_REG_rgnET_81 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_82
shared variable AESL_REG_rgnET_82 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_83
shared variable AESL_REG_rgnET_83 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_84
shared variable AESL_REG_rgnET_84 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_85
shared variable AESL_REG_rgnET_85 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_86
shared variable AESL_REG_rgnET_86 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_87
shared variable AESL_REG_rgnET_87 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_88
shared variable AESL_REG_rgnET_88 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_89
shared variable AESL_REG_rgnET_89 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_90
shared variable AESL_REG_rgnET_90 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_91
shared variable AESL_REG_rgnET_91 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_92
shared variable AESL_REG_rgnET_92 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_93
shared variable AESL_REG_rgnET_93 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_94
shared variable AESL_REG_rgnET_94 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_95
shared variable AESL_REG_rgnET_95 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_96
shared variable AESL_REG_rgnET_96 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_97
shared variable AESL_REG_rgnET_97 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_98
shared variable AESL_REG_rgnET_98 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_99
shared variable AESL_REG_rgnET_99 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_100
shared variable AESL_REG_rgnET_100 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_101
shared variable AESL_REG_rgnET_101 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_102
shared variable AESL_REG_rgnET_102 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_103
shared variable AESL_REG_rgnET_103 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_104
shared variable AESL_REG_rgnET_104 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_105
shared variable AESL_REG_rgnET_105 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_106
shared variable AESL_REG_rgnET_106 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_107
shared variable AESL_REG_rgnET_107 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_108
shared variable AESL_REG_rgnET_108 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_109
shared variable AESL_REG_rgnET_109 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_110
shared variable AESL_REG_rgnET_110 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_111
shared variable AESL_REG_rgnET_111 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_112
shared variable AESL_REG_rgnET_112 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_113
shared variable AESL_REG_rgnET_113 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_114
shared variable AESL_REG_rgnET_114 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_115
shared variable AESL_REG_rgnET_115 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_116
shared variable AESL_REG_rgnET_116 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_117
shared variable AESL_REG_rgnET_117 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_118
shared variable AESL_REG_rgnET_118 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_119
shared variable AESL_REG_rgnET_119 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_120
shared variable AESL_REG_rgnET_120 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_121
shared variable AESL_REG_rgnET_121 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_122
shared variable AESL_REG_rgnET_122 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_123
shared variable AESL_REG_rgnET_123 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_124
shared variable AESL_REG_rgnET_124 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_125
shared variable AESL_REG_rgnET_125 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_126
shared variable AESL_REG_rgnET_126 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_127
shared variable AESL_REG_rgnET_127 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_128
shared variable AESL_REG_rgnET_128 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_129
shared variable AESL_REG_rgnET_129 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_130
shared variable AESL_REG_rgnET_130 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_131
shared variable AESL_REG_rgnET_131 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_132
shared variable AESL_REG_rgnET_132 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_133
shared variable AESL_REG_rgnET_133 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_134
shared variable AESL_REG_rgnET_134 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_135
shared variable AESL_REG_rgnET_135 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_136
shared variable AESL_REG_rgnET_136 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_137
shared variable AESL_REG_rgnET_137 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_138
shared variable AESL_REG_rgnET_138 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_139
shared variable AESL_REG_rgnET_139 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_140
shared variable AESL_REG_rgnET_140 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_141
shared variable AESL_REG_rgnET_141 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_142
shared variable AESL_REG_rgnET_142 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_143
shared variable AESL_REG_rgnET_143 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_144
shared variable AESL_REG_rgnET_144 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_145
shared variable AESL_REG_rgnET_145 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_146
shared variable AESL_REG_rgnET_146 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_147
shared variable AESL_REG_rgnET_147 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_148
shared variable AESL_REG_rgnET_148 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_149
shared variable AESL_REG_rgnET_149 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_150
shared variable AESL_REG_rgnET_150 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_151
shared variable AESL_REG_rgnET_151 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_152
shared variable AESL_REG_rgnET_152 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_153
shared variable AESL_REG_rgnET_153 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_154
shared variable AESL_REG_rgnET_154 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_155
shared variable AESL_REG_rgnET_155 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_156
shared variable AESL_REG_rgnET_156 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_157
shared variable AESL_REG_rgnET_157 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_158
shared variable AESL_REG_rgnET_158 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_159
shared variable AESL_REG_rgnET_159 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_160
shared variable AESL_REG_rgnET_160 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_161
shared variable AESL_REG_rgnET_161 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_162
shared variable AESL_REG_rgnET_162 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_163
shared variable AESL_REG_rgnET_163 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_164
shared variable AESL_REG_rgnET_164 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_165
shared variable AESL_REG_rgnET_165 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_166
shared variable AESL_REG_rgnET_166 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_167
shared variable AESL_REG_rgnET_167 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_168
shared variable AESL_REG_rgnET_168 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_169
shared variable AESL_REG_rgnET_169 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_170
shared variable AESL_REG_rgnET_170 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_171
shared variable AESL_REG_rgnET_171 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_172
shared variable AESL_REG_rgnET_172 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_173
shared variable AESL_REG_rgnET_173 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_174
shared variable AESL_REG_rgnET_174 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_175
shared variable AESL_REG_rgnET_175 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_176
shared variable AESL_REG_rgnET_176 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_177
shared variable AESL_REG_rgnET_177 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_178
shared variable AESL_REG_rgnET_178 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_179
shared variable AESL_REG_rgnET_179 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_180
shared variable AESL_REG_rgnET_180 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_181
shared variable AESL_REG_rgnET_181 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_182
shared variable AESL_REG_rgnET_182 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_183
shared variable AESL_REG_rgnET_183 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_184
shared variable AESL_REG_rgnET_184 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_185
shared variable AESL_REG_rgnET_185 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_186
shared variable AESL_REG_rgnET_186 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_187
shared variable AESL_REG_rgnET_187 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_188
shared variable AESL_REG_rgnET_188 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_189
shared variable AESL_REG_rgnET_189 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_190
shared variable AESL_REG_rgnET_190 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_191
shared variable AESL_REG_rgnET_191 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_192
shared variable AESL_REG_rgnET_192 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_193
shared variable AESL_REG_rgnET_193 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_194
shared variable AESL_REG_rgnET_194 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_195
shared variable AESL_REG_rgnET_195 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_196
shared variable AESL_REG_rgnET_196 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_197
shared variable AESL_REG_rgnET_197 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_198
shared variable AESL_REG_rgnET_198 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_199
shared variable AESL_REG_rgnET_199 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_200
shared variable AESL_REG_rgnET_200 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_201
shared variable AESL_REG_rgnET_201 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_202
shared variable AESL_REG_rgnET_202 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_203
shared variable AESL_REG_rgnET_203 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_204
shared variable AESL_REG_rgnET_204 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_205
shared variable AESL_REG_rgnET_205 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_206
shared variable AESL_REG_rgnET_206 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_207
shared variable AESL_REG_rgnET_207 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_208
shared variable AESL_REG_rgnET_208 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_209
shared variable AESL_REG_rgnET_209 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_210
shared variable AESL_REG_rgnET_210 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_211
shared variable AESL_REG_rgnET_211 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_212
shared variable AESL_REG_rgnET_212 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_213
shared variable AESL_REG_rgnET_213 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_214
shared variable AESL_REG_rgnET_214 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_215
shared variable AESL_REG_rgnET_215 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_216
shared variable AESL_REG_rgnET_216 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_217
shared variable AESL_REG_rgnET_217 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_218
shared variable AESL_REG_rgnET_218 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_219
shared variable AESL_REG_rgnET_219 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_220
shared variable AESL_REG_rgnET_220 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_221
shared variable AESL_REG_rgnET_221 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_222
shared variable AESL_REG_rgnET_222 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_223
shared variable AESL_REG_rgnET_223 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_224
shared variable AESL_REG_rgnET_224 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_225
shared variable AESL_REG_rgnET_225 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_226
shared variable AESL_REG_rgnET_226 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_227
shared variable AESL_REG_rgnET_227 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_228
shared variable AESL_REG_rgnET_228 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_229
shared variable AESL_REG_rgnET_229 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_230
shared variable AESL_REG_rgnET_230 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_231
shared variable AESL_REG_rgnET_231 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_232
shared variable AESL_REG_rgnET_232 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_233
shared variable AESL_REG_rgnET_233 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_234
shared variable AESL_REG_rgnET_234 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_235
shared variable AESL_REG_rgnET_235 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_236
shared variable AESL_REG_rgnET_236 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_237
shared variable AESL_REG_rgnET_237 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_238
shared variable AESL_REG_rgnET_238 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_239
shared variable AESL_REG_rgnET_239 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_240
shared variable AESL_REG_rgnET_240 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_241
shared variable AESL_REG_rgnET_241 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_242
shared variable AESL_REG_rgnET_242 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_243
shared variable AESL_REG_rgnET_243 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_244
shared variable AESL_REG_rgnET_244 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_245
shared variable AESL_REG_rgnET_245 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_246
shared variable AESL_REG_rgnET_246 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_247
shared variable AESL_REG_rgnET_247 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_248
shared variable AESL_REG_rgnET_248 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_249
shared variable AESL_REG_rgnET_249 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_250
shared variable AESL_REG_rgnET_250 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port rgnET_251
shared variable AESL_REG_rgnET_251 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_0
shared variable AESL_REG_hfET_0 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_1
shared variable AESL_REG_hfET_1 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_2
shared variable AESL_REG_hfET_2 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_3
shared variable AESL_REG_hfET_3 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_4
shared variable AESL_REG_hfET_4 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_5
shared variable AESL_REG_hfET_5 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_6
shared variable AESL_REG_hfET_6 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_7
shared variable AESL_REG_hfET_7 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_8
shared variable AESL_REG_hfET_8 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_9
shared variable AESL_REG_hfET_9 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_10
shared variable AESL_REG_hfET_10 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_11
shared variable AESL_REG_hfET_11 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_12
shared variable AESL_REG_hfET_12 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_13
shared variable AESL_REG_hfET_13 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_14
shared variable AESL_REG_hfET_14 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_15
shared variable AESL_REG_hfET_15 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_16
shared variable AESL_REG_hfET_16 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_17
shared variable AESL_REG_hfET_17 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_18
shared variable AESL_REG_hfET_18 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_19
shared variable AESL_REG_hfET_19 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_20
shared variable AESL_REG_hfET_20 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_21
shared variable AESL_REG_hfET_21 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_22
shared variable AESL_REG_hfET_22 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_23
shared variable AESL_REG_hfET_23 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_24
shared variable AESL_REG_hfET_24 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_25
shared variable AESL_REG_hfET_25 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_26
shared variable AESL_REG_hfET_26 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_27
shared variable AESL_REG_hfET_27 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_28
shared variable AESL_REG_hfET_28 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_29
shared variable AESL_REG_hfET_29 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_30
shared variable AESL_REG_hfET_30 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_31
shared variable AESL_REG_hfET_31 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_32
shared variable AESL_REG_hfET_32 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_33
shared variable AESL_REG_hfET_33 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_34
shared variable AESL_REG_hfET_34 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_35
shared variable AESL_REG_hfET_35 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_36
shared variable AESL_REG_hfET_36 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_37
shared variable AESL_REG_hfET_37 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_38
shared variable AESL_REG_hfET_38 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_39
shared variable AESL_REG_hfET_39 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_40
shared variable AESL_REG_hfET_40 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_41
shared variable AESL_REG_hfET_41 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_42
shared variable AESL_REG_hfET_42 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_43
shared variable AESL_REG_hfET_43 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_44
shared variable AESL_REG_hfET_44 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_45
shared variable AESL_REG_hfET_45 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_46
shared variable AESL_REG_hfET_46 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_47
shared variable AESL_REG_hfET_47 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_48
shared variable AESL_REG_hfET_48 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_49
shared variable AESL_REG_hfET_49 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_50
shared variable AESL_REG_hfET_50 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_51
shared variable AESL_REG_hfET_51 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_52
shared variable AESL_REG_hfET_52 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_53
shared variable AESL_REG_hfET_53 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_54
shared variable AESL_REG_hfET_54 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_55
shared variable AESL_REG_hfET_55 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_56
shared variable AESL_REG_hfET_56 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_57
shared variable AESL_REG_hfET_57 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_58
shared variable AESL_REG_hfET_58 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_59
shared variable AESL_REG_hfET_59 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_60
shared variable AESL_REG_hfET_60 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_61
shared variable AESL_REG_hfET_61 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_62
shared variable AESL_REG_hfET_62 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_63
shared variable AESL_REG_hfET_63 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_64
shared variable AESL_REG_hfET_64 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_65
shared variable AESL_REG_hfET_65 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_66
shared variable AESL_REG_hfET_66 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_67
shared variable AESL_REG_hfET_67 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_68
shared variable AESL_REG_hfET_68 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_69
shared variable AESL_REG_hfET_69 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_70
shared variable AESL_REG_hfET_70 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_71
shared variable AESL_REG_hfET_71 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_72
shared variable AESL_REG_hfET_72 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_73
shared variable AESL_REG_hfET_73 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_74
shared variable AESL_REG_hfET_74 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_75
shared variable AESL_REG_hfET_75 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_76
shared variable AESL_REG_hfET_76 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_77
shared variable AESL_REG_hfET_77 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_78
shared variable AESL_REG_hfET_78 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_79
shared variable AESL_REG_hfET_79 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_80
shared variable AESL_REG_hfET_80 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_81
shared variable AESL_REG_hfET_81 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_82
shared variable AESL_REG_hfET_82 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_83
shared variable AESL_REG_hfET_83 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_84
shared variable AESL_REG_hfET_84 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_85
shared variable AESL_REG_hfET_85 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_86
shared variable AESL_REG_hfET_86 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_87
shared variable AESL_REG_hfET_87 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_88
shared variable AESL_REG_hfET_88 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_89
shared variable AESL_REG_hfET_89 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_90
shared variable AESL_REG_hfET_90 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_91
shared variable AESL_REG_hfET_91 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_92
shared variable AESL_REG_hfET_92 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_93
shared variable AESL_REG_hfET_93 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_94
shared variable AESL_REG_hfET_94 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_95
shared variable AESL_REG_hfET_95 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_96
shared variable AESL_REG_hfET_96 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_97
shared variable AESL_REG_hfET_97 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_98
shared variable AESL_REG_hfET_98 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_99
shared variable AESL_REG_hfET_99 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_100
shared variable AESL_REG_hfET_100 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_101
shared variable AESL_REG_hfET_101 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_102
shared variable AESL_REG_hfET_102 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_103
shared variable AESL_REG_hfET_103 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_104
shared variable AESL_REG_hfET_104 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_105
shared variable AESL_REG_hfET_105 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_106
shared variable AESL_REG_hfET_106 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_107
shared variable AESL_REG_hfET_107 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_108
shared variable AESL_REG_hfET_108 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_109
shared variable AESL_REG_hfET_109 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_110
shared variable AESL_REG_hfET_110 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_111
shared variable AESL_REG_hfET_111 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_112
shared variable AESL_REG_hfET_112 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_113
shared variable AESL_REG_hfET_113 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_114
shared variable AESL_REG_hfET_114 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_115
shared variable AESL_REG_hfET_115 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_116
shared variable AESL_REG_hfET_116 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_117
shared variable AESL_REG_hfET_117 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_118
shared variable AESL_REG_hfET_118 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_119
shared variable AESL_REG_hfET_119 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_120
shared variable AESL_REG_hfET_120 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_121
shared variable AESL_REG_hfET_121 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_122
shared variable AESL_REG_hfET_122 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_123
shared variable AESL_REG_hfET_123 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_124
shared variable AESL_REG_hfET_124 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_125
shared variable AESL_REG_hfET_125 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_126
shared variable AESL_REG_hfET_126 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_127
shared variable AESL_REG_hfET_127 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_128
shared variable AESL_REG_hfET_128 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_129
shared variable AESL_REG_hfET_129 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_130
shared variable AESL_REG_hfET_130 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_131
shared variable AESL_REG_hfET_131 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_132
shared variable AESL_REG_hfET_132 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_133
shared variable AESL_REG_hfET_133 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_134
shared variable AESL_REG_hfET_134 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_135
shared variable AESL_REG_hfET_135 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_136
shared variable AESL_REG_hfET_136 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_137
shared variable AESL_REG_hfET_137 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_138
shared variable AESL_REG_hfET_138 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_139
shared variable AESL_REG_hfET_139 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_140
shared variable AESL_REG_hfET_140 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_141
shared variable AESL_REG_hfET_141 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_142
shared variable AESL_REG_hfET_142 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port hfET_143
shared variable AESL_REG_hfET_143 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port HT_0
shared variable AESL_REG_HT_0 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port HT_1
shared variable AESL_REG_HT_1 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
-- The signal of port HT_2
shared variable AESL_REG_HT_2 : STD_LOGIC_VECTOR(15 downto 0) := (others => '0');
      procedure esl_read_token (file textfile: TEXT; textline: inout LINE; token: out STRING; token_len: out INTEGER) is
          variable whitespace : CHARACTER;
          variable i : INTEGER;
          variable ok: BOOLEAN;
          variable buff: STRING(1 to token'length);
      begin
          ok := false;
          i := 1;
          loop_main: while not endfile(textfile) loop
              if textline = null or textline'length = 0 then
                  readline(textfile, textline);
              end if;
              loop_remove_whitespace: while textline'length > 0 loop
                  if textline(textline'left) = ' ' or
                      textline(textline'left) = HT or
                      textline(textline'left) = CR or
                      textline(textline'left) = LF then
                      read(textline, whitespace);
                  else
                      exit loop_remove_whitespace;
                  end if;
              end loop;
              loop_aesl_read_token: while textline'length > 0 and i <= buff'length loop
                  if textline(textline'left) = ' ' or
                     textline(textline'left) = HT or
                     textline(textline'left) = CR or
                     textline(textline'left) = LF then
                      exit loop_aesl_read_token;
                  else
                      read(textline, buff(i));
                      i := i + 1;
                  end if;
                  ok := true;
              end loop;
              if ok = true then
                  exit loop_main;
              end if;
          end loop;
          buff(i) := ' ';
          token := buff;
          token_len:= i-1;
      end procedure esl_read_token;

      procedure esl_read_token (file textfile: TEXT;
                                textline: inout LINE;
                                token: out STRING) is
          variable i : INTEGER;
      begin
          esl_read_token (textfile, textline, token, i);
      end procedure esl_read_token;

      function esl_str2lv_hex (RHS : STRING; data_width : INTEGER) return STD_LOGIC_VECTOR is
          variable	ret	:   STD_LOGIC_VECTOR(data_width - 1 downto 0);
          variable	idx	:   integer := 3;
      begin
          ret := (others => '0');
          if(RHS(1) /= '0' and (RHS(2) /= 'x' or RHS(2) /= 'X')) then
     	        report "Error! The format of hex number is not initialed by 0x";
          end if;
          while true loop
              if (data_width > 4) then
                  case RHS(idx)  is
                      when '0'    =>  ret := ret(data_width - 5 downto 0) & "0000";
     	                when '1'    =>  ret := ret(data_width - 5 downto 0) & "0001";
                      when '2'    =>  ret := ret(data_width - 5 downto 0) & "0010";
                      when '3'    =>  ret := ret(data_width - 5 downto 0) & "0011";
                      when '4'    =>  ret := ret(data_width - 5 downto 0) & "0100";
                      when '5'    =>  ret := ret(data_width - 5 downto 0) & "0101";
                      when '6'    =>  ret := ret(data_width - 5 downto 0) & "0110";
                      when '7'    =>  ret := ret(data_width - 5 downto 0) & "0111";
                      when '8'    =>  ret := ret(data_width - 5 downto 0) & "1000";
                      when '9'    =>  ret := ret(data_width - 5 downto 0) & "1001";
                      when 'a' | 'A'  =>  ret := ret(data_width - 5 downto 0) & "1010";
                      when 'b' | 'B'  =>  ret := ret(data_width - 5 downto 0) & "1011";
                      when 'c' | 'C'  =>  ret := ret(data_width - 5 downto 0) & "1100";
                      when 'd' | 'D'  =>  ret := ret(data_width - 5 downto 0) & "1101";
                      when 'e' | 'E'  =>  ret := ret(data_width - 5 downto 0) & "1110";
                      when 'f' | 'F'  =>  ret := ret(data_width - 5 downto 0) & "1111";
                      when 'x' | 'X'  =>  ret := ret(data_width - 5 downto 0) & "XXXX";
                      when ' '    =>  return ret;
                      when others    =>  report "Wrong hex char " & RHS(idx);	return ret;
                  end case;
              elsif (data_width = 4) then
                  case RHS(idx)  is
                      when '0'    =>  ret := "0000";
     	                when '1'    =>  ret := "0001";
                      when '2'    =>  ret := "0010";
                      when '3'    =>  ret := "0011";
                      when '4'    =>  ret := "0100";
                      when '5'    =>  ret := "0101";
                      when '6'    =>  ret := "0110";
                      when '7'    =>  ret := "0111";
                      when '8'    =>  ret := "1000";
                      when '9'    =>  ret := "1001";
                      when 'a' | 'A'  =>  ret := "1010";
                      when 'b' | 'B'  =>  ret := "1011";
                      when 'c' | 'C'  =>  ret := "1100";
                      when 'd' | 'D'  =>  ret := "1101";
                      when 'e' | 'E'  =>  ret := "1110";
                      when 'f' | 'F'  =>  ret := "1111";
                      when 'x' | 'X'  =>  ret := "XXXX";
                      when ' '    =>  return ret;
                      when others    =>  report "Wrong hex char " & RHS(idx);	return ret;
                  end case;
              elsif (data_width = 3) then
                  case RHS(idx)  is
                      when '0'    =>  ret := "000";
     	                when '1'    =>  ret := "001";
                      when '2'    =>  ret := "010";
                      when '3'    =>  ret := "011";
                      when '4'    =>  ret := "100";
                      when '5'    =>  ret := "101";
                      when '6'    =>  ret := "110";
                      when '7'    =>  ret := "111";
                      when 'x' | 'X'  =>  ret := "XXX";
                      when ' '    =>  return ret;
                      when others    =>  report "Wrong hex char " & RHS(idx);	return ret;
                  end case;
              elsif (data_width = 2) then
                  case RHS(idx)  is
                      when '0'    =>  ret := "00";
     	                when '1'    =>  ret := "01";
                      when '2'    =>  ret := "10";
                      when '3'    =>  ret := "11";
                      when 'x' | 'X'  =>  ret := "XX";
                      when ' '    =>  return ret;
                      when others    =>  report "Wrong hex char " & RHS(idx);	return ret;
                  end case;
              elsif (data_width = 1) then
                  case RHS(idx)  is
                      when '0'    =>  ret := "0";
     	                when '1'    =>  ret := "1";
                      when 'x' | 'X'  =>  ret := "X";
                      when ' '    =>  return ret;
                      when others    =>  report "Wrong hex char " & RHS(idx);	return ret;
                  end case;
              else
                  report string'("Wrong data_width.");
                  return ret;
              end if;
              idx := idx + 1;
          end loop;
          return ret;
      end function;

    function esl_str_dec2int (RHS : STRING) return INTEGER is
        variable	ret	:   integer;
        variable	idx	:   integer := 1;
    begin
        ret := 0;
        while true loop
            case RHS(idx)  is
                when '0'    =>  ret := ret * 10 + 0;
                when '1'    =>  ret := ret * 10 + 1;
                when '2'    =>  ret := ret * 10 + 2;
                when '3'    =>  ret := ret * 10 + 3;
                when '4'    =>  ret := ret * 10 + 4;
                when '5'    =>  ret := ret * 10 + 5;
                when '6'    =>  ret := ret * 10 + 6;
                when '7'    =>  ret := ret * 10 + 7;
                when '8'    =>  ret := ret * 10 + 8;
                when '9'    =>  ret := ret * 10 + 9;
                when ' '    =>  return ret;
                when others    =>  report "Wrong dec char " & RHS(idx);	return ret;
            end case;
            idx := idx + 1;
        end loop;
        return ret;
    end esl_str_dec2int;
      function esl_conv_string_hex (lv : STD_LOGIC_VECTOR) return STRING is
          constant str_len : integer := (lv'length + 3)/4;
          variable ret : STRING (1 to str_len);
          variable i, tmp: INTEGER;
          variable normal_lv : STD_LOGIC_VECTOR(lv'length - 1 downto 0);
          variable tmp_lv : STD_LOGIC_VECTOR(3 downto 0);
      begin
          normal_lv := lv;
          for i in 1 to str_len loop
              if(i = 1) then
                  if((lv'length mod 4) = 3) then
                      tmp_lv(2 downto 0) := normal_lv(lv'length - 1 downto lv'length - 3);
                      case tmp_lv(2 downto 0) is
                          when "000" => ret(i) := '0';
                          when "001" => ret(i) := '1';
                          when "010" => ret(i) := '2';
                          when "011" => ret(i) := '3';
                          when "100" => ret(i) := '4';
                          when "101" => ret(i) := '5';
                          when "110" => ret(i) := '6';
                          when "111" => ret(i) := '7';
                          when others  => ret(i) := 'X';
                      end case;
                  elsif((lv'length mod 4) = 2) then
                      tmp_lv(1 downto 0) := normal_lv(lv'length - 1 downto lv'length - 2);
                      case tmp_lv(1 downto 0) is
                          when "00" => ret(i) := '0';
                          when "01" => ret(i) := '1';
                          when "10" => ret(i) := '2';
                          when "11" => ret(i) := '3';
                          when others => ret(i) := 'X';
                      end case;
                  elsif((lv'length mod 4) = 1) then
                      tmp_lv(0 downto 0) := normal_lv(lv'length - 1 downto lv'length - 1);
                      case tmp_lv(0 downto 0) is
                          when "0" => ret(i) := '0';
                          when "1" => ret(i) := '1';
                          when others=> ret(i) := 'X';
                      end case;
                  elsif((lv'length mod 4) = 0) then
                      tmp_lv(3 downto 0) := normal_lv(lv'length - 1 downto lv'length - 4);
                      case tmp_lv(3 downto 0) is
                          when "0000" => ret(i) := '0';
                          when "0001" => ret(i) := '1';
                          when "0010" => ret(i) := '2';
                          when "0011" => ret(i) := '3';
                          when "0100" => ret(i) := '4';
                          when "0101" => ret(i) := '5';
                          when "0110" => ret(i) := '6';
                          when "0111" => ret(i) := '7';
                          when "1000" => ret(i) := '8';
                          when "1001" => ret(i) := '9';
                          when "1010" => ret(i) := 'a';
                          when "1011" => ret(i) := 'b';
                          when "1100" => ret(i) := 'c';
                          when "1101" => ret(i) := 'd';
                          when "1110" => ret(i) := 'e';
                          when "1111" => ret(i) := 'f';
                          when others   => ret(i) := 'X';
                      end case;
                  end if;
              else
                  tmp_lv(3 downto 0) := normal_lv((str_len - i) * 4 + 3 downto (str_len - i) * 4);
                  case tmp_lv(3 downto 0) is
                      when "0000" => ret(i) := '0';
                      when "0001" => ret(i) := '1';
                      when "0010" => ret(i) := '2';
                      when "0011" => ret(i) := '3';
                      when "0100" => ret(i) := '4';
                      when "0101" => ret(i) := '5';
                      when "0110" => ret(i) := '6';
                      when "0111" => ret(i) := '7';
                      when "1000" => ret(i) := '8';
                      when "1001" => ret(i) := '9';
                      when "1010" => ret(i) := 'a';
                      when "1011" => ret(i) := 'b';
                      when "1100" => ret(i) := 'c';
                      when "1101" => ret(i) := 'd';
                      when "1110" => ret(i) := 'e';
                      when "1111" => ret(i) := 'f';
                      when others   => ret(i) := 'X';
                  end case;
              end if;
          end loop;
          return ret;
      end function;

  -- purpose: initialise the random state variable based on an integer seed
  function init_rand(seed : integer) return T_RANDINT is
    variable result : T_RANDINT;
  begin
    -- If the seed is smaller than the minimum value of the random state variable, use the minimum value
    if seed < T_RANDINT'low then
      result := T_RANDINT'low;
      -- If the seed is larger than the maximum value of the random state variable, use the maximum value
    elsif seed > T_RANDINT'high then
      result := T_RANDINT'high;
      -- If the seed is within the range of the random state variable, just use the seed
    else
      result := seed;
    end if;
    -- Return the result
    return result;
  end init_rand;


  -- purpose: generate a random integer between min and max limits
  procedure rand_int(variable rand   : inout T_RANDINT;
                     constant minval : in    integer;
                     constant maxval : in    integer;
                     variable result : out   integer
                     ) is

    variable k, q      : integer;
    variable real_rand : real;
    variable res       : integer;

  begin
    -- Create a new random integer in the range 1 to 2**31-1 and put it back into rand VARIABLE
    -- Based on an example from Numerical Recipes in C, 2nd Edition, page 279
    k   := rand/127773;
    q   := 16807*(rand-k*127773)-2836*k;
    if q < 0 then
      q := q + 2147483647;
    end if;
    rand := init_rand(q);

    -- Convert this integer to a real number in the range 0 to 1
    real_rand := (real(rand - T_RANDINT'low)) / real(T_RANDINT'high - T_RANDINT'low);
    -- Convert this real number to an integer in the range minval to maxval
    -- The +1 and -0.5 are to get equal probability of minval and maxval as other values
    res    := integer((real_rand * real(maxval+1-minval)) - 0.5) + minval;
    -- VHDL real to integer conversion doesn't define what happens for x.5 so deal with this
    if res < minval then
      res  := minval;
    elsif res > maxval then
      res  := maxval;
    end if;
    -- assign output
    result := res;

  end rand_int;

begin
AESL_inst_MakeHT    :   MakeHT port map (
   ap_clk  =>  ap_clk,
   ap_rst  =>  ap_rst,
   ap_start  =>  ap_start,
   ap_done  =>  ap_done,
   ap_idle  =>  ap_idle,
   ap_ready  =>  ap_ready,
   rgnET_0  =>  rgnET_0,
   rgnET_1  =>  rgnET_1,
   rgnET_2  =>  rgnET_2,
   rgnET_3  =>  rgnET_3,
   rgnET_4  =>  rgnET_4,
   rgnET_5  =>  rgnET_5,
   rgnET_6  =>  rgnET_6,
   rgnET_7  =>  rgnET_7,
   rgnET_8  =>  rgnET_8,
   rgnET_9  =>  rgnET_9,
   rgnET_10  =>  rgnET_10,
   rgnET_11  =>  rgnET_11,
   rgnET_12  =>  rgnET_12,
   rgnET_13  =>  rgnET_13,
   rgnET_14  =>  rgnET_14,
   rgnET_15  =>  rgnET_15,
   rgnET_16  =>  rgnET_16,
   rgnET_17  =>  rgnET_17,
   rgnET_18  =>  rgnET_18,
   rgnET_19  =>  rgnET_19,
   rgnET_20  =>  rgnET_20,
   rgnET_21  =>  rgnET_21,
   rgnET_22  =>  rgnET_22,
   rgnET_23  =>  rgnET_23,
   rgnET_24  =>  rgnET_24,
   rgnET_25  =>  rgnET_25,
   rgnET_26  =>  rgnET_26,
   rgnET_27  =>  rgnET_27,
   rgnET_28  =>  rgnET_28,
   rgnET_29  =>  rgnET_29,
   rgnET_30  =>  rgnET_30,
   rgnET_31  =>  rgnET_31,
   rgnET_32  =>  rgnET_32,
   rgnET_33  =>  rgnET_33,
   rgnET_34  =>  rgnET_34,
   rgnET_35  =>  rgnET_35,
   rgnET_36  =>  rgnET_36,
   rgnET_37  =>  rgnET_37,
   rgnET_38  =>  rgnET_38,
   rgnET_39  =>  rgnET_39,
   rgnET_40  =>  rgnET_40,
   rgnET_41  =>  rgnET_41,
   rgnET_42  =>  rgnET_42,
   rgnET_43  =>  rgnET_43,
   rgnET_44  =>  rgnET_44,
   rgnET_45  =>  rgnET_45,
   rgnET_46  =>  rgnET_46,
   rgnET_47  =>  rgnET_47,
   rgnET_48  =>  rgnET_48,
   rgnET_49  =>  rgnET_49,
   rgnET_50  =>  rgnET_50,
   rgnET_51  =>  rgnET_51,
   rgnET_52  =>  rgnET_52,
   rgnET_53  =>  rgnET_53,
   rgnET_54  =>  rgnET_54,
   rgnET_55  =>  rgnET_55,
   rgnET_56  =>  rgnET_56,
   rgnET_57  =>  rgnET_57,
   rgnET_58  =>  rgnET_58,
   rgnET_59  =>  rgnET_59,
   rgnET_60  =>  rgnET_60,
   rgnET_61  =>  rgnET_61,
   rgnET_62  =>  rgnET_62,
   rgnET_63  =>  rgnET_63,
   rgnET_64  =>  rgnET_64,
   rgnET_65  =>  rgnET_65,
   rgnET_66  =>  rgnET_66,
   rgnET_67  =>  rgnET_67,
   rgnET_68  =>  rgnET_68,
   rgnET_69  =>  rgnET_69,
   rgnET_70  =>  rgnET_70,
   rgnET_71  =>  rgnET_71,
   rgnET_72  =>  rgnET_72,
   rgnET_73  =>  rgnET_73,
   rgnET_74  =>  rgnET_74,
   rgnET_75  =>  rgnET_75,
   rgnET_76  =>  rgnET_76,
   rgnET_77  =>  rgnET_77,
   rgnET_78  =>  rgnET_78,
   rgnET_79  =>  rgnET_79,
   rgnET_80  =>  rgnET_80,
   rgnET_81  =>  rgnET_81,
   rgnET_82  =>  rgnET_82,
   rgnET_83  =>  rgnET_83,
   rgnET_84  =>  rgnET_84,
   rgnET_85  =>  rgnET_85,
   rgnET_86  =>  rgnET_86,
   rgnET_87  =>  rgnET_87,
   rgnET_88  =>  rgnET_88,
   rgnET_89  =>  rgnET_89,
   rgnET_90  =>  rgnET_90,
   rgnET_91  =>  rgnET_91,
   rgnET_92  =>  rgnET_92,
   rgnET_93  =>  rgnET_93,
   rgnET_94  =>  rgnET_94,
   rgnET_95  =>  rgnET_95,
   rgnET_96  =>  rgnET_96,
   rgnET_97  =>  rgnET_97,
   rgnET_98  =>  rgnET_98,
   rgnET_99  =>  rgnET_99,
   rgnET_100  =>  rgnET_100,
   rgnET_101  =>  rgnET_101,
   rgnET_102  =>  rgnET_102,
   rgnET_103  =>  rgnET_103,
   rgnET_104  =>  rgnET_104,
   rgnET_105  =>  rgnET_105,
   rgnET_106  =>  rgnET_106,
   rgnET_107  =>  rgnET_107,
   rgnET_108  =>  rgnET_108,
   rgnET_109  =>  rgnET_109,
   rgnET_110  =>  rgnET_110,
   rgnET_111  =>  rgnET_111,
   rgnET_112  =>  rgnET_112,
   rgnET_113  =>  rgnET_113,
   rgnET_114  =>  rgnET_114,
   rgnET_115  =>  rgnET_115,
   rgnET_116  =>  rgnET_116,
   rgnET_117  =>  rgnET_117,
   rgnET_118  =>  rgnET_118,
   rgnET_119  =>  rgnET_119,
   rgnET_120  =>  rgnET_120,
   rgnET_121  =>  rgnET_121,
   rgnET_122  =>  rgnET_122,
   rgnET_123  =>  rgnET_123,
   rgnET_124  =>  rgnET_124,
   rgnET_125  =>  rgnET_125,
   rgnET_126  =>  rgnET_126,
   rgnET_127  =>  rgnET_127,
   rgnET_128  =>  rgnET_128,
   rgnET_129  =>  rgnET_129,
   rgnET_130  =>  rgnET_130,
   rgnET_131  =>  rgnET_131,
   rgnET_132  =>  rgnET_132,
   rgnET_133  =>  rgnET_133,
   rgnET_134  =>  rgnET_134,
   rgnET_135  =>  rgnET_135,
   rgnET_136  =>  rgnET_136,
   rgnET_137  =>  rgnET_137,
   rgnET_138  =>  rgnET_138,
   rgnET_139  =>  rgnET_139,
   rgnET_140  =>  rgnET_140,
   rgnET_141  =>  rgnET_141,
   rgnET_142  =>  rgnET_142,
   rgnET_143  =>  rgnET_143,
   rgnET_144  =>  rgnET_144,
   rgnET_145  =>  rgnET_145,
   rgnET_146  =>  rgnET_146,
   rgnET_147  =>  rgnET_147,
   rgnET_148  =>  rgnET_148,
   rgnET_149  =>  rgnET_149,
   rgnET_150  =>  rgnET_150,
   rgnET_151  =>  rgnET_151,
   rgnET_152  =>  rgnET_152,
   rgnET_153  =>  rgnET_153,
   rgnET_154  =>  rgnET_154,
   rgnET_155  =>  rgnET_155,
   rgnET_156  =>  rgnET_156,
   rgnET_157  =>  rgnET_157,
   rgnET_158  =>  rgnET_158,
   rgnET_159  =>  rgnET_159,
   rgnET_160  =>  rgnET_160,
   rgnET_161  =>  rgnET_161,
   rgnET_162  =>  rgnET_162,
   rgnET_163  =>  rgnET_163,
   rgnET_164  =>  rgnET_164,
   rgnET_165  =>  rgnET_165,
   rgnET_166  =>  rgnET_166,
   rgnET_167  =>  rgnET_167,
   rgnET_168  =>  rgnET_168,
   rgnET_169  =>  rgnET_169,
   rgnET_170  =>  rgnET_170,
   rgnET_171  =>  rgnET_171,
   rgnET_172  =>  rgnET_172,
   rgnET_173  =>  rgnET_173,
   rgnET_174  =>  rgnET_174,
   rgnET_175  =>  rgnET_175,
   rgnET_176  =>  rgnET_176,
   rgnET_177  =>  rgnET_177,
   rgnET_178  =>  rgnET_178,
   rgnET_179  =>  rgnET_179,
   rgnET_180  =>  rgnET_180,
   rgnET_181  =>  rgnET_181,
   rgnET_182  =>  rgnET_182,
   rgnET_183  =>  rgnET_183,
   rgnET_184  =>  rgnET_184,
   rgnET_185  =>  rgnET_185,
   rgnET_186  =>  rgnET_186,
   rgnET_187  =>  rgnET_187,
   rgnET_188  =>  rgnET_188,
   rgnET_189  =>  rgnET_189,
   rgnET_190  =>  rgnET_190,
   rgnET_191  =>  rgnET_191,
   rgnET_192  =>  rgnET_192,
   rgnET_193  =>  rgnET_193,
   rgnET_194  =>  rgnET_194,
   rgnET_195  =>  rgnET_195,
   rgnET_196  =>  rgnET_196,
   rgnET_197  =>  rgnET_197,
   rgnET_198  =>  rgnET_198,
   rgnET_199  =>  rgnET_199,
   rgnET_200  =>  rgnET_200,
   rgnET_201  =>  rgnET_201,
   rgnET_202  =>  rgnET_202,
   rgnET_203  =>  rgnET_203,
   rgnET_204  =>  rgnET_204,
   rgnET_205  =>  rgnET_205,
   rgnET_206  =>  rgnET_206,
   rgnET_207  =>  rgnET_207,
   rgnET_208  =>  rgnET_208,
   rgnET_209  =>  rgnET_209,
   rgnET_210  =>  rgnET_210,
   rgnET_211  =>  rgnET_211,
   rgnET_212  =>  rgnET_212,
   rgnET_213  =>  rgnET_213,
   rgnET_214  =>  rgnET_214,
   rgnET_215  =>  rgnET_215,
   rgnET_216  =>  rgnET_216,
   rgnET_217  =>  rgnET_217,
   rgnET_218  =>  rgnET_218,
   rgnET_219  =>  rgnET_219,
   rgnET_220  =>  rgnET_220,
   rgnET_221  =>  rgnET_221,
   rgnET_222  =>  rgnET_222,
   rgnET_223  =>  rgnET_223,
   rgnET_224  =>  rgnET_224,
   rgnET_225  =>  rgnET_225,
   rgnET_226  =>  rgnET_226,
   rgnET_227  =>  rgnET_227,
   rgnET_228  =>  rgnET_228,
   rgnET_229  =>  rgnET_229,
   rgnET_230  =>  rgnET_230,
   rgnET_231  =>  rgnET_231,
   rgnET_232  =>  rgnET_232,
   rgnET_233  =>  rgnET_233,
   rgnET_234  =>  rgnET_234,
   rgnET_235  =>  rgnET_235,
   rgnET_236  =>  rgnET_236,
   rgnET_237  =>  rgnET_237,
   rgnET_238  =>  rgnET_238,
   rgnET_239  =>  rgnET_239,
   rgnET_240  =>  rgnET_240,
   rgnET_241  =>  rgnET_241,
   rgnET_242  =>  rgnET_242,
   rgnET_243  =>  rgnET_243,
   rgnET_244  =>  rgnET_244,
   rgnET_245  =>  rgnET_245,
   rgnET_246  =>  rgnET_246,
   rgnET_247  =>  rgnET_247,
   rgnET_248  =>  rgnET_248,
   rgnET_249  =>  rgnET_249,
   rgnET_250  =>  rgnET_250,
   rgnET_251  =>  rgnET_251,
   hfET_0  =>  hfET_0,
   hfET_1  =>  hfET_1,
   hfET_2  =>  hfET_2,
   hfET_3  =>  hfET_3,
   hfET_4  =>  hfET_4,
   hfET_5  =>  hfET_5,
   hfET_6  =>  hfET_6,
   hfET_7  =>  hfET_7,
   hfET_8  =>  hfET_8,
   hfET_9  =>  hfET_9,
   hfET_10  =>  hfET_10,
   hfET_11  =>  hfET_11,
   hfET_12  =>  hfET_12,
   hfET_13  =>  hfET_13,
   hfET_14  =>  hfET_14,
   hfET_15  =>  hfET_15,
   hfET_16  =>  hfET_16,
   hfET_17  =>  hfET_17,
   hfET_18  =>  hfET_18,
   hfET_19  =>  hfET_19,
   hfET_20  =>  hfET_20,
   hfET_21  =>  hfET_21,
   hfET_22  =>  hfET_22,
   hfET_23  =>  hfET_23,
   hfET_24  =>  hfET_24,
   hfET_25  =>  hfET_25,
   hfET_26  =>  hfET_26,
   hfET_27  =>  hfET_27,
   hfET_28  =>  hfET_28,
   hfET_29  =>  hfET_29,
   hfET_30  =>  hfET_30,
   hfET_31  =>  hfET_31,
   hfET_32  =>  hfET_32,
   hfET_33  =>  hfET_33,
   hfET_34  =>  hfET_34,
   hfET_35  =>  hfET_35,
   hfET_36  =>  hfET_36,
   hfET_37  =>  hfET_37,
   hfET_38  =>  hfET_38,
   hfET_39  =>  hfET_39,
   hfET_40  =>  hfET_40,
   hfET_41  =>  hfET_41,
   hfET_42  =>  hfET_42,
   hfET_43  =>  hfET_43,
   hfET_44  =>  hfET_44,
   hfET_45  =>  hfET_45,
   hfET_46  =>  hfET_46,
   hfET_47  =>  hfET_47,
   hfET_48  =>  hfET_48,
   hfET_49  =>  hfET_49,
   hfET_50  =>  hfET_50,
   hfET_51  =>  hfET_51,
   hfET_52  =>  hfET_52,
   hfET_53  =>  hfET_53,
   hfET_54  =>  hfET_54,
   hfET_55  =>  hfET_55,
   hfET_56  =>  hfET_56,
   hfET_57  =>  hfET_57,
   hfET_58  =>  hfET_58,
   hfET_59  =>  hfET_59,
   hfET_60  =>  hfET_60,
   hfET_61  =>  hfET_61,
   hfET_62  =>  hfET_62,
   hfET_63  =>  hfET_63,
   hfET_64  =>  hfET_64,
   hfET_65  =>  hfET_65,
   hfET_66  =>  hfET_66,
   hfET_67  =>  hfET_67,
   hfET_68  =>  hfET_68,
   hfET_69  =>  hfET_69,
   hfET_70  =>  hfET_70,
   hfET_71  =>  hfET_71,
   hfET_72  =>  hfET_72,
   hfET_73  =>  hfET_73,
   hfET_74  =>  hfET_74,
   hfET_75  =>  hfET_75,
   hfET_76  =>  hfET_76,
   hfET_77  =>  hfET_77,
   hfET_78  =>  hfET_78,
   hfET_79  =>  hfET_79,
   hfET_80  =>  hfET_80,
   hfET_81  =>  hfET_81,
   hfET_82  =>  hfET_82,
   hfET_83  =>  hfET_83,
   hfET_84  =>  hfET_84,
   hfET_85  =>  hfET_85,
   hfET_86  =>  hfET_86,
   hfET_87  =>  hfET_87,
   hfET_88  =>  hfET_88,
   hfET_89  =>  hfET_89,
   hfET_90  =>  hfET_90,
   hfET_91  =>  hfET_91,
   hfET_92  =>  hfET_92,
   hfET_93  =>  hfET_93,
   hfET_94  =>  hfET_94,
   hfET_95  =>  hfET_95,
   hfET_96  =>  hfET_96,
   hfET_97  =>  hfET_97,
   hfET_98  =>  hfET_98,
   hfET_99  =>  hfET_99,
   hfET_100  =>  hfET_100,
   hfET_101  =>  hfET_101,
   hfET_102  =>  hfET_102,
   hfET_103  =>  hfET_103,
   hfET_104  =>  hfET_104,
   hfET_105  =>  hfET_105,
   hfET_106  =>  hfET_106,
   hfET_107  =>  hfET_107,
   hfET_108  =>  hfET_108,
   hfET_109  =>  hfET_109,
   hfET_110  =>  hfET_110,
   hfET_111  =>  hfET_111,
   hfET_112  =>  hfET_112,
   hfET_113  =>  hfET_113,
   hfET_114  =>  hfET_114,
   hfET_115  =>  hfET_115,
   hfET_116  =>  hfET_116,
   hfET_117  =>  hfET_117,
   hfET_118  =>  hfET_118,
   hfET_119  =>  hfET_119,
   hfET_120  =>  hfET_120,
   hfET_121  =>  hfET_121,
   hfET_122  =>  hfET_122,
   hfET_123  =>  hfET_123,
   hfET_124  =>  hfET_124,
   hfET_125  =>  hfET_125,
   hfET_126  =>  hfET_126,
   hfET_127  =>  hfET_127,
   hfET_128  =>  hfET_128,
   hfET_129  =>  hfET_129,
   hfET_130  =>  hfET_130,
   hfET_131  =>  hfET_131,
   hfET_132  =>  hfET_132,
   hfET_133  =>  hfET_133,
   hfET_134  =>  hfET_134,
   hfET_135  =>  hfET_135,
   hfET_136  =>  hfET_136,
   hfET_137  =>  hfET_137,
   hfET_138  =>  hfET_138,
   hfET_139  =>  hfET_139,
   hfET_140  =>  hfET_140,
   hfET_141  =>  hfET_141,
   hfET_142  =>  hfET_142,
   hfET_143  =>  hfET_143,
   HT_0  =>  HT_0,
   HT_1  =>  HT_1,
   HT_2  =>  HT_2
);

-- Assignment for control signal
  ap_clk <= AESL_clock;
  ap_rst <= AESL_reset;
  AESL_reset <= rst;
  ap_start <= AESL_start;
  AESL_start <= start;
  AESL_done <= ap_done;
  AESL_idle <= ap_idle;
  AESL_ready <= ap_ready;
  AESL_ce <= ce;
  AESL_continue <= continue;
gen_check_strlSignal_AESL_done_proc : process(AESL_clock)
begin
  if (AESL_clock'event and AESL_clock = '1') then
    if(AESL_reset = '1') then
      NULL;
    else
        if ( AESL_done /= '1' and AESL_done /= '0' ) then
            assert false report "Control signal AESL_done is invalid!" severity failure;
        end if;
    end if;
  end if;
end process;
gen_check_strlSignal_AESL_ready_proc : process(AESL_clock)
begin
  if (AESL_clock'event and AESL_clock = '1') then
    if(AESL_reset = '1') then
      NULL;
    else
        if ( AESL_ready /= '1' and AESL_ready /= '0' ) then
            assert false report "Control signal AESL_ready is invalid!" severity failure;
        end if;
    end if;
  end if;
end process;
gen_assign_rgnET_0_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_0 <= AESL_REG_rgnET_0;
end process;
read_file_process_rgnET_0 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_0, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_0 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_0 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_1_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_1 <= AESL_REG_rgnET_1;
end process;
read_file_process_rgnET_1 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_1, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_1 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_1 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_2_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_2 <= AESL_REG_rgnET_2;
end process;
read_file_process_rgnET_2 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_2, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_2 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_2 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_3_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_3 <= AESL_REG_rgnET_3;
end process;
read_file_process_rgnET_3 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_3, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_3 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_3 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_4_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_4 <= AESL_REG_rgnET_4;
end process;
read_file_process_rgnET_4 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_4, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_4 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_4 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_5_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_5 <= AESL_REG_rgnET_5;
end process;
read_file_process_rgnET_5 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_5, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_5 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_5 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_6_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_6 <= AESL_REG_rgnET_6;
end process;
read_file_process_rgnET_6 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_6, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_6 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_6 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_7_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_7 <= AESL_REG_rgnET_7;
end process;
read_file_process_rgnET_7 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_7, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_7 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_7 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_8_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_8 <= AESL_REG_rgnET_8;
end process;
read_file_process_rgnET_8 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_8, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_8 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_8 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_9_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_9 <= AESL_REG_rgnET_9;
end process;
read_file_process_rgnET_9 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_9, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_9 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_9 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_10_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_10 <= AESL_REG_rgnET_10;
end process;
read_file_process_rgnET_10 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_10, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_10 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_10 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_11_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_11 <= AESL_REG_rgnET_11;
end process;
read_file_process_rgnET_11 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_11, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_11 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_11 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_12_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_12 <= AESL_REG_rgnET_12;
end process;
read_file_process_rgnET_12 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_12, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_12 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_12 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_13_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_13 <= AESL_REG_rgnET_13;
end process;
read_file_process_rgnET_13 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_13, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_13 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_13 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_14_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_14 <= AESL_REG_rgnET_14;
end process;
read_file_process_rgnET_14 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_14, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_14 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_14 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_15_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_15 <= AESL_REG_rgnET_15;
end process;
read_file_process_rgnET_15 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_15, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_15 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_15 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_16_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_16 <= AESL_REG_rgnET_16;
end process;
read_file_process_rgnET_16 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_16, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_16 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_16 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_17_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_17 <= AESL_REG_rgnET_17;
end process;
read_file_process_rgnET_17 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_17, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_17 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_17 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_18_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_18 <= AESL_REG_rgnET_18;
end process;
read_file_process_rgnET_18 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_18, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_18 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_18 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_19_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_19 <= AESL_REG_rgnET_19;
end process;
read_file_process_rgnET_19 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_19, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_19 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_19 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_20_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_20 <= AESL_REG_rgnET_20;
end process;
read_file_process_rgnET_20 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_20, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_20 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_20 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_21_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_21 <= AESL_REG_rgnET_21;
end process;
read_file_process_rgnET_21 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_21, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_21 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_21 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_22_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_22 <= AESL_REG_rgnET_22;
end process;
read_file_process_rgnET_22 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_22, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_22 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_22 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_23_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_23 <= AESL_REG_rgnET_23;
end process;
read_file_process_rgnET_23 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_23, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_23 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_23 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_24_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_24 <= AESL_REG_rgnET_24;
end process;
read_file_process_rgnET_24 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_24, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_24 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_24 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_25_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_25 <= AESL_REG_rgnET_25;
end process;
read_file_process_rgnET_25 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_25, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_25 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_25 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_26_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_26 <= AESL_REG_rgnET_26;
end process;
read_file_process_rgnET_26 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_26, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_26 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_26 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_27_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_27 <= AESL_REG_rgnET_27;
end process;
read_file_process_rgnET_27 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_27, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_27 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_27 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_28_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_28 <= AESL_REG_rgnET_28;
end process;
read_file_process_rgnET_28 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_28, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_28 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_28 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_29_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_29 <= AESL_REG_rgnET_29;
end process;
read_file_process_rgnET_29 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_29, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_29 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_29 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_30_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_30 <= AESL_REG_rgnET_30;
end process;
read_file_process_rgnET_30 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_30, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_30 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_30 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_31_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_31 <= AESL_REG_rgnET_31;
end process;
read_file_process_rgnET_31 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_31, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_31 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_31 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_32_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_32 <= AESL_REG_rgnET_32;
end process;
read_file_process_rgnET_32 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_32, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_32 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_32 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_33_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_33 <= AESL_REG_rgnET_33;
end process;
read_file_process_rgnET_33 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_33, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_33 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_33 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_34_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_34 <= AESL_REG_rgnET_34;
end process;
read_file_process_rgnET_34 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_34, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_34 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_34 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_35_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_35 <= AESL_REG_rgnET_35;
end process;
read_file_process_rgnET_35 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_35, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_35 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_35 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_36_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_36 <= AESL_REG_rgnET_36;
end process;
read_file_process_rgnET_36 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_36, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_36 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_36 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_37_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_37 <= AESL_REG_rgnET_37;
end process;
read_file_process_rgnET_37 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_37, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_37 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_37 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_38_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_38 <= AESL_REG_rgnET_38;
end process;
read_file_process_rgnET_38 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_38, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_38 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_38 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_39_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_39 <= AESL_REG_rgnET_39;
end process;
read_file_process_rgnET_39 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_39, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_39 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_39 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_40_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_40 <= AESL_REG_rgnET_40;
end process;
read_file_process_rgnET_40 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_40, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_40 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_40 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_41_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_41 <= AESL_REG_rgnET_41;
end process;
read_file_process_rgnET_41 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_41, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_41 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_41 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_42_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_42 <= AESL_REG_rgnET_42;
end process;
read_file_process_rgnET_42 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_42, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_42 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_42 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_43_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_43 <= AESL_REG_rgnET_43;
end process;
read_file_process_rgnET_43 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_43, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_43 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_43 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_44_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_44 <= AESL_REG_rgnET_44;
end process;
read_file_process_rgnET_44 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_44, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_44 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_44 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_45_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_45 <= AESL_REG_rgnET_45;
end process;
read_file_process_rgnET_45 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_45, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_45 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_45 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_46_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_46 <= AESL_REG_rgnET_46;
end process;
read_file_process_rgnET_46 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_46, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_46 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_46 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_47_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_47 <= AESL_REG_rgnET_47;
end process;
read_file_process_rgnET_47 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_47, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_47 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_47 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_48_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_48 <= AESL_REG_rgnET_48;
end process;
read_file_process_rgnET_48 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_48, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_48 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_48 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_49_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_49 <= AESL_REG_rgnET_49;
end process;
read_file_process_rgnET_49 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_49, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_49 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_49 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_50_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_50 <= AESL_REG_rgnET_50;
end process;
read_file_process_rgnET_50 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_50, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_50 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_50 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_51_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_51 <= AESL_REG_rgnET_51;
end process;
read_file_process_rgnET_51 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_51, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_51 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_51 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_52_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_52 <= AESL_REG_rgnET_52;
end process;
read_file_process_rgnET_52 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_52, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_52 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_52 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_53_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_53 <= AESL_REG_rgnET_53;
end process;
read_file_process_rgnET_53 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_53, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_53 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_53 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_54_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_54 <= AESL_REG_rgnET_54;
end process;
read_file_process_rgnET_54 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_54, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_54 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_54 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_55_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_55 <= AESL_REG_rgnET_55;
end process;
read_file_process_rgnET_55 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_55, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_55 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_55 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_56_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_56 <= AESL_REG_rgnET_56;
end process;
read_file_process_rgnET_56 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_56, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_56 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_56 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_57_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_57 <= AESL_REG_rgnET_57;
end process;
read_file_process_rgnET_57 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_57, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_57 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_57 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_58_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_58 <= AESL_REG_rgnET_58;
end process;
read_file_process_rgnET_58 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_58, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_58 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_58 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_59_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_59 <= AESL_REG_rgnET_59;
end process;
read_file_process_rgnET_59 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_59, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_59 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_59 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_60_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_60 <= AESL_REG_rgnET_60;
end process;
read_file_process_rgnET_60 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_60, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_60 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_60 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_61_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_61 <= AESL_REG_rgnET_61;
end process;
read_file_process_rgnET_61 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_61, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_61 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_61 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_62_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_62 <= AESL_REG_rgnET_62;
end process;
read_file_process_rgnET_62 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_62, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_62 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_62 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_63_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_63 <= AESL_REG_rgnET_63;
end process;
read_file_process_rgnET_63 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_63, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_63 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_63 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_64_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_64 <= AESL_REG_rgnET_64;
end process;
read_file_process_rgnET_64 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_64, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_64 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_64 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_65_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_65 <= AESL_REG_rgnET_65;
end process;
read_file_process_rgnET_65 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_65, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_65 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_65 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_66_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_66 <= AESL_REG_rgnET_66;
end process;
read_file_process_rgnET_66 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_66, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_66 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_66 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_67_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_67 <= AESL_REG_rgnET_67;
end process;
read_file_process_rgnET_67 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_67, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_67 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_67 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_68_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_68 <= AESL_REG_rgnET_68;
end process;
read_file_process_rgnET_68 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_68, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_68 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_68 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_69_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_69 <= AESL_REG_rgnET_69;
end process;
read_file_process_rgnET_69 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_69, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_69 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_69 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_70_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_70 <= AESL_REG_rgnET_70;
end process;
read_file_process_rgnET_70 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_70, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_70 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_70 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_71_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_71 <= AESL_REG_rgnET_71;
end process;
read_file_process_rgnET_71 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_71, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_71 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_71 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_72_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_72 <= AESL_REG_rgnET_72;
end process;
read_file_process_rgnET_72 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_72, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_72 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_72 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_73_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_73 <= AESL_REG_rgnET_73;
end process;
read_file_process_rgnET_73 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_73, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_73 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_73 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_74_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_74 <= AESL_REG_rgnET_74;
end process;
read_file_process_rgnET_74 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_74, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_74 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_74 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_75_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_75 <= AESL_REG_rgnET_75;
end process;
read_file_process_rgnET_75 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_75, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_75 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_75 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_76_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_76 <= AESL_REG_rgnET_76;
end process;
read_file_process_rgnET_76 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_76, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_76 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_76 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_77_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_77 <= AESL_REG_rgnET_77;
end process;
read_file_process_rgnET_77 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_77, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_77 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_77 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_78_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_78 <= AESL_REG_rgnET_78;
end process;
read_file_process_rgnET_78 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_78, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_78 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_78 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_79_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_79 <= AESL_REG_rgnET_79;
end process;
read_file_process_rgnET_79 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_79, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_79 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_79 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_80_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_80 <= AESL_REG_rgnET_80;
end process;
read_file_process_rgnET_80 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_80, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_80 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_80 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_81_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_81 <= AESL_REG_rgnET_81;
end process;
read_file_process_rgnET_81 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_81, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_81 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_81 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_82_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_82 <= AESL_REG_rgnET_82;
end process;
read_file_process_rgnET_82 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_82, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_82 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_82 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_83_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_83 <= AESL_REG_rgnET_83;
end process;
read_file_process_rgnET_83 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_83, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_83 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_83 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_84_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_84 <= AESL_REG_rgnET_84;
end process;
read_file_process_rgnET_84 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_84, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_84 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_84 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_85_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_85 <= AESL_REG_rgnET_85;
end process;
read_file_process_rgnET_85 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_85, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_85 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_85 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_86_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_86 <= AESL_REG_rgnET_86;
end process;
read_file_process_rgnET_86 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_86, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_86 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_86 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_87_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_87 <= AESL_REG_rgnET_87;
end process;
read_file_process_rgnET_87 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_87, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_87 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_87 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_88_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_88 <= AESL_REG_rgnET_88;
end process;
read_file_process_rgnET_88 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_88, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_88 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_88 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_89_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_89 <= AESL_REG_rgnET_89;
end process;
read_file_process_rgnET_89 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_89, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_89 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_89 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_90_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_90 <= AESL_REG_rgnET_90;
end process;
read_file_process_rgnET_90 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_90, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_90 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_90 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_91_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_91 <= AESL_REG_rgnET_91;
end process;
read_file_process_rgnET_91 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_91, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_91 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_91 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_92_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_92 <= AESL_REG_rgnET_92;
end process;
read_file_process_rgnET_92 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_92, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_92 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_92 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_93_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_93 <= AESL_REG_rgnET_93;
end process;
read_file_process_rgnET_93 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_93, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_93 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_93 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_94_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_94 <= AESL_REG_rgnET_94;
end process;
read_file_process_rgnET_94 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_94, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_94 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_94 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_95_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_95 <= AESL_REG_rgnET_95;
end process;
read_file_process_rgnET_95 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_95, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_95 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_95 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_96_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_96 <= AESL_REG_rgnET_96;
end process;
read_file_process_rgnET_96 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_96, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_96 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_96 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_97_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_97 <= AESL_REG_rgnET_97;
end process;
read_file_process_rgnET_97 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_97, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_97 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_97 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_98_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_98 <= AESL_REG_rgnET_98;
end process;
read_file_process_rgnET_98 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_98, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_98 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_98 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_99_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_99 <= AESL_REG_rgnET_99;
end process;
read_file_process_rgnET_99 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_99, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_99 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_99 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_100_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_100 <= AESL_REG_rgnET_100;
end process;
read_file_process_rgnET_100 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_100, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_100 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_100 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_101_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_101 <= AESL_REG_rgnET_101;
end process;
read_file_process_rgnET_101 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_101, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_101 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_101 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_102_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_102 <= AESL_REG_rgnET_102;
end process;
read_file_process_rgnET_102 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_102, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_102 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_102 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_103_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_103 <= AESL_REG_rgnET_103;
end process;
read_file_process_rgnET_103 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_103, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_103 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_103 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_104_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_104 <= AESL_REG_rgnET_104;
end process;
read_file_process_rgnET_104 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_104, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_104 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_104 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_105_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_105 <= AESL_REG_rgnET_105;
end process;
read_file_process_rgnET_105 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_105, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_105 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_105 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_106_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_106 <= AESL_REG_rgnET_106;
end process;
read_file_process_rgnET_106 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_106, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_106 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_106 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_107_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_107 <= AESL_REG_rgnET_107;
end process;
read_file_process_rgnET_107 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_107, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_107 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_107 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_108_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_108 <= AESL_REG_rgnET_108;
end process;
read_file_process_rgnET_108 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_108, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_108 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_108 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_109_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_109 <= AESL_REG_rgnET_109;
end process;
read_file_process_rgnET_109 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_109, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_109 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_109 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_110_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_110 <= AESL_REG_rgnET_110;
end process;
read_file_process_rgnET_110 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_110, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_110 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_110 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_111_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_111 <= AESL_REG_rgnET_111;
end process;
read_file_process_rgnET_111 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_111, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_111 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_111 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_112_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_112 <= AESL_REG_rgnET_112;
end process;
read_file_process_rgnET_112 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_112, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_112 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_112 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_113_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_113 <= AESL_REG_rgnET_113;
end process;
read_file_process_rgnET_113 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_113, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_113 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_113 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_114_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_114 <= AESL_REG_rgnET_114;
end process;
read_file_process_rgnET_114 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_114, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_114 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_114 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_115_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_115 <= AESL_REG_rgnET_115;
end process;
read_file_process_rgnET_115 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_115, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_115 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_115 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_116_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_116 <= AESL_REG_rgnET_116;
end process;
read_file_process_rgnET_116 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_116, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_116 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_116 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_117_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_117 <= AESL_REG_rgnET_117;
end process;
read_file_process_rgnET_117 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_117, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_117 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_117 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_118_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_118 <= AESL_REG_rgnET_118;
end process;
read_file_process_rgnET_118 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_118, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_118 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_118 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_119_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_119 <= AESL_REG_rgnET_119;
end process;
read_file_process_rgnET_119 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_119, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_119 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_119 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_120_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_120 <= AESL_REG_rgnET_120;
end process;
read_file_process_rgnET_120 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_120, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_120 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_120 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_121_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_121 <= AESL_REG_rgnET_121;
end process;
read_file_process_rgnET_121 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_121, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_121 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_121 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_122_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_122 <= AESL_REG_rgnET_122;
end process;
read_file_process_rgnET_122 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_122, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_122 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_122 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_123_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_123 <= AESL_REG_rgnET_123;
end process;
read_file_process_rgnET_123 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_123, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_123 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_123 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_124_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_124 <= AESL_REG_rgnET_124;
end process;
read_file_process_rgnET_124 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_124, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_124 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_124 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_125_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_125 <= AESL_REG_rgnET_125;
end process;
read_file_process_rgnET_125 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_125, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_125 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_125 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_126_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_126 <= AESL_REG_rgnET_126;
end process;
read_file_process_rgnET_126 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_126, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_126 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_126 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_127_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_127 <= AESL_REG_rgnET_127;
end process;
read_file_process_rgnET_127 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_127, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_127 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_127 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_128_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_128 <= AESL_REG_rgnET_128;
end process;
read_file_process_rgnET_128 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_128, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_128 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_128 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_129_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_129 <= AESL_REG_rgnET_129;
end process;
read_file_process_rgnET_129 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_129, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_129 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_129 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_130_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_130 <= AESL_REG_rgnET_130;
end process;
read_file_process_rgnET_130 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_130, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_130 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_130 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_131_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_131 <= AESL_REG_rgnET_131;
end process;
read_file_process_rgnET_131 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_131, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_131 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_131 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_132_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_132 <= AESL_REG_rgnET_132;
end process;
read_file_process_rgnET_132 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_132, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_132 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_132 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_133_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_133 <= AESL_REG_rgnET_133;
end process;
read_file_process_rgnET_133 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_133, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_133 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_133 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_134_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_134 <= AESL_REG_rgnET_134;
end process;
read_file_process_rgnET_134 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_134, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_134 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_134 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_135_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_135 <= AESL_REG_rgnET_135;
end process;
read_file_process_rgnET_135 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_135, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_135 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_135 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_136_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_136 <= AESL_REG_rgnET_136;
end process;
read_file_process_rgnET_136 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_136, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_136 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_136 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_137_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_137 <= AESL_REG_rgnET_137;
end process;
read_file_process_rgnET_137 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_137, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_137 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_137 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_138_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_138 <= AESL_REG_rgnET_138;
end process;
read_file_process_rgnET_138 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_138, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_138 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_138 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_139_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_139 <= AESL_REG_rgnET_139;
end process;
read_file_process_rgnET_139 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_139, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_139 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_139 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_140_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_140 <= AESL_REG_rgnET_140;
end process;
read_file_process_rgnET_140 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_140, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_140 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_140 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_141_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_141 <= AESL_REG_rgnET_141;
end process;
read_file_process_rgnET_141 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_141, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_141 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_141 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_142_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_142 <= AESL_REG_rgnET_142;
end process;
read_file_process_rgnET_142 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_142, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_142 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_142 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_143_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_143 <= AESL_REG_rgnET_143;
end process;
read_file_process_rgnET_143 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_143, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_143 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_143 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_144_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_144 <= AESL_REG_rgnET_144;
end process;
read_file_process_rgnET_144 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_144, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_144 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_144 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_145_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_145 <= AESL_REG_rgnET_145;
end process;
read_file_process_rgnET_145 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_145, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_145 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_145 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_146_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_146 <= AESL_REG_rgnET_146;
end process;
read_file_process_rgnET_146 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_146, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_146 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_146 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_147_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_147 <= AESL_REG_rgnET_147;
end process;
read_file_process_rgnET_147 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_147, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_147 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_147 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_148_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_148 <= AESL_REG_rgnET_148;
end process;
read_file_process_rgnET_148 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_148, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_148 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_148 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_149_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_149 <= AESL_REG_rgnET_149;
end process;
read_file_process_rgnET_149 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_149, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_149 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_149 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_150_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_150 <= AESL_REG_rgnET_150;
end process;
read_file_process_rgnET_150 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_150, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_150 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_150 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_151_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_151 <= AESL_REG_rgnET_151;
end process;
read_file_process_rgnET_151 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_151, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_151 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_151 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_152_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_152 <= AESL_REG_rgnET_152;
end process;
read_file_process_rgnET_152 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_152, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_152 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_152 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_153_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_153 <= AESL_REG_rgnET_153;
end process;
read_file_process_rgnET_153 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_153, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_153 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_153 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_154_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_154 <= AESL_REG_rgnET_154;
end process;
read_file_process_rgnET_154 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_154, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_154 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_154 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_155_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_155 <= AESL_REG_rgnET_155;
end process;
read_file_process_rgnET_155 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_155, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_155 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_155 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_156_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_156 <= AESL_REG_rgnET_156;
end process;
read_file_process_rgnET_156 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_156, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_156 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_156 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_157_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_157 <= AESL_REG_rgnET_157;
end process;
read_file_process_rgnET_157 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_157, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_157 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_157 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_158_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_158 <= AESL_REG_rgnET_158;
end process;
read_file_process_rgnET_158 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_158, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_158 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_158 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_159_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_159 <= AESL_REG_rgnET_159;
end process;
read_file_process_rgnET_159 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_159, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_159 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_159 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_160_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_160 <= AESL_REG_rgnET_160;
end process;
read_file_process_rgnET_160 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_160, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_160 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_160 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_161_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_161 <= AESL_REG_rgnET_161;
end process;
read_file_process_rgnET_161 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_161, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_161 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_161 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_162_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_162 <= AESL_REG_rgnET_162;
end process;
read_file_process_rgnET_162 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_162, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_162 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_162 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_163_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_163 <= AESL_REG_rgnET_163;
end process;
read_file_process_rgnET_163 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_163, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_163 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_163 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_164_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_164 <= AESL_REG_rgnET_164;
end process;
read_file_process_rgnET_164 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_164, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_164 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_164 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_165_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_165 <= AESL_REG_rgnET_165;
end process;
read_file_process_rgnET_165 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_165, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_165 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_165 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_166_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_166 <= AESL_REG_rgnET_166;
end process;
read_file_process_rgnET_166 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_166, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_166 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_166 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_167_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_167 <= AESL_REG_rgnET_167;
end process;
read_file_process_rgnET_167 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_167, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_167 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_167 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_168_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_168 <= AESL_REG_rgnET_168;
end process;
read_file_process_rgnET_168 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_168, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_168 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_168 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_169_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_169 <= AESL_REG_rgnET_169;
end process;
read_file_process_rgnET_169 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_169, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_169 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_169 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_170_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_170 <= AESL_REG_rgnET_170;
end process;
read_file_process_rgnET_170 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_170, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_170 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_170 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_171_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_171 <= AESL_REG_rgnET_171;
end process;
read_file_process_rgnET_171 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_171, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_171 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_171 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_172_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_172 <= AESL_REG_rgnET_172;
end process;
read_file_process_rgnET_172 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_172, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_172 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_172 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_173_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_173 <= AESL_REG_rgnET_173;
end process;
read_file_process_rgnET_173 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_173, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_173 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_173 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_174_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_174 <= AESL_REG_rgnET_174;
end process;
read_file_process_rgnET_174 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_174, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_174 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_174 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_175_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_175 <= AESL_REG_rgnET_175;
end process;
read_file_process_rgnET_175 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_175, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_175 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_175 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_176_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_176 <= AESL_REG_rgnET_176;
end process;
read_file_process_rgnET_176 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_176, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_176 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_176 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_177_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_177 <= AESL_REG_rgnET_177;
end process;
read_file_process_rgnET_177 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_177, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_177 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_177 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_178_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_178 <= AESL_REG_rgnET_178;
end process;
read_file_process_rgnET_178 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_178, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_178 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_178 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_179_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_179 <= AESL_REG_rgnET_179;
end process;
read_file_process_rgnET_179 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_179, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_179 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_179 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_180_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_180 <= AESL_REG_rgnET_180;
end process;
read_file_process_rgnET_180 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_180, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_180 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_180 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_181_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_181 <= AESL_REG_rgnET_181;
end process;
read_file_process_rgnET_181 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_181, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_181 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_181 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_182_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_182 <= AESL_REG_rgnET_182;
end process;
read_file_process_rgnET_182 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_182, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_182 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_182 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_183_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_183 <= AESL_REG_rgnET_183;
end process;
read_file_process_rgnET_183 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_183, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_183 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_183 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_184_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_184 <= AESL_REG_rgnET_184;
end process;
read_file_process_rgnET_184 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_184, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_184 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_184 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_185_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_185 <= AESL_REG_rgnET_185;
end process;
read_file_process_rgnET_185 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_185, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_185 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_185 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_186_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_186 <= AESL_REG_rgnET_186;
end process;
read_file_process_rgnET_186 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_186, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_186 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_186 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_187_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_187 <= AESL_REG_rgnET_187;
end process;
read_file_process_rgnET_187 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_187, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_187 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_187 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_188_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_188 <= AESL_REG_rgnET_188;
end process;
read_file_process_rgnET_188 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_188, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_188 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_188 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_189_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_189 <= AESL_REG_rgnET_189;
end process;
read_file_process_rgnET_189 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_189, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_189 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_189 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_190_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_190 <= AESL_REG_rgnET_190;
end process;
read_file_process_rgnET_190 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_190, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_190 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_190 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_191_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_191 <= AESL_REG_rgnET_191;
end process;
read_file_process_rgnET_191 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_191, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_191 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_191 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_192_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_192 <= AESL_REG_rgnET_192;
end process;
read_file_process_rgnET_192 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_192, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_192 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_192 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_193_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_193 <= AESL_REG_rgnET_193;
end process;
read_file_process_rgnET_193 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_193, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_193 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_193 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_194_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_194 <= AESL_REG_rgnET_194;
end process;
read_file_process_rgnET_194 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_194, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_194 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_194 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_195_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_195 <= AESL_REG_rgnET_195;
end process;
read_file_process_rgnET_195 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_195, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_195 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_195 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_196_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_196 <= AESL_REG_rgnET_196;
end process;
read_file_process_rgnET_196 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_196, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_196 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_196 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_197_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_197 <= AESL_REG_rgnET_197;
end process;
read_file_process_rgnET_197 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_197, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_197 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_197 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_198_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_198 <= AESL_REG_rgnET_198;
end process;
read_file_process_rgnET_198 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_198, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_198 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_198 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_199_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_199 <= AESL_REG_rgnET_199;
end process;
read_file_process_rgnET_199 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_199, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_199 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_199 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_200_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_200 <= AESL_REG_rgnET_200;
end process;
read_file_process_rgnET_200 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_200, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_200 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_200 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_201_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_201 <= AESL_REG_rgnET_201;
end process;
read_file_process_rgnET_201 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_201, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_201 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_201 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_202_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_202 <= AESL_REG_rgnET_202;
end process;
read_file_process_rgnET_202 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_202, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_202 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_202 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_203_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_203 <= AESL_REG_rgnET_203;
end process;
read_file_process_rgnET_203 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_203, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_203 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_203 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_204_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_204 <= AESL_REG_rgnET_204;
end process;
read_file_process_rgnET_204 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_204, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_204 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_204 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_205_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_205 <= AESL_REG_rgnET_205;
end process;
read_file_process_rgnET_205 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_205, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_205 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_205 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_206_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_206 <= AESL_REG_rgnET_206;
end process;
read_file_process_rgnET_206 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_206, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_206 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_206 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_207_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_207 <= AESL_REG_rgnET_207;
end process;
read_file_process_rgnET_207 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_207, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_207 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_207 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_208_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_208 <= AESL_REG_rgnET_208;
end process;
read_file_process_rgnET_208 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_208, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_208 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_208 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_209_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_209 <= AESL_REG_rgnET_209;
end process;
read_file_process_rgnET_209 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_209, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_209 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_209 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_210_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_210 <= AESL_REG_rgnET_210;
end process;
read_file_process_rgnET_210 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_210, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_210 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_210 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_211_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_211 <= AESL_REG_rgnET_211;
end process;
read_file_process_rgnET_211 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_211, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_211 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_211 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_212_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_212 <= AESL_REG_rgnET_212;
end process;
read_file_process_rgnET_212 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_212, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_212 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_212 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_213_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_213 <= AESL_REG_rgnET_213;
end process;
read_file_process_rgnET_213 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_213, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_213 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_213 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_214_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_214 <= AESL_REG_rgnET_214;
end process;
read_file_process_rgnET_214 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_214, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_214 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_214 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_215_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_215 <= AESL_REG_rgnET_215;
end process;
read_file_process_rgnET_215 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_215, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_215 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_215 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_216_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_216 <= AESL_REG_rgnET_216;
end process;
read_file_process_rgnET_216 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_216, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_216 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_216 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_217_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_217 <= AESL_REG_rgnET_217;
end process;
read_file_process_rgnET_217 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_217, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_217 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_217 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_218_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_218 <= AESL_REG_rgnET_218;
end process;
read_file_process_rgnET_218 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_218, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_218 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_218 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_219_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_219 <= AESL_REG_rgnET_219;
end process;
read_file_process_rgnET_219 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_219, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_219 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_219 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_220_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_220 <= AESL_REG_rgnET_220;
end process;
read_file_process_rgnET_220 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_220, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_220 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_220 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_221_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_221 <= AESL_REG_rgnET_221;
end process;
read_file_process_rgnET_221 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_221, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_221 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_221 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_222_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_222 <= AESL_REG_rgnET_222;
end process;
read_file_process_rgnET_222 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_222, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_222 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_222 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_223_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_223 <= AESL_REG_rgnET_223;
end process;
read_file_process_rgnET_223 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_223, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_223 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_223 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_224_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_224 <= AESL_REG_rgnET_224;
end process;
read_file_process_rgnET_224 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_224, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_224 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_224 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_225_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_225 <= AESL_REG_rgnET_225;
end process;
read_file_process_rgnET_225 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_225, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_225 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_225 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_226_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_226 <= AESL_REG_rgnET_226;
end process;
read_file_process_rgnET_226 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_226, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_226 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_226 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_227_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_227 <= AESL_REG_rgnET_227;
end process;
read_file_process_rgnET_227 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_227, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_227 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_227 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_228_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_228 <= AESL_REG_rgnET_228;
end process;
read_file_process_rgnET_228 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_228, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_228 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_228 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_229_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_229 <= AESL_REG_rgnET_229;
end process;
read_file_process_rgnET_229 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_229, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_229 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_229 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_230_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_230 <= AESL_REG_rgnET_230;
end process;
read_file_process_rgnET_230 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_230, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_230 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_230 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_231_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_231 <= AESL_REG_rgnET_231;
end process;
read_file_process_rgnET_231 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_231, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_231 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_231 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_232_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_232 <= AESL_REG_rgnET_232;
end process;
read_file_process_rgnET_232 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_232, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_232 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_232 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_233_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_233 <= AESL_REG_rgnET_233;
end process;
read_file_process_rgnET_233 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_233, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_233 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_233 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_234_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_234 <= AESL_REG_rgnET_234;
end process;
read_file_process_rgnET_234 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_234, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_234 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_234 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_235_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_235 <= AESL_REG_rgnET_235;
end process;
read_file_process_rgnET_235 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_235, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_235 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_235 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_236_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_236 <= AESL_REG_rgnET_236;
end process;
read_file_process_rgnET_236 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_236, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_236 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_236 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_237_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_237 <= AESL_REG_rgnET_237;
end process;
read_file_process_rgnET_237 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_237, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_237 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_237 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_238_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_238 <= AESL_REG_rgnET_238;
end process;
read_file_process_rgnET_238 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_238, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_238 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_238 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_239_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_239 <= AESL_REG_rgnET_239;
end process;
read_file_process_rgnET_239 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_239, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_239 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_239 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_240_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_240 <= AESL_REG_rgnET_240;
end process;
read_file_process_rgnET_240 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_240, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_240 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_240 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_241_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_241 <= AESL_REG_rgnET_241;
end process;
read_file_process_rgnET_241 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_241, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_241 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_241 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_242_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_242 <= AESL_REG_rgnET_242;
end process;
read_file_process_rgnET_242 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_242, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_242 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_242 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_243_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_243 <= AESL_REG_rgnET_243;
end process;
read_file_process_rgnET_243 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_243, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_243 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_243 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_244_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_244 <= AESL_REG_rgnET_244;
end process;
read_file_process_rgnET_244 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_244, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_244 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_244 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_245_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_245 <= AESL_REG_rgnET_245;
end process;
read_file_process_rgnET_245 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_245, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_245 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_245 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_246_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_246 <= AESL_REG_rgnET_246;
end process;
read_file_process_rgnET_246 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_246, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_246 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_246 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_247_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_247 <= AESL_REG_rgnET_247;
end process;
read_file_process_rgnET_247 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_247, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_247 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_247 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_248_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_248 <= AESL_REG_rgnET_248;
end process;
read_file_process_rgnET_248 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_248, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_248 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_248 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_249_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_249 <= AESL_REG_rgnET_249;
end process;
read_file_process_rgnET_249 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_249, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_249 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_249 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_250_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_250 <= AESL_REG_rgnET_250;
end process;
read_file_process_rgnET_250 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_250, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_250 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_250 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_rgnET_251_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  rgnET_251 <= AESL_REG_rgnET_251;
end process;
read_file_process_rgnET_251 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_rgnET_251, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_rgnET_251 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_rgnET_251 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_0_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_0 <= AESL_REG_hfET_0;
end process;
read_file_process_hfET_0 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_0, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_0 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_0 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_1_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_1 <= AESL_REG_hfET_1;
end process;
read_file_process_hfET_1 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_1, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_1 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_1 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_2_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_2 <= AESL_REG_hfET_2;
end process;
read_file_process_hfET_2 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_2, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_2 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_2 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_3_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_3 <= AESL_REG_hfET_3;
end process;
read_file_process_hfET_3 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_3, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_3 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_3 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_4_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_4 <= AESL_REG_hfET_4;
end process;
read_file_process_hfET_4 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_4, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_4 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_4 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_5_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_5 <= AESL_REG_hfET_5;
end process;
read_file_process_hfET_5 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_5, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_5 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_5 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_6_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_6 <= AESL_REG_hfET_6;
end process;
read_file_process_hfET_6 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_6, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_6 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_6 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_7_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_7 <= AESL_REG_hfET_7;
end process;
read_file_process_hfET_7 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_7, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_7 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_7 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_8_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_8 <= AESL_REG_hfET_8;
end process;
read_file_process_hfET_8 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_8, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_8 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_8 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_9_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_9 <= AESL_REG_hfET_9;
end process;
read_file_process_hfET_9 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_9, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_9 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_9 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_10_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_10 <= AESL_REG_hfET_10;
end process;
read_file_process_hfET_10 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_10, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_10 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_10 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_11_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_11 <= AESL_REG_hfET_11;
end process;
read_file_process_hfET_11 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_11, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_11 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_11 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_12_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_12 <= AESL_REG_hfET_12;
end process;
read_file_process_hfET_12 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_12, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_12 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_12 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_13_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_13 <= AESL_REG_hfET_13;
end process;
read_file_process_hfET_13 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_13, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_13 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_13 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_14_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_14 <= AESL_REG_hfET_14;
end process;
read_file_process_hfET_14 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_14, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_14 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_14 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_15_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_15 <= AESL_REG_hfET_15;
end process;
read_file_process_hfET_15 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_15, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_15 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_15 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_16_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_16 <= AESL_REG_hfET_16;
end process;
read_file_process_hfET_16 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_16, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_16 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_16 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_17_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_17 <= AESL_REG_hfET_17;
end process;
read_file_process_hfET_17 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_17, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_17 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_17 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_18_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_18 <= AESL_REG_hfET_18;
end process;
read_file_process_hfET_18 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_18, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_18 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_18 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_19_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_19 <= AESL_REG_hfET_19;
end process;
read_file_process_hfET_19 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_19, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_19 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_19 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_20_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_20 <= AESL_REG_hfET_20;
end process;
read_file_process_hfET_20 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_20, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_20 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_20 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_21_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_21 <= AESL_REG_hfET_21;
end process;
read_file_process_hfET_21 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_21, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_21 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_21 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_22_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_22 <= AESL_REG_hfET_22;
end process;
read_file_process_hfET_22 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_22, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_22 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_22 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_23_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_23 <= AESL_REG_hfET_23;
end process;
read_file_process_hfET_23 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_23, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_23 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_23 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_24_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_24 <= AESL_REG_hfET_24;
end process;
read_file_process_hfET_24 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_24, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_24 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_24 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_25_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_25 <= AESL_REG_hfET_25;
end process;
read_file_process_hfET_25 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_25, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_25 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_25 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_26_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_26 <= AESL_REG_hfET_26;
end process;
read_file_process_hfET_26 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_26, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_26 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_26 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_27_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_27 <= AESL_REG_hfET_27;
end process;
read_file_process_hfET_27 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_27, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_27 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_27 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_28_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_28 <= AESL_REG_hfET_28;
end process;
read_file_process_hfET_28 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_28, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_28 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_28 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_29_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_29 <= AESL_REG_hfET_29;
end process;
read_file_process_hfET_29 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_29, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_29 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_29 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_30_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_30 <= AESL_REG_hfET_30;
end process;
read_file_process_hfET_30 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_30, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_30 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_30 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_31_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_31 <= AESL_REG_hfET_31;
end process;
read_file_process_hfET_31 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_31, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_31 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_31 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_32_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_32 <= AESL_REG_hfET_32;
end process;
read_file_process_hfET_32 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_32, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_32 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_32 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_33_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_33 <= AESL_REG_hfET_33;
end process;
read_file_process_hfET_33 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_33, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_33 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_33 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_34_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_34 <= AESL_REG_hfET_34;
end process;
read_file_process_hfET_34 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_34, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_34 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_34 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_35_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_35 <= AESL_REG_hfET_35;
end process;
read_file_process_hfET_35 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_35, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_35 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_35 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_36_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_36 <= AESL_REG_hfET_36;
end process;
read_file_process_hfET_36 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_36, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_36 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_36 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_37_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_37 <= AESL_REG_hfET_37;
end process;
read_file_process_hfET_37 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_37, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_37 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_37 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_38_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_38 <= AESL_REG_hfET_38;
end process;
read_file_process_hfET_38 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_38, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_38 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_38 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_39_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_39 <= AESL_REG_hfET_39;
end process;
read_file_process_hfET_39 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_39, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_39 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_39 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_40_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_40 <= AESL_REG_hfET_40;
end process;
read_file_process_hfET_40 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_40, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_40 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_40 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_41_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_41 <= AESL_REG_hfET_41;
end process;
read_file_process_hfET_41 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_41, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_41 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_41 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_42_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_42 <= AESL_REG_hfET_42;
end process;
read_file_process_hfET_42 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_42, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_42 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_42 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_43_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_43 <= AESL_REG_hfET_43;
end process;
read_file_process_hfET_43 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_43, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_43 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_43 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_44_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_44 <= AESL_REG_hfET_44;
end process;
read_file_process_hfET_44 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_44, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_44 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_44 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_45_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_45 <= AESL_REG_hfET_45;
end process;
read_file_process_hfET_45 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_45, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_45 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_45 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_46_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_46 <= AESL_REG_hfET_46;
end process;
read_file_process_hfET_46 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_46, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_46 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_46 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_47_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_47 <= AESL_REG_hfET_47;
end process;
read_file_process_hfET_47 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_47, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_47 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_47 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_48_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_48 <= AESL_REG_hfET_48;
end process;
read_file_process_hfET_48 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_48, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_48 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_48 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_49_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_49 <= AESL_REG_hfET_49;
end process;
read_file_process_hfET_49 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_49, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_49 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_49 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_50_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_50 <= AESL_REG_hfET_50;
end process;
read_file_process_hfET_50 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_50, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_50 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_50 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_51_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_51 <= AESL_REG_hfET_51;
end process;
read_file_process_hfET_51 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_51, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_51 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_51 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_52_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_52 <= AESL_REG_hfET_52;
end process;
read_file_process_hfET_52 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_52, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_52 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_52 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_53_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_53 <= AESL_REG_hfET_53;
end process;
read_file_process_hfET_53 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_53, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_53 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_53 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_54_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_54 <= AESL_REG_hfET_54;
end process;
read_file_process_hfET_54 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_54, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_54 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_54 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_55_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_55 <= AESL_REG_hfET_55;
end process;
read_file_process_hfET_55 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_55, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_55 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_55 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_56_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_56 <= AESL_REG_hfET_56;
end process;
read_file_process_hfET_56 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_56, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_56 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_56 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_57_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_57 <= AESL_REG_hfET_57;
end process;
read_file_process_hfET_57 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_57, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_57 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_57 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_58_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_58 <= AESL_REG_hfET_58;
end process;
read_file_process_hfET_58 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_58, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_58 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_58 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_59_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_59 <= AESL_REG_hfET_59;
end process;
read_file_process_hfET_59 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_59, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_59 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_59 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_60_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_60 <= AESL_REG_hfET_60;
end process;
read_file_process_hfET_60 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_60, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_60 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_60 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_61_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_61 <= AESL_REG_hfET_61;
end process;
read_file_process_hfET_61 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_61, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_61 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_61 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_62_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_62 <= AESL_REG_hfET_62;
end process;
read_file_process_hfET_62 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_62, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_62 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_62 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_63_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_63 <= AESL_REG_hfET_63;
end process;
read_file_process_hfET_63 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_63, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_63 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_63 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_64_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_64 <= AESL_REG_hfET_64;
end process;
read_file_process_hfET_64 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_64, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_64 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_64 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_65_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_65 <= AESL_REG_hfET_65;
end process;
read_file_process_hfET_65 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_65, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_65 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_65 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_66_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_66 <= AESL_REG_hfET_66;
end process;
read_file_process_hfET_66 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_66, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_66 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_66 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_67_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_67 <= AESL_REG_hfET_67;
end process;
read_file_process_hfET_67 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_67, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_67 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_67 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_68_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_68 <= AESL_REG_hfET_68;
end process;
read_file_process_hfET_68 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_68, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_68 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_68 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_69_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_69 <= AESL_REG_hfET_69;
end process;
read_file_process_hfET_69 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_69, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_69 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_69 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_70_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_70 <= AESL_REG_hfET_70;
end process;
read_file_process_hfET_70 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_70, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_70 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_70 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_71_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_71 <= AESL_REG_hfET_71;
end process;
read_file_process_hfET_71 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_71, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_71 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_71 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_72_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_72 <= AESL_REG_hfET_72;
end process;
read_file_process_hfET_72 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_72, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_72 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_72 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_73_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_73 <= AESL_REG_hfET_73;
end process;
read_file_process_hfET_73 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_73, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_73 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_73 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_74_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_74 <= AESL_REG_hfET_74;
end process;
read_file_process_hfET_74 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_74, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_74 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_74 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_75_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_75 <= AESL_REG_hfET_75;
end process;
read_file_process_hfET_75 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_75, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_75 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_75 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_76_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_76 <= AESL_REG_hfET_76;
end process;
read_file_process_hfET_76 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_76, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_76 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_76 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_77_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_77 <= AESL_REG_hfET_77;
end process;
read_file_process_hfET_77 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_77, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_77 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_77 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_78_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_78 <= AESL_REG_hfET_78;
end process;
read_file_process_hfET_78 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_78, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_78 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_78 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_79_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_79 <= AESL_REG_hfET_79;
end process;
read_file_process_hfET_79 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_79, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_79 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_79 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_80_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_80 <= AESL_REG_hfET_80;
end process;
read_file_process_hfET_80 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_80, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_80 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_80 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_81_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_81 <= AESL_REG_hfET_81;
end process;
read_file_process_hfET_81 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_81, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_81 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_81 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_82_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_82 <= AESL_REG_hfET_82;
end process;
read_file_process_hfET_82 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_82, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_82 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_82 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_83_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_83 <= AESL_REG_hfET_83;
end process;
read_file_process_hfET_83 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_83, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_83 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_83 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_84_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_84 <= AESL_REG_hfET_84;
end process;
read_file_process_hfET_84 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_84, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_84 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_84 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_85_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_85 <= AESL_REG_hfET_85;
end process;
read_file_process_hfET_85 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_85, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_85 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_85 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_86_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_86 <= AESL_REG_hfET_86;
end process;
read_file_process_hfET_86 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_86, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_86 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_86 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_87_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_87 <= AESL_REG_hfET_87;
end process;
read_file_process_hfET_87 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_87, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_87 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_87 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_88_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_88 <= AESL_REG_hfET_88;
end process;
read_file_process_hfET_88 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_88, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_88 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_88 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_89_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_89 <= AESL_REG_hfET_89;
end process;
read_file_process_hfET_89 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_89, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_89 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_89 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_90_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_90 <= AESL_REG_hfET_90;
end process;
read_file_process_hfET_90 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_90, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_90 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_90 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_91_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_91 <= AESL_REG_hfET_91;
end process;
read_file_process_hfET_91 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_91, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_91 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_91 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_92_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_92 <= AESL_REG_hfET_92;
end process;
read_file_process_hfET_92 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_92, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_92 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_92 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_93_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_93 <= AESL_REG_hfET_93;
end process;
read_file_process_hfET_93 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_93, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_93 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_93 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_94_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_94 <= AESL_REG_hfET_94;
end process;
read_file_process_hfET_94 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_94, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_94 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_94 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_95_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_95 <= AESL_REG_hfET_95;
end process;
read_file_process_hfET_95 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_95, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_95 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_95 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_96_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_96 <= AESL_REG_hfET_96;
end process;
read_file_process_hfET_96 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_96, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_96 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_96 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_97_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_97 <= AESL_REG_hfET_97;
end process;
read_file_process_hfET_97 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_97, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_97 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_97 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_98_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_98 <= AESL_REG_hfET_98;
end process;
read_file_process_hfET_98 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_98, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_98 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_98 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_99_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_99 <= AESL_REG_hfET_99;
end process;
read_file_process_hfET_99 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_99, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_99 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_99 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_100_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_100 <= AESL_REG_hfET_100;
end process;
read_file_process_hfET_100 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_100, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_100 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_100 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_101_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_101 <= AESL_REG_hfET_101;
end process;
read_file_process_hfET_101 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_101, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_101 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_101 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_102_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_102 <= AESL_REG_hfET_102;
end process;
read_file_process_hfET_102 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_102, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_102 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_102 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_103_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_103 <= AESL_REG_hfET_103;
end process;
read_file_process_hfET_103 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_103, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_103 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_103 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_104_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_104 <= AESL_REG_hfET_104;
end process;
read_file_process_hfET_104 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_104, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_104 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_104 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_105_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_105 <= AESL_REG_hfET_105;
end process;
read_file_process_hfET_105 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_105, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_105 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_105 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_106_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_106 <= AESL_REG_hfET_106;
end process;
read_file_process_hfET_106 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_106, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_106 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_106 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_107_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_107 <= AESL_REG_hfET_107;
end process;
read_file_process_hfET_107 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_107, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_107 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_107 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_108_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_108 <= AESL_REG_hfET_108;
end process;
read_file_process_hfET_108 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_108, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_108 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_108 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_109_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_109 <= AESL_REG_hfET_109;
end process;
read_file_process_hfET_109 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_109, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_109 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_109 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_110_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_110 <= AESL_REG_hfET_110;
end process;
read_file_process_hfET_110 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_110, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_110 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_110 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_111_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_111 <= AESL_REG_hfET_111;
end process;
read_file_process_hfET_111 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_111, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_111 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_111 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_112_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_112 <= AESL_REG_hfET_112;
end process;
read_file_process_hfET_112 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_112, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_112 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_112 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_113_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_113 <= AESL_REG_hfET_113;
end process;
read_file_process_hfET_113 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_113, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_113 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_113 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_114_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_114 <= AESL_REG_hfET_114;
end process;
read_file_process_hfET_114 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_114, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_114 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_114 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_115_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_115 <= AESL_REG_hfET_115;
end process;
read_file_process_hfET_115 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_115, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_115 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_115 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_116_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_116 <= AESL_REG_hfET_116;
end process;
read_file_process_hfET_116 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_116, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_116 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_116 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_117_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_117 <= AESL_REG_hfET_117;
end process;
read_file_process_hfET_117 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_117, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_117 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_117 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_118_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_118 <= AESL_REG_hfET_118;
end process;
read_file_process_hfET_118 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_118, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_118 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_118 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_119_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_119 <= AESL_REG_hfET_119;
end process;
read_file_process_hfET_119 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_119, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_119 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_119 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_120_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_120 <= AESL_REG_hfET_120;
end process;
read_file_process_hfET_120 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_120, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_120 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_120 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_121_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_121 <= AESL_REG_hfET_121;
end process;
read_file_process_hfET_121 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_121, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_121 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_121 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_122_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_122 <= AESL_REG_hfET_122;
end process;
read_file_process_hfET_122 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_122, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_122 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_122 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_123_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_123 <= AESL_REG_hfET_123;
end process;
read_file_process_hfET_123 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_123, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_123 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_123 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_124_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_124 <= AESL_REG_hfET_124;
end process;
read_file_process_hfET_124 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_124, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_124 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_124 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_125_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_125 <= AESL_REG_hfET_125;
end process;
read_file_process_hfET_125 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_125, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_125 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_125 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_126_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_126 <= AESL_REG_hfET_126;
end process;
read_file_process_hfET_126 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_126, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_126 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_126 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_127_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_127 <= AESL_REG_hfET_127;
end process;
read_file_process_hfET_127 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_127, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_127 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_127 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_128_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_128 <= AESL_REG_hfET_128;
end process;
read_file_process_hfET_128 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_128, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_128 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_128 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_129_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_129 <= AESL_REG_hfET_129;
end process;
read_file_process_hfET_129 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_129, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_129 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_129 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_130_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_130 <= AESL_REG_hfET_130;
end process;
read_file_process_hfET_130 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_130, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_130 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_130 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_131_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_131 <= AESL_REG_hfET_131;
end process;
read_file_process_hfET_131 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_131, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_131 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_131 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_132_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_132 <= AESL_REG_hfET_132;
end process;
read_file_process_hfET_132 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_132, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_132 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_132 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_133_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_133 <= AESL_REG_hfET_133;
end process;
read_file_process_hfET_133 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_133, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_133 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_133 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_134_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_134 <= AESL_REG_hfET_134;
end process;
read_file_process_hfET_134 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_134, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_134 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_134 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_135_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_135 <= AESL_REG_hfET_135;
end process;
read_file_process_hfET_135 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_135, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_135 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_135 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_136_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_136 <= AESL_REG_hfET_136;
end process;
read_file_process_hfET_136 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_136, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_136 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_136 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_137_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_137 <= AESL_REG_hfET_137;
end process;
read_file_process_hfET_137 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_137, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_137 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_137 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_138_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_138 <= AESL_REG_hfET_138;
end process;
read_file_process_hfET_138 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_138, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_138 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_138 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_139_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_139 <= AESL_REG_hfET_139;
end process;
read_file_process_hfET_139 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_139, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_139 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_139 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_140_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_140 <= AESL_REG_hfET_140;
end process;
read_file_process_hfET_140 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_140, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_140 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_140 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_141_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_141 <= AESL_REG_hfET_141;
end process;
read_file_process_hfET_141 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_141, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_141 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_141 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_142_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_142 <= AESL_REG_hfET_142;
end process;
read_file_process_hfET_142 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_142, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_142 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_142 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_assign_hfET_143_proc : process
begin
  wait until (AESL_clock'event and AESL_clock = '1');
  wait for 0.45 ns;
  hfET_143 <= AESL_REG_hfET_143;
end process;
read_file_process_hfET_143 : process
  file        fp          :   TEXT;
  variable    fstatus     :   FILE_OPEN_STATUS;
  variable    token_line  :   LINE;
  variable    token       :   STRING(1 to 128);
  variable    i           :   INTEGER;
  variable    transaction_finish  :   INTEGER;
  variable    transaction_idx     :   INTEGER:= 0;
  variable    rand        :   T_RANDINT     := init_rand(0);
  variable    rint        :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVIN_hfET_143, READ_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVIN_hfET_143 & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    if(token(1 to 13) /= "[[[runtime]]]") then
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    esl_read_token(fp, token_line, token);
    while(token(1 to 14) /= "[[[/runtime]]]") loop
        if(token(1 to 15) /= "[[transaction]]") then
            assert false report "ERROR: Simulation using HLS TB failed." severity failure;
        end if;
        esl_read_token(fp, token_line, token);  -- Skip transaction number
        esl_read_token(fp, token_line, token);
        wait for 0.2 ns;
        while(ready_wire /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
            wait for 0.2 ns;
        end loop;
        if(token(1 to 16) /= "[[/transaction]]") then
            AESL_REG_hfET_143 := esl_str2lv_hex(token, 16 );
            esl_read_token(fp, token_line, token);
        end if;
        wait until AESL_clock'event and AESL_clock = '1';
        esl_read_token(fp, token_line, token);
    end loop;
    file_close(fp);
    wait;
end process;

gen_out_HT_0_proc : process(AESL_clock)
begin
  if (AESL_clock'event and AESL_clock = '1') then
    if(AESL_reset = '1') then
        AESL_REG_HT_0 := (others => '0'); 
    else
        AESL_REG_HT_0 := HT_0;
    end if;
  end if;
end process;

write_file_process_HT_0 : process
    file      fp              :   TEXT;
    file      fp_size         :   TEXT;
    variable  fstatus         :   FILE_OPEN_STATUS;
    variable  token_line      :   LINE;
    variable  token           :   STRING(1 to 128);
    variable  str             :   STRING(1 to 40);
    variable  transaction_idx :   INTEGER;
    variable  HT_0_count   :   INTEGER;
    variable  hls_stream_size :   INTEGER;
    variable  i               :   INTEGER;
    variable  rand            :   T_RANDINT     := init_rand(0);
    variable  rint            :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVOUT_HT_0_out_wrapc, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_HT_0_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[runtime]]]"));
    writeline(fp, token_line);
    transaction_idx := 0;
    while (transaction_idx /= AUTOTB_TRANSACTION_NUM) loop
        wait until AESL_clock'event and AESL_clock = '1';
	      while(AESL_done /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
	      end loop;
        wait for 0.4 ns;
        write(token_line, string'("[[transaction]]    ") & integer'image(transaction_idx));
        writeline(fp, token_line);
        write(token_line, "0x" & esl_conv_string_hex(AESL_REG_HT_0));
        writeline(fp, token_line);
        transaction_idx := transaction_idx + 1;
        write(token_line, string'("[[/transaction]]"));
        writeline(fp, token_line);
    end loop;
    write(token_line, string'("[[[/runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    wait;
end process;

gen_out_HT_1_proc : process(AESL_clock)
begin
  if (AESL_clock'event and AESL_clock = '1') then
    if(AESL_reset = '1') then
        AESL_REG_HT_1 := (others => '0'); 
    else
        AESL_REG_HT_1 := HT_1;
    end if;
  end if;
end process;

write_file_process_HT_1 : process
    file      fp              :   TEXT;
    file      fp_size         :   TEXT;
    variable  fstatus         :   FILE_OPEN_STATUS;
    variable  token_line      :   LINE;
    variable  token           :   STRING(1 to 128);
    variable  str             :   STRING(1 to 40);
    variable  transaction_idx :   INTEGER;
    variable  HT_1_count   :   INTEGER;
    variable  hls_stream_size :   INTEGER;
    variable  i               :   INTEGER;
    variable  rand            :   T_RANDINT     := init_rand(0);
    variable  rint            :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVOUT_HT_1_out_wrapc, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_HT_1_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[runtime]]]"));
    writeline(fp, token_line);
    transaction_idx := 0;
    while (transaction_idx /= AUTOTB_TRANSACTION_NUM) loop
        wait until AESL_clock'event and AESL_clock = '1';
	      while(AESL_done /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
	      end loop;
        wait for 0.4 ns;
        write(token_line, string'("[[transaction]]    ") & integer'image(transaction_idx));
        writeline(fp, token_line);
        write(token_line, "0x" & esl_conv_string_hex(AESL_REG_HT_1));
        writeline(fp, token_line);
        transaction_idx := transaction_idx + 1;
        write(token_line, string'("[[/transaction]]"));
        writeline(fp, token_line);
    end loop;
    write(token_line, string'("[[[/runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    wait;
end process;

gen_out_HT_2_proc : process(AESL_clock)
begin
  if (AESL_clock'event and AESL_clock = '1') then
    if(AESL_reset = '1') then
        AESL_REG_HT_2 := (others => '0'); 
    else
        AESL_REG_HT_2 := HT_2;
    end if;
  end if;
end process;

write_file_process_HT_2 : process
    file      fp              :   TEXT;
    file      fp_size         :   TEXT;
    variable  fstatus         :   FILE_OPEN_STATUS;
    variable  token_line      :   LINE;
    variable  token           :   STRING(1 to 128);
    variable  str             :   STRING(1 to 40);
    variable  transaction_idx :   INTEGER;
    variable  HT_2_count   :   INTEGER;
    variable  hls_stream_size :   INTEGER;
    variable  i               :   INTEGER;
    variable  rand            :   T_RANDINT     := init_rand(0);
    variable  rint            :   INTEGER;
begin
    wait until AESL_reset = '0';
    file_open(fstatus, fp, AUTOTB_TVOUT_HT_2_out_wrapc, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_TVOUT_HT_2_out_wrapc & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;
    write(token_line, string'("[[[runtime]]]"));
    writeline(fp, token_line);
    transaction_idx := 0;
    while (transaction_idx /= AUTOTB_TRANSACTION_NUM) loop
        wait until AESL_clock'event and AESL_clock = '1';
	      while(AESL_done /= '1') loop
            wait until AESL_clock'event and AESL_clock = '1';
	      end loop;
        wait for 0.4 ns;
        write(token_line, string'("[[transaction]]    ") & integer'image(transaction_idx));
        writeline(fp, token_line);
        write(token_line, "0x" & esl_conv_string_hex(AESL_REG_HT_2));
        writeline(fp, token_line);
        transaction_idx := transaction_idx + 1;
        write(token_line, string'("[[/transaction]]"));
        writeline(fp, token_line);
    end loop;
    write(token_line, string'("[[[/runtime]]]"));
    writeline(fp, token_line);
    file_close(fp);
    wait;
end process;

generate_ready_cnt_proc : process(ready_initial, AESL_clock)
begin
    if(AESL_clock'event and AESL_clock = '0') then
        if(ready_initial = '1') then
            ready_cnt <= conv_std_logic_vector(1, 32);
        end if;
    elsif(AESL_clock'event and AESL_clock = '1') then
        if(ready_cnt /= AUTOTB_TRANSACTION_NUM) then
            if(AESL_ready = '1') then
                ready_cnt <= ready_cnt + 1;
            end if;
        end if;
    end if;
end process;

generate_done_cnt_proc : process(AESL_reset, AESL_clock)
begin
    if(AESL_reset = '1') then
        done_cnt <= (others => '0');
    elsif(AESL_clock'event and AESL_clock = '1') then
        if(done_cnt /= AUTOTB_TRANSACTION_NUM) then
            if(AESL_done = '1') then
                done_cnt <= done_cnt + 1;
            end if;
        end if;
    end if;
end process;

generate_sim_done_proc    :   process
begin
    while(done_cnt /= AUTOTB_TRANSACTION_NUM) loop
        wait until AESL_clock'event and AESL_clock = '1';
    end loop;
        wait until AESL_clock'event and AESL_clock = '1';
        wait until AESL_clock'event and AESL_clock = '1';
        wait until AESL_clock'event and AESL_clock = '1';
    assert false report "simulation done!" severity note;
    assert false report "NORMAL EXIT (note: failure is to force the simulator to stop)" severity failure;
    wait;
end process;

gen_clock_proc :   process
begin
    AESL_clock <= '0';
    while(true) loop
        wait for AUTOTB_CLOCK_PERIOD_DIV2;
        AESL_clock <= not AESL_clock;
    end loop;
    wait;
end process;

gen_reset_proc : process
    variable  rand            :   T_RANDINT     := init_rand(0);
    variable  rint            :   INTEGER;
begin
    rst <= '1';
    wait for 100 ns;
    for i in 1 to 3 loop
        wait until AESL_clock'event and AESL_clock = '1';
    end loop;
    rst <= '0';
    wait;
end process;

gen_start_proc : process
    variable  rand            :   T_RANDINT     := init_rand(0);
    variable  rint            :   INTEGER;
begin
  start <= '0';
  ce <= '1';
    wait until AESL_reset = '0';
  wait until (AESL_clock'event and AESL_clock = '1');
  start <= '1';
  while(ready_cnt /= AUTOTB_TRANSACTION_NUM + 1) loop
      wait until (AESL_clock'event and AESL_clock = '1');
      if(AESL_ready = '1') then
          start <= '0';
          start <= '1';
      end if;
  end loop;
  start <= '0';
  wait;
end process;


gen_continue_proc : process(AESL_done)
begin
    continue <= AESL_done;
end process;

gen_AESL_ready_delay_proc : process(AESL_clock)
begin
  if (AESL_clock'event and AESL_clock = '1') then
    if(AESL_reset = '1') then
          AESL_ready_delay <= '0';
      else
          AESL_ready_delay <= AESL_ready;
      end if;
  end if;
end process;

gen_ready_initial_proc : process
begin
    ready_initial <= '0';
    wait until AESL_start = '1';
    ready_initial <= '1';
    wait until AESL_clock'event and AESL_clock = '1';
    ready_initial <= '0';
    wait;
end process;

ready_last_n_proc : process
begin
  ready_last_n <= '1';
  while(ready_cnt /= AUTOTB_TRANSACTION_NUM) loop
    wait until AESL_clock'event and AESL_clock = '1';
  end loop;
  ready_last_n <= '0';
  wait;
end process;

gen_ready_delay_n_last_proc : process(AESL_clock)
begin
  if (AESL_clock'event and AESL_clock = '1') then
    if(AESL_reset = '1') then
          ready_delay_last_n <= '0';
      else
          ready_delay_last_n <= ready_last_n;
      end if;
  end if;
end process;

ready <= (ready_initial or AESL_ready_delay);
ready_wire <= ready_initial or AESL_ready_delay;
done_delay_last_n <= '0' when done_cnt = AUTOTB_TRANSACTION_NUM else '1';

gen_done_delay_proc : process(AESL_clock)
begin
  if (AESL_clock'event and AESL_clock = '1') then
    if(AESL_reset = '1') then
          AESL_done_delay <= '0';
          AESL_done_delay2 <= '0';
      else
          AESL_done_delay <= AESL_done and done_delay_last_n;
          AESL_done_delay2 <= AESL_done_delay;
      end if;
  end if;
end process;

gen_interface_done : process(ready, AESL_ready_delay, AESL_done_delay)
begin
    if(ready_cnt > 0 and ready_cnt < AUTOTB_TRANSACTION_NUM) then
        interface_done <= AESL_ready_delay;
    elsif(ready_cnt = AUTOTB_TRANSACTION_NUM) then
        interface_done <= AESL_done_delay;
    else
        interface_done <= '0';
    end if;
end process;

gen_clock_counter_proc : process(AESL_clock)
begin
  if (AESL_clock'event and AESL_clock = '0') then
    if(AESL_reset = '1') then
        AESL_clk_counter := 0;
    else
        AESL_clk_counter := AESL_clk_counter + 1;
    end if;
  end if;
end process;

gen_mLatcnterout_proc : process(AESL_clock)
begin
  if (AESL_clock'event and AESL_clock = '1') then
    if(AESL_reset = '1') then
          AESL_mLatCnterOut_addr := 0;
          AESL_mLatCnterOut(AESL_mLatCnterOut_addr) := AESL_clk_counter + 1 ;
          reported_stuck_cnt := 0;
      else
          if (AESL_done = '1' and AESL_mLatCnterOut_addr < AUTOTB_TRANSACTION_NUM + 1) then
              AESL_mLatCnterOut(AESL_mLatCnterOut_addr) := AESL_clk_counter;
              AESL_mLatCnterOut_addr := AESL_mLatCnterOut_addr + 1;
              reported_stuck <= '0';
          elsif (reported_stuck = '0' and reported_stuck_cnt < 4) then
              if ( AESL_mLatCnterIn_addr > AESL_mLatCnterOut_addr ) then
                  if ( AESL_clk_counter - AESL_mLatCnterIn(AESL_mLatCnterOut_addr) > 10000 and AESL_clk_counter - AESL_mLatCnterIn(AESL_mLatCnterOut_addr) > 10 * 79 ) then
                      report "WARNING: The latency is much larger than expected. Simulation may stuck.";
                      reported_stuck <= '1';
                      reported_stuck_cnt := reported_stuck_cnt + 1;
                  end if;
              end if;
          end if;
      end if;
  end if;
end process;

gen_mLatcnterin_proc : process(AESL_clock)
begin
  if (AESL_clock'event and AESL_clock = '1') then
    if(AESL_reset = '1') then
          AESL_mLatCnterIn_addr := 0;
      else
    if (AESL_start = '1' and AESL_mLatCnterIn_addr = 0) then
        AESL_mLatCnterIn(AESL_mLatCnterIn_addr) := AESL_clk_counter;
        AESL_mLatCnterIn_addr := AESL_mLatCnterIn_addr + 1;
    elsif (AESL_ready = '1' and AESL_mLatCnterIn_addr < AUTOTB_TRANSACTION_NUM + 1 ) then
        AESL_mLatCnterIn(AESL_mLatCnterIn_addr) := AESL_clk_counter;
        AESL_mLatCnterIn_addr := AESL_mLatCnterIn_addr + 1;
    end if;
      end if;
  end if;
end process;

gen_performance_check_proc : process
    variable transaction_counter : INTEGER;
    variable i : INTEGER;
    file     fp :   TEXT;
    variable    fstatus         :   FILE_OPEN_STATUS;
    variable    token_line      :   LINE;
    variable    token           :   STRING(1 to 1024);

    variable latthistime : INTEGER;
    variable lattotal : INTEGER;
    variable latmax : INTEGER;
    variable latmin : INTEGER;


    variable thrthistime : INTEGER;
    variable thrtotal : INTEGER;
    variable thrmax : INTEGER;
    variable thrmin : INTEGER;

    variable lataver : INTEGER;
    variable thraver : INTEGER;
    type latency_record is array(0 to AUTOTB_TRANSACTION_NUM + 1) of INTEGER;
    variable lat_array : latency_record;
    variable thr_array : latency_record;

begin
    i := 0;
    lattotal  := 0;
    latmax    := 0;
    latmin    := 16#7fffffff#;
    lataver   := 0;

    thrtotal  := 0;
    thrmax    := 0;
    thrmin    := 16#7fffffff#;
    thraver   := 0;

    wait until (AESL_clock'event and AESL_clock = '1');
    wait until (AESL_reset = '0'); 
    while (done_cnt /= AUTOTB_TRANSACTION_NUM) loop
        wait until (AESL_clock'event and AESL_clock = '1');
    end loop;
  wait for 0.001 ns;

    for i in 0 to AUTOTB_TRANSACTION_NUM - 1 loop
        latthistime := AESL_mLatCnterOut(i) - AESL_mLatCnterIn(i);
        lat_array(i) := latthistime;
        if (latthistime > latmax) then
            latmax := latthistime; 
        end if;
        if (latthistime < latmin) then
            latmin := latthistime;
        end if;
		lattotal := lattotal + latthistime;
		if (AUTOTB_TRANSACTION_NUM = 1) then
			thrthistime := latthistime;
		else
			thrthistime := AESL_mLatCnterIn(i + 1) - AESL_mLatCnterIn(i);
		end if;
     thr_array(i) := thrthistime;
		if (thrthistime > thrmax) then
		    thrmax := thrthistime;
      end if;
		if (thrthistime < thrmin) then
	        thrmin := thrthistime;
      end if;
		thrtotal := thrtotal + thrthistime;
	end loop;
	lataver := lattotal / AUTOTB_TRANSACTION_NUM;
	thraver := thrtotal / AUTOTB_TRANSACTION_NUM;

    file_open(fstatus, fp, AUTOTB_LAT_RESULT_FILE, WRITE_MODE);
    if (fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_LAT_RESULT_FILE & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;

    if (AUTOTB_TRANSACTION_NUM = 1) then
        thrmax  := 0;
        thrmin  := 0;
        thraver := 0;
        write(token_line, "$MAX_LATENCY = " & '"' & integer'image(latmax) & '"');
        writeline(fp, token_line);
        write(token_line, "$MIN_LATENCY = " & '"' & integer'image(latmin) & '"');
        writeline(fp, token_line);
        write(token_line, "$AVER_LATENCY = " & '"' & integer'image(lataver) & '"');
        writeline(fp, token_line);
        write(token_line, "$MAX_THROUGHPUT = " & '"' & integer'image(thrmax) & '"');
        writeline(fp, token_line);
        write(token_line, "$MIN_THROUGHPUT = " & '"' & integer'image(thrmin) & '"');
        writeline(fp, token_line);
        write(token_line, "$AVER_THROUGHPUT = " & '"' & integer'image(thraver) & '"');
        writeline(fp, token_line);
    else
        write(token_line, "$MAX_LATENCY = " & '"' & integer'image(latmax) & '"');
        writeline(fp, token_line);
        write(token_line, "$MIN_LATENCY = " & '"' & integer'image(latmin) & '"');
        writeline(fp, token_line);
        write(token_line, "$AVER_LATENCY = " & '"' & integer'image(lataver) & '"');
        writeline(fp, token_line);
        write(token_line, "$MAX_THROUGHPUT = " & '"' & integer'image(thrmax) & '"');
        writeline(fp, token_line);
        write(token_line, "$MIN_THROUGHPUT = " & '"' & integer'image(thrmin) & '"');
        writeline(fp, token_line);
        write(token_line, "$AVER_THROUGHPUT = " & '"' & integer'image(thraver) & '"');
        writeline(fp, token_line);
    end if;

    file_close(fp);

    file_open(fstatus, fp, AUTOTB_PER_RESULT_TRANS_FILE, WRITE_MODE);
    if(fstatus /= OPEN_OK) then
        assert false report "Open file " & AUTOTB_PER_RESULT_TRANS_FILE & " failed!!!" severity note;
        assert false report "ERROR: Simulation using HLS TB failed." severity failure;
    end if;

    write(token_line,string'("                            latency            interval"));
    writeline(fp, token_line);
    if (AUTOTB_TRANSACTION_NUM = 1) then
        i := 0;
        thr_array(i) := 0;
        write(token_line,"transaction        " & integer'image(i) & "            " & integer'image(lat_array(i) ) & "            " & integer'image(thr_array(i) ) );
        writeline(fp, token_line);
    else
        for i in 0 to AESL_mLatCnterOut_addr - 1 loop
            write(token_line,"transaction        " & integer'image(i) & "            " & integer'image(lat_array(i) ) & "            " & integer'image(thr_array(i) ) );
            writeline(fp, token_line);
        end loop;
    end if;
    file_close(fp);
    wait;
end process;

end behav;
