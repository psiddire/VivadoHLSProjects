-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.4
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity Block_codeRepl846ncg_rom is 
    generic(
             dwidth     : integer := 10; 
             awidth     : integer := 10; 
             mem_size    : integer := 1024
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of Block_codeRepl846ncg_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "0000000001", 1 => "0000000011", 2 => "0000000101", 3 => "0000000111", 
    4 => "0000001010", 5 => "0000001100", 6 => "0000001110", 7 => "0000010000", 
    8 => "0000010010", 9 => "0000010101", 10 => "0000010111", 11 => "0000011001", 
    12 => "0000011011", 13 => "0000011101", 14 => "0000100000", 15 => "0000100010", 
    16 => "0000100100", 17 => "0000100110", 18 => "0000101000", 19 => "0000101011", 
    20 => "0000101101", 21 => "0000101111", 22 => "0000110001", 23 => "0000110011", 
    24 => "0000110110", 25 => "0000111000", 26 => "0000111010", 27 => "0000111100", 
    28 => "0000111110", 29 => "0001000001", 30 => "0001000011", 31 => "0001000101", 
    32 => "0001000111", 33 => "0001001001", 34 => "0001001100", 35 => "0001001110", 
    36 => "0001010000", 37 => "0001010010", 38 => "0001010100", 39 => "0001010111", 
    40 => "0001011001", 41 => "0001011011", 42 => "0001011101", 43 => "0001011111", 
    44 => "0001100010", 45 => "0001100100", 46 => "0001100110", 47 => "0001101000", 
    48 => "0001101010", 49 => "0001101101", 50 => "0001101111", 51 => "0001110001", 
    52 => "0001110011", 53 => "0001110101", 54 => "0001111000", 55 => "0001111010", 
    56 => "0001111100", 57 => "0001111110", 58 => "0010000000", 59 => "0010000011", 
    60 => "0010000101", 61 => "0010000111", 62 => "0010001001", 63 => "0010001011", 
    64 => "0010001110", 65 => "0010010000", 66 => "0010010010", 67 => "0010010100", 
    68 => "0010010110", 69 => "0010011001", 70 => "0010011011", 71 => "0010011101", 
    72 => "0010011111", 73 => "0010100001", 74 => "0010100100", 75 => "0010100110", 
    76 => "0010101000", 77 => "0010101010", 78 => "0010101100", 79 => "0010101111", 
    80 => "0010110001", 81 => "0010110011", 82 => "0010110101", 83 => "0010110111", 
    84 => "0010111010", 85 => "0010111100", 86 => "0010111110", 87 => "0011000000", 
    88 => "0011000010", 89 => "0011000101", 90 => "0011000111", 91 => "0011001001", 
    92 => "0011001011", 93 => "0011001101", 94 => "0011010000", 95 => "0011010010", 
    96 => "0011010100", 97 => "0011010110", 98 => "0011011000", 99 => "0011011011", 
    100 => "0011011101", 101 => "0011011111", 102 => "0011100001", 103 => "0011100011", 
    104 => "0011100110", 105 => "0011101000", 106 => "0011101010", 107 => "0011101100", 
    108 => "0011101110", 109 => "0011110001", 110 => "0011110011", 111 => "0011110101", 
    112 => "0011110111", 113 => "0011111001", 114 => "0011111100", 115 => "0011111110", 
    116 => "0100000000", 117 => "0100000010", 118 => "0100000100", 119 => "0100000111", 
    120 => "0100001001", 121 => "0100001011", 122 => "0100001101", 123 => "0100001111", 
    124 => "0100010010", 125 => "0100010100", 126 => "0100010110", 127 => "0100011000", 
    128 => "0100011010", 129 => "0100011101", 130 => "0100011111", 131 => "0100100001", 
    132 => "0100100011", 133 => "0100100101", 134 => "0100101000", 135 => "0100101010", 
    136 => "0100101100", 137 => "0100101110", 138 => "0100110000", 139 => "0100110011", 
    140 => "0100110101", 141 => "0100110111", 142 => "0100111001", 143 => "0100111011", 
    144 => "0100111110", 145 => "0101000000", 146 => "0101000010", 147 => "0101000100", 
    148 => "0101000110", 149 => "0101001001", 150 => "0101001011", 151 => "0101001101", 
    152 => "0101001111", 153 => "0101010001", 154 => "0101010100", 155 => "0101010110", 
    156 => "0101011000", 157 => "0101011010", 158 => "0101011100", 159 => "0101011111", 
    160 => "0101100001", 161 => "0101100011", 162 => "0101100101", 163 => "0101100111", 
    164 => "0101101010", 165 => "0101101100", 166 => "0101101110", 167 => "0101110000", 
    168 => "0101110010", 169 => "0101110101", 170 => "0101110111", 171 => "0101111001", 
    172 => "0101111011", 173 => "0101111101", 174 => "0110000000", 175 => "0110000010", 
    176 => "0110000100", 177 => "0110000110", 178 => "0110001000", 179 => "0110001011", 
    180 => "0110001101", 181 => "0110001111", 182 => "0110010001", 183 => "0110010011", 
    184 => "0110010110", 185 => "0110011000", 186 => "0110011010", 187 => "0110011100", 
    188 => "0110011110", 189 => "0110100001", 190 => "0110100011", 191 => "0110100101", 
    192 => "0110100111", 193 => "0110101001", 194 => "0110101100", 195 => "0110101110", 
    196 => "0110110000", 197 => "0110110010", 198 => "0110110100", 199 => "0110110111", 
    200 => "0110111001", 201 => "0110111011", 202 => "0110111101", 203 => "0110111111", 
    204 => "0111000010", 205 => "0111000100", 206 => "0111000110", 207 => "0111001000", 
    208 => "0111001010", 209 => "0111001101", 210 => "0111001111", 211 => "0111010001", 
    212 => "0111010011", 213 => "0111010101", 214 => "0111011000", 215 => "0111011010", 
    216 => "0111011100", 217 => "0111011110", 218 => "0111100000", 219 => "0111100011", 
    220 => "0111100101", 221 => "0111100111", 222 => "0111101001", 223 => "0111101011", 
    224 => "0111101110", 225 => "0111110000", 226 => "0111110010", 227 => "0111110100", 
    228 => "0111110110", 229 => "0111111001", 230 => "0111111011", 231 => "0111111101", 
    232 => "0111111111", 233 => "1000000001", 234 => "1000000100", 235 => "1000000110", 
    236 => "1000001000", 237 => "1000001010", 238 => "1000001100", 239 => "1000001111", 
    240 => "1000010001", 241 => "1000010011", 242 => "1000010101", 243 => "1000010111", 
    244 => "1000011010", 245 => "1000011100", 246 => "1000011110", 247 => "1000100000", 
    248 => "1000100010", 249 => "1000100101", 250 => "1000100111", 251 => "1000101001", 
    252 => "1000101011", 253 => "1000101101", 254 => "1000110000", 255 => "1000110010", 
    256 => "1000110100", 257 => "1000110110", 258 => "1000111000", 259 => "1000111011", 
    260 => "1000111101", 261 => "1000111111", 262 => "1001000001", 263 => "1001000011", 
    264 => "1001000110", 265 => "1001001000", 266 => "1001001010", 267 => "1001001100", 
    268 => "1001001110", 269 => "1001010001", 270 => "1001010011", 271 => "1001010101", 
    272 => "1001010111", 273 => "1001011001", 274 => "1001011100", 275 => "1001011110", 
    276 => "1001100000", 277 => "1001100010", 278 => "1001100100", 279 => "1001100111", 
    280 => "1001101001", 281 => "1001101011", 282 => "1001101101", 283 => "1001101111", 
    284 => "1001110010", 285 => "1001110100", 286 => "1001110110", 287 => "1001111000", 
    288 => "1001111010", 289 => "1001111101", 290 => "1001111111", 291 => "1010000001", 
    292 => "1010000011", 293 => "1010000101", 294 => "1010001000", 295 => "1010001010", 
    296 => "1010001100", 297 => "1010001110", 298 => "1010010000", 299 => "1010010011", 
    300 => "1010010101", 301 => "1010010111", 302 => "1010011001", 303 => "1010011011", 
    304 => "1010011110", 305 => "1010100000", 306 => "1010100010", 307 => "1010100100", 
    308 => "1010100110", 309 => "1010101001", 310 => "1010101011", 311 => "1010101101", 
    312 => "1010101111", 313 => "1010110001", 314 => "1010110100", 315 => "1010110110", 
    316 => "1010111000", 317 => "1010111010", 318 => "1010111100", 319 => "1010111111", 
    320 => "1011000001", 321 => "1011000011", 322 => "1011000101", 323 => "1011000111", 
    324 => "1011001010", 325 => "1011001100", 326 => "1011001110", 327 => "1011010000", 
    328 => "1011010010", 329 => "1011010101", 330 => "1011010111", 331 => "1011011001", 
    332 => "1011011011", 333 => "1011011101", 334 => "1011100000", 335 => "1011100010", 
    336 => "1011100100", 337 => "1011100110", 338 => "1011101000", 339 => "1011101011", 
    340 => "1011101101", 341 => "1011101111", 342 => "1011110001", 343 => "1011110011", 
    344 => "1011110110", 345 => "1011111000", 346 => "1011111010", 347 => "1011111100", 
    348 => "1011111110", 349 => "1100000001", 350 => "1100000011", 351 => "1100000101", 
    352 => "1100000111", 353 => "1100001001", 354 => "1100001100", 355 => "1100001110", 
    356 => "1100010000", 357 => "1100010010", 358 => "1100010100", 359 => "1100010111", 
    360 => "1100011001", 361 => "1100011011", 362 => "1100011101", 363 => "1100011111", 
    364 => "1100100010", 365 => "1100100100", 366 => "1100100110", 367 => "1100101000", 
    368 => "1100101010", 369 => "1100101101", 370 => "1100101111", 371 => "1100110001", 
    372 => "1100110011", 373 => "1100110101", 374 => "1100111000", 375 => "1100111010", 
    376 => "1100111100", 377 => "1100111110", 378 => "1101000000", 379 => "1101000011", 
    380 => "1101000101", 381 => "1101000111", 382 => "1101001001", 383 => "1101001011", 
    384 => "1101001110", 385 => "1101010000", 386 => "1101010010", 387 => "1101010100", 
    388 => "1101010110", 389 => "1101011001", 390 => "1101011011", 391 => "1101011101", 
    392 => "1101011111", 393 => "1101100001", 394 => "1101100100", 395 => "1101100110", 
    396 => "1101101000", 397 => "1101101010", 398 => "1101101100", 399 => "1101101111", 
    400 => "1101110001", 401 => "1101110011", 402 => "1101110101", 403 => "1101110111", 
    404 => "1101111010", 405 => "1101111100", 406 => "1101111110", 407 => "1110000000", 
    408 => "1110000010", 409 => "1110000101", 410 => "1110000111", 411 => "1110001001", 
    412 => "1110001011", 413 => "1110001101", 414 => "1110010000", 415 => "1110010010", 
    416 => "1110010100", 417 => "1110010110", 418 => "1110011000", 419 => "1110011011", 
    420 => "1110011101", 421 => "1110011111", 422 => "1110100001", 423 => "1110100011", 
    424 => "1110100110", 425 => "1110101000", 426 => "1110101010", 427 => "1110101100", 
    428 => "1110101110", 429 => "1110110001", 430 => "1110110011", 431 => "1110110101", 
    432 => "1110110111", 433 => "1110111001", 434 => "1110111100", 435 => "1110111110", 
    436 => "1111000000", 437 => "1111000010", 438 => "1111000100", 439 => "1111000111", 
    440 => "1111001001", 441 => "1111001011", 442 => "1111001101", 443 => "1111001111", 
    444 => "1111010010", 445 => "1111010100", 446 => "1111010110", 447 => "1111011000", 
    448 => "1111011010", 449 => "1111011101", 450 => "1111011111", 451 => "1111100001", 
    452 => "1111100011", 453 => "1111100101", 454 => "1111101000", 455 => "1111101010", 
    456 => "1111101100", 457 => "1111101110", 458 => "1111110000", 459 => "1111110011", 
    460 => "1111110101", 461 => "1111110111", 462 => "1111111001", 463 => "1111111011", 
    464 => "1111111110", 465 to 1023=> "1111111111" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity Block_codeRepl846ncg is
    generic (
        DataWidth : INTEGER := 10;
        AddressRange : INTEGER := 1024;
        AddressWidth : INTEGER := 10);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of Block_codeRepl846ncg is
    component Block_codeRepl846ncg_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    Block_codeRepl846ncg_rom_U :  component Block_codeRepl846ncg_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


