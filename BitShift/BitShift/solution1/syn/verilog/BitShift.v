// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.3
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="BitShift,hls_ip_2016_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xqku115-rlf1924-2-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.740000,HLS_SYN_LAT=2,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=1,HLS_SYN_FF=21,HLS_SYN_LUT=51}" *)

module BitShift (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_V_address0,
        a_V_ce0,
        a_V_q0,
        b_V_address0,
        b_V_ce0,
        b_V_we0,
        b_V_d0,
        b_V_address1,
        b_V_ce1,
        b_V_we1,
        b_V_d1
);

parameter    ap_ST_fsm_state1 = 3'b1;
parameter    ap_ST_fsm_state2 = 3'b10;
parameter    ap_ST_fsm_state3 = 3'b100;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv64_1 = 64'b1;
parameter    ap_const_lv64_0 = 64'b0000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv5_0 = 5'b00000;
parameter    ap_const_lv24_0 = 24'b000000000000000000000000;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv32_18 = 32'b11000;
parameter    ap_const_lv25_1FFFFDD = 25'b1111111111111111111011101;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [0:0] a_V_address0;
output   a_V_ce0;
input  [17:0] a_V_q0;
output  [0:0] b_V_address0;
output   b_V_ce0;
output   b_V_we0;
output  [18:0] b_V_d0;
output  [0:0] b_V_address1;
output   b_V_ce1;
output   b_V_we1;
output  [18:0] b_V_d1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[0:0] a_V_address0;
reg a_V_ce0;
reg b_V_ce0;
reg b_V_we0;
reg b_V_ce1;
reg b_V_we1;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state1;
wire   [0:0] ap_CS_fsm_state2;
reg   [17:0] a_V_load_1_reg_160;
wire   [0:0] ap_CS_fsm_state3;
wire   [22:0] p_shl_fu_79_p3;
wire   [23:0] p_shl_cast_fu_87_p1;
wire   [23:0] p_neg_fu_91_p2;
wire   [19:0] p_shl4_fu_101_p3;
wire  signed [24:0] p_neg_cast_fu_97_p1;
wire   [24:0] p_shl4_cast_fu_109_p1;
wire   [24:0] r_V_2_fu_113_p2;
wire  signed [24:0] r_V_fu_143_p2;
wire   [17:0] r_V_fu_143_p0;
wire  signed [6:0] r_V_fu_143_p1;
reg   [2:0] ap_NS_fsm;
wire   [24:0] r_V_fu_143_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'b1;
end

BitShift_mul_mul_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 7 ),
    .dout_WIDTH( 25 ))
BitShift_mul_mul_bkb_U1(
    .din0(r_V_fu_143_p0),
    .din1(r_V_fu_143_p1),
    .dout(r_V_fu_143_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        a_V_load_1_reg_160 <= a_V_q0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        a_V_address0 = ap_const_lv64_0;
    end else if ((ap_CS_fsm_state1 == 1'b1)) begin
        a_V_address0 = ap_const_lv64_1;
    end else begin
        a_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0)) | (1'b1 == ap_CS_fsm_state2))) begin
        a_V_ce0 = 1'b1;
    end else begin
        a_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        b_V_ce0 = 1'b1;
    end else begin
        b_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        b_V_ce1 = 1'b1;
    end else begin
        b_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        b_V_we0 = 1'b1;
    end else begin
        b_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        b_V_we1 = 1'b1;
    end else begin
        b_V_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[ap_const_lv32_0];

assign ap_CS_fsm_state2 = ap_CS_fsm[ap_const_lv32_1];

assign ap_CS_fsm_state3 = ap_CS_fsm[ap_const_lv32_2];

assign b_V_address0 = ap_const_lv64_0;

assign b_V_address1 = ap_const_lv64_1;

assign b_V_d0 = {{r_V_2_fu_113_p2[ap_const_lv32_18 : ap_const_lv32_6]}};

assign b_V_d1 = {{r_V_fu_143_p2[ap_const_lv32_18 : ap_const_lv32_6]}};

assign p_neg_cast_fu_97_p1 = $signed(p_neg_fu_91_p2);

assign p_neg_fu_91_p2 = (ap_const_lv24_0 - p_shl_cast_fu_87_p1);

assign p_shl4_cast_fu_109_p1 = p_shl4_fu_101_p3;

assign p_shl4_fu_101_p3 = {{a_V_q0}, {ap_const_lv2_0}};

assign p_shl_cast_fu_87_p1 = p_shl_fu_79_p3;

assign p_shl_fu_79_p3 = {{a_V_q0}, {ap_const_lv5_0}};

assign r_V_2_fu_113_p2 = ($signed(p_neg_cast_fu_97_p1) - $signed(p_shl4_cast_fu_109_p1));

assign r_V_fu_143_p0 = r_V_fu_143_p00;

assign r_V_fu_143_p00 = a_V_load_1_reg_160;

assign r_V_fu_143_p1 = ap_const_lv25_1FFFFDD;

endmodule //BitShift
