// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.3
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "BitShift.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic BitShift::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic BitShift::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> BitShift::ap_ST_fsm_state1 = "1";
const sc_lv<3> BitShift::ap_ST_fsm_state2 = "10";
const sc_lv<3> BitShift::ap_ST_fsm_state3 = "100";
const sc_lv<32> BitShift::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> BitShift::ap_const_lv1_1 = "1";
const sc_lv<32> BitShift::ap_const_lv32_1 = "1";
const sc_lv<64> BitShift::ap_const_lv64_1 = "1";
const sc_lv<64> BitShift::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<32> BitShift::ap_const_lv32_2 = "10";
const sc_lv<5> BitShift::ap_const_lv5_0 = "00000";
const sc_lv<24> BitShift::ap_const_lv24_0 = "000000000000000000000000";
const sc_lv<2> BitShift::ap_const_lv2_0 = "00";
const sc_lv<32> BitShift::ap_const_lv32_6 = "110";
const sc_lv<32> BitShift::ap_const_lv32_18 = "11000";
const sc_lv<25> BitShift::ap_const_lv25_1FFFFDD = "1111111111111111111011101";

BitShift::BitShift(sc_module_name name) : sc_module(name), mVcdFile(0) {
    BitShift_mul_mul_bkb_U1 = new BitShift_mul_mul_bkb<1,1,18,7,25>("BitShift_mul_mul_bkb_U1");
    BitShift_mul_mul_bkb_U1->din0(r_V_fu_143_p0);
    BitShift_mul_mul_bkb_U1->din1(r_V_fu_143_p1);
    BitShift_mul_mul_bkb_U1->dout(r_V_fu_143_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_a_V_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_a_V_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_b_V_address0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_b_V_address1);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_b_V_ce0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_b_V_ce1);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_b_V_d0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( r_V_2_fu_113_p2 );

    SC_METHOD(thread_b_V_d1);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( r_V_fu_143_p2 );

    SC_METHOD(thread_b_V_we0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_b_V_we1);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_p_neg_cast_fu_97_p1);
    sensitive << ( p_neg_fu_91_p2 );

    SC_METHOD(thread_p_neg_fu_91_p2);
    sensitive << ( p_shl_cast_fu_87_p1 );

    SC_METHOD(thread_p_shl4_cast_fu_109_p1);
    sensitive << ( p_shl4_fu_101_p3 );

    SC_METHOD(thread_p_shl4_fu_101_p3);
    sensitive << ( a_V_q0 );

    SC_METHOD(thread_p_shl_cast_fu_87_p1);
    sensitive << ( p_shl_fu_79_p3 );

    SC_METHOD(thread_p_shl_fu_79_p3);
    sensitive << ( a_V_q0 );

    SC_METHOD(thread_r_V_2_fu_113_p2);
    sensitive << ( p_neg_cast_fu_97_p1 );
    sensitive << ( p_shl4_cast_fu_109_p1 );

    SC_METHOD(thread_r_V_fu_143_p0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( r_V_fu_143_p00 );

    SC_METHOD(thread_r_V_fu_143_p00);
    sensitive << ( a_V_load_1_reg_160 );

    SC_METHOD(thread_r_V_fu_143_p1);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "BitShift_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, a_V_address0, "(port)a_V_address0");
    sc_trace(mVcdFile, a_V_ce0, "(port)a_V_ce0");
    sc_trace(mVcdFile, a_V_q0, "(port)a_V_q0");
    sc_trace(mVcdFile, b_V_address0, "(port)b_V_address0");
    sc_trace(mVcdFile, b_V_ce0, "(port)b_V_ce0");
    sc_trace(mVcdFile, b_V_we0, "(port)b_V_we0");
    sc_trace(mVcdFile, b_V_d0, "(port)b_V_d0");
    sc_trace(mVcdFile, b_V_address1, "(port)b_V_address1");
    sc_trace(mVcdFile, b_V_ce1, "(port)b_V_ce1");
    sc_trace(mVcdFile, b_V_we1, "(port)b_V_we1");
    sc_trace(mVcdFile, b_V_d1, "(port)b_V_d1");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, a_V_load_1_reg_160, "a_V_load_1_reg_160");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, p_shl_fu_79_p3, "p_shl_fu_79_p3");
    sc_trace(mVcdFile, p_shl_cast_fu_87_p1, "p_shl_cast_fu_87_p1");
    sc_trace(mVcdFile, p_neg_fu_91_p2, "p_neg_fu_91_p2");
    sc_trace(mVcdFile, p_shl4_fu_101_p3, "p_shl4_fu_101_p3");
    sc_trace(mVcdFile, p_neg_cast_fu_97_p1, "p_neg_cast_fu_97_p1");
    sc_trace(mVcdFile, p_shl4_cast_fu_109_p1, "p_shl4_cast_fu_109_p1");
    sc_trace(mVcdFile, r_V_2_fu_113_p2, "r_V_2_fu_113_p2");
    sc_trace(mVcdFile, r_V_fu_143_p2, "r_V_fu_143_p2");
    sc_trace(mVcdFile, r_V_fu_143_p0, "r_V_fu_143_p0");
    sc_trace(mVcdFile, r_V_fu_143_p1, "r_V_fu_143_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, r_V_fu_143_p00, "r_V_fu_143_p00");
#endif

    }
    mHdltvinHandle.open("BitShift.hdltvin.dat");
    mHdltvoutHandle.open("BitShift.hdltvout.dat");
}

BitShift::~BitShift() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete BitShift_mul_mul_bkb_U1;
}

void BitShift::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read()))) {
        a_V_load_1_reg_160 = a_V_q0.read();
    }
}

void BitShift::thread_a_V_address0() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read()))) {
        a_V_address0 =  (sc_lv<1>) (ap_const_lv64_0);
    } else if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1))) {
        a_V_address0 =  (sc_lv<1>) (ap_const_lv64_1);
    } else {
        a_V_address0 = "X";
    }
}

void BitShift::thread_a_V_ce0() {
    if (((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
          !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read())))) {
        a_V_ce0 = ap_const_logic_1;
    } else {
        a_V_ce0 = ap_const_logic_0;
    }
}

void BitShift::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read().range(0, 0);
}

void BitShift::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read().range(1, 1);
}

void BitShift::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read().range(2, 2);
}

void BitShift::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void BitShift::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void BitShift::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void BitShift::thread_b_V_address0() {
    b_V_address0 =  (sc_lv<1>) (ap_const_lv64_0);
}

void BitShift::thread_b_V_address1() {
    b_V_address1 =  (sc_lv<1>) (ap_const_lv64_1);
}

void BitShift::thread_b_V_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read()))) {
        b_V_ce0 = ap_const_logic_1;
    } else {
        b_V_ce0 = ap_const_logic_0;
    }
}

void BitShift::thread_b_V_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read()))) {
        b_V_ce1 = ap_const_logic_1;
    } else {
        b_V_ce1 = ap_const_logic_0;
    }
}

void BitShift::thread_b_V_d0() {
    b_V_d0 = r_V_2_fu_113_p2.read().range(24, 6);
}

void BitShift::thread_b_V_d1() {
    b_V_d1 = r_V_fu_143_p2.read().range(24, 6);
}

void BitShift::thread_b_V_we0() {
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read())))) {
        b_V_we0 = ap_const_logic_1;
    } else {
        b_V_we0 = ap_const_logic_0;
    }
}

void BitShift::thread_b_V_we1() {
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read())))) {
        b_V_we1 = ap_const_logic_1;
    } else {
        b_V_we1 = ap_const_logic_0;
    }
}

void BitShift::thread_p_neg_cast_fu_97_p1() {
    p_neg_cast_fu_97_p1 = esl_sext<25,24>(p_neg_fu_91_p2.read());
}

void BitShift::thread_p_neg_fu_91_p2() {
    p_neg_fu_91_p2 = (!ap_const_lv24_0.is_01() || !p_shl_cast_fu_87_p1.read().is_01())? sc_lv<24>(): (sc_biguint<24>(ap_const_lv24_0) - sc_biguint<24>(p_shl_cast_fu_87_p1.read()));
}

void BitShift::thread_p_shl4_cast_fu_109_p1() {
    p_shl4_cast_fu_109_p1 = esl_zext<25,20>(p_shl4_fu_101_p3.read());
}

void BitShift::thread_p_shl4_fu_101_p3() {
    p_shl4_fu_101_p3 = esl_concat<18,2>(a_V_q0.read(), ap_const_lv2_0);
}

void BitShift::thread_p_shl_cast_fu_87_p1() {
    p_shl_cast_fu_87_p1 = esl_zext<24,23>(p_shl_fu_79_p3.read());
}

void BitShift::thread_p_shl_fu_79_p3() {
    p_shl_fu_79_p3 = esl_concat<18,5>(a_V_q0.read(), ap_const_lv5_0);
}

void BitShift::thread_r_V_2_fu_113_p2() {
    r_V_2_fu_113_p2 = (!p_neg_cast_fu_97_p1.read().is_01() || !p_shl4_cast_fu_109_p1.read().is_01())? sc_lv<25>(): (sc_bigint<25>(p_neg_cast_fu_97_p1.read()) - sc_biguint<25>(p_shl4_cast_fu_109_p1.read()));
}

void BitShift::thread_r_V_fu_143_p0() {
    r_V_fu_143_p0 =  (sc_lv<18>) (r_V_fu_143_p00.read());
}

void BitShift::thread_r_V_fu_143_p00() {
    r_V_fu_143_p00 = esl_zext<25,18>(a_V_load_1_reg_160.read());
}

void BitShift::thread_r_V_fu_143_p1() {
    r_V_fu_143_p1 =  (sc_lv<7>) (ap_const_lv25_1FFFFDD);
}

void BitShift::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if (!esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<3>) ("XXX");
            break;
    }
}

void BitShift::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"a_V_address0\" :  \"" << a_V_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"a_V_ce0\" :  \"" << a_V_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"a_V_q0\" :  \"" << a_V_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"b_V_address0\" :  \"" << b_V_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"b_V_ce0\" :  \"" << b_V_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"b_V_we0\" :  \"" << b_V_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"b_V_d0\" :  \"" << b_V_d0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"b_V_address1\" :  \"" << b_V_address1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"b_V_ce1\" :  \"" << b_V_ce1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"b_V_we1\" :  \"" << b_V_we1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"b_V_d1\" :  \"" << b_V_d1.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

