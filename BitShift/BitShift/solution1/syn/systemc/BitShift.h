// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.3
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _BitShift_HH_
#define _BitShift_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "BitShift_mul_mul_bkb.h"

namespace ap_rtl {

struct BitShift : public sc_module {
    // Port declarations 17
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<1> > a_V_address0;
    sc_out< sc_logic > a_V_ce0;
    sc_in< sc_lv<18> > a_V_q0;
    sc_out< sc_lv<1> > b_V_address0;
    sc_out< sc_logic > b_V_ce0;
    sc_out< sc_logic > b_V_we0;
    sc_out< sc_lv<19> > b_V_d0;
    sc_out< sc_lv<1> > b_V_address1;
    sc_out< sc_logic > b_V_ce1;
    sc_out< sc_logic > b_V_we1;
    sc_out< sc_lv<19> > b_V_d1;


    // Module declarations
    BitShift(sc_module_name name);
    SC_HAS_PROCESS(BitShift);

    ~BitShift();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    BitShift_mul_mul_bkb<1,1,18,7,25>* BitShift_mul_mul_bkb_U1;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_lv<1> > ap_CS_fsm_state1;
    sc_signal< sc_lv<1> > ap_CS_fsm_state2;
    sc_signal< sc_lv<18> > a_V_load_1_reg_160;
    sc_signal< sc_lv<1> > ap_CS_fsm_state3;
    sc_signal< sc_lv<23> > p_shl_fu_79_p3;
    sc_signal< sc_lv<24> > p_shl_cast_fu_87_p1;
    sc_signal< sc_lv<24> > p_neg_fu_91_p2;
    sc_signal< sc_lv<20> > p_shl4_fu_101_p3;
    sc_signal< sc_lv<25> > p_neg_cast_fu_97_p1;
    sc_signal< sc_lv<25> > p_shl4_cast_fu_109_p1;
    sc_signal< sc_lv<25> > r_V_2_fu_113_p2;
    sc_signal< sc_lv<25> > r_V_fu_143_p2;
    sc_signal< sc_lv<18> > r_V_fu_143_p0;
    sc_signal< sc_lv<7> > r_V_fu_143_p1;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    sc_signal< sc_lv<25> > r_V_fu_143_p00;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_state2;
    static const sc_lv<3> ap_ST_fsm_state3;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<64> ap_const_lv64_1;
    static const sc_lv<64> ap_const_lv64_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_lv<24> ap_const_lv24_0;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<32> ap_const_lv32_18;
    static const sc_lv<25> ap_const_lv25_1FFFFDD;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_a_V_address0();
    void thread_a_V_ce0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_b_V_address0();
    void thread_b_V_address1();
    void thread_b_V_ce0();
    void thread_b_V_ce1();
    void thread_b_V_d0();
    void thread_b_V_d1();
    void thread_b_V_we0();
    void thread_b_V_we1();
    void thread_p_neg_cast_fu_97_p1();
    void thread_p_neg_fu_91_p2();
    void thread_p_shl4_cast_fu_109_p1();
    void thread_p_shl4_fu_101_p3();
    void thread_p_shl_cast_fu_87_p1();
    void thread_p_shl_fu_79_p3();
    void thread_r_V_2_fu_113_p2();
    void thread_r_V_fu_143_p0();
    void thread_r_V_fu_143_p00();
    void thread_r_V_fu_143_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
