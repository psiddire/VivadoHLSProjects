-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.3
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity BitShift is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    a_V_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    a_V_ce0 : OUT STD_LOGIC;
    a_V_q0 : IN STD_LOGIC_VECTOR (17 downto 0);
    b_V_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    b_V_ce0 : OUT STD_LOGIC;
    b_V_we0 : OUT STD_LOGIC;
    b_V_d0 : OUT STD_LOGIC_VECTOR (18 downto 0);
    b_V_address1 : OUT STD_LOGIC_VECTOR (0 downto 0);
    b_V_ce1 : OUT STD_LOGIC;
    b_V_we1 : OUT STD_LOGIC;
    b_V_d1 : OUT STD_LOGIC_VECTOR (18 downto 0) );
end;


architecture behav of BitShift is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "BitShift,hls_ip_2016_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xqku115-rlf1924-2-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.740000,HLS_SYN_LAT=2,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=1,HLS_SYN_FF=21,HLS_SYN_LUT=51}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv25_1FFFFDD : STD_LOGIC_VECTOR (24 downto 0) := "1111111111111111111011101";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal a_V_load_1_reg_160 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal p_shl_fu_79_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_shl_cast_fu_87_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_neg_fu_91_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_shl4_fu_101_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal p_neg_cast_fu_97_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal p_shl4_cast_fu_109_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal r_V_2_fu_113_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal r_V_fu_143_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal r_V_fu_143_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_fu_143_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal r_V_fu_143_p00 : STD_LOGIC_VECTOR (24 downto 0);

    component BitShift_mul_mul_bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        dout : OUT STD_LOGIC_VECTOR (24 downto 0) );
    end component;



begin
    BitShift_mul_mul_bkb_U1 : component BitShift_mul_mul_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 7,
        dout_WIDTH => 25)
    port map (
        din0 => r_V_fu_143_p0,
        din1 => r_V_fu_143_p1,
        dout => r_V_fu_143_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state2))) then
                a_V_load_1_reg_160 <= a_V_q0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;

    a_V_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state2))) then 
            a_V_address0 <= ap_const_lv64_0(1 - 1 downto 0);
        elsif (((ap_CS_fsm_state1 = ap_const_lv1_1))) then 
            a_V_address0 <= ap_const_lv64_1(1 - 1 downto 0);
        else 
            a_V_address0 <= "X";
        end if; 
    end process;


    a_V_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2)
    begin
        if ((((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0))) or ((ap_const_lv1_1 = ap_CS_fsm_state2)))) then 
            a_V_ce0 <= ap_const_logic_1;
        else 
            a_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0 downto 0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1 downto 1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2 downto 2);

    ap_done_assign_proc : process(ap_CS_fsm_state3)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state3))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state3)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state3))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    b_V_address0 <= ap_const_lv64_0(1 - 1 downto 0);
    b_V_address1 <= ap_const_lv64_1(1 - 1 downto 0);

    b_V_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state3))) then 
            b_V_ce0 <= ap_const_logic_1;
        else 
            b_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    b_V_ce1_assign_proc : process(ap_CS_fsm_state3)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state3))) then 
            b_V_ce1 <= ap_const_logic_1;
        else 
            b_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    b_V_d0 <= r_V_2_fu_113_p2(24 downto 6);
    b_V_d1 <= r_V_fu_143_p2(24 downto 6);

    b_V_we0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state3)))) then 
            b_V_we0 <= ap_const_logic_1;
        else 
            b_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    b_V_we1_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state3)))) then 
            b_V_we1 <= ap_const_logic_1;
        else 
            b_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

        p_neg_cast_fu_97_p1 <= std_logic_vector(resize(signed(p_neg_fu_91_p2),25));

    p_neg_fu_91_p2 <= std_logic_vector(unsigned(ap_const_lv24_0) - unsigned(p_shl_cast_fu_87_p1));
    p_shl4_cast_fu_109_p1 <= std_logic_vector(resize(unsigned(p_shl4_fu_101_p3),25));
    p_shl4_fu_101_p3 <= (a_V_q0 & ap_const_lv2_0);
    p_shl_cast_fu_87_p1 <= std_logic_vector(resize(unsigned(p_shl_fu_79_p3),24));
    p_shl_fu_79_p3 <= (a_V_q0 & ap_const_lv5_0);
    r_V_2_fu_113_p2 <= std_logic_vector(signed(p_neg_cast_fu_97_p1) - signed(p_shl4_cast_fu_109_p1));
    r_V_fu_143_p0 <= r_V_fu_143_p00(18 - 1 downto 0);
    r_V_fu_143_p00 <= std_logic_vector(resize(unsigned(a_V_load_1_reg_160),25));
    r_V_fu_143_p1 <= ap_const_lv25_1FFFFDD(7 - 1 downto 0);
end behav;
